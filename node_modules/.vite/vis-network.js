import "./chunk-4YJPEX7N.js";

// node_modules/vis-data/peer/esm/vis-data.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var defineProperty$e = { exports: {} };
var check = function(it2) {
  return it2 && it2.Math == Math && it2;
};
var global$M = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof commonjsGlobal == "object" && commonjsGlobal) || function() {
  return this;
}() || Function("return this")();
var fails$r = function(exec3) {
  try {
    return !!exec3();
  } catch (error) {
    return true;
  }
};
var fails$q = fails$r;
var functionBindNative = !fails$q(function() {
  var test3 = function() {
  }.bind();
  return typeof test3 != "function" || test3.hasOwnProperty("prototype");
});
var NATIVE_BIND$4 = functionBindNative;
var FunctionPrototype$3 = Function.prototype;
var apply$6 = FunctionPrototype$3.apply;
var call$c = FunctionPrototype$3.call;
var functionApply = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND$4 ? call$c.bind(apply$6) : function() {
  return call$c.apply(apply$6, arguments);
});
var NATIVE_BIND$3 = functionBindNative;
var FunctionPrototype$2 = Function.prototype;
var bind$d = FunctionPrototype$2.bind;
var call$b = FunctionPrototype$2.call;
var uncurryThis$t = NATIVE_BIND$3 && bind$d.bind(call$b, call$b);
var functionUncurryThis = NATIVE_BIND$3 ? function(fn) {
  return fn && uncurryThis$t(fn);
} : function(fn) {
  return fn && function() {
    return call$b.apply(fn, arguments);
  };
};
var isCallable$h = function(argument) {
  return typeof argument == "function";
};
var objectGetOwnPropertyDescriptor = {};
var fails$p = fails$r;
var descriptors = !fails$p(function() {
  return Object.defineProperty({}, 1, {
    get: function() {
      return 7;
    }
  })[1] != 7;
});
var NATIVE_BIND$2 = functionBindNative;
var call$a = Function.prototype.call;
var functionCall = NATIVE_BIND$2 ? call$a.bind(call$a) : function() {
  return call$a.apply(call$a, arguments);
};
var objectPropertyIsEnumerable = {};
var $propertyIsEnumerable$2 = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor$5 = Object.getOwnPropertyDescriptor;
var NASHORN_BUG = getOwnPropertyDescriptor$5 && !$propertyIsEnumerable$2.call({
  1: 2
}, 1);
objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor$5(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable$2;
var createPropertyDescriptor$5 = function(bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value
  };
};
var uncurryThis$s = functionUncurryThis;
var toString$9 = uncurryThis$s({}.toString);
var stringSlice$1 = uncurryThis$s("".slice);
var classofRaw$1 = function(it2) {
  return stringSlice$1(toString$9(it2), 8, -1);
};
var global$L = global$M;
var uncurryThis$r = functionUncurryThis;
var fails$o = fails$r;
var classof$f = classofRaw$1;
var Object$9 = global$L.Object;
var split = uncurryThis$r("".split);
var indexedObject = fails$o(function() {
  return !Object$9("z").propertyIsEnumerable(0);
}) ? function(it2) {
  return classof$f(it2) == "String" ? split(it2, "") : Object$9(it2);
} : Object$9;
var global$K = global$M;
var TypeError$j = global$K.TypeError;
var requireObjectCoercible$5 = function(it2) {
  if (it2 == void 0)
    throw TypeError$j("Can't call method on " + it2);
  return it2;
};
var IndexedObject$3 = indexedObject;
var requireObjectCoercible$4 = requireObjectCoercible$5;
var toIndexedObject$b = function(it2) {
  return IndexedObject$3(requireObjectCoercible$4(it2));
};
var isCallable$g = isCallable$h;
var isObject$f = function(it2) {
  return typeof it2 == "object" ? it2 !== null : isCallable$g(it2);
};
var path$q = {};
var path$p = path$q;
var global$J = global$M;
var isCallable$f = isCallable$h;
var aFunction = function(variable) {
  return isCallable$f(variable) ? variable : void 0;
};
var getBuiltIn$9 = function(namespace, method3) {
  return arguments.length < 2 ? aFunction(path$p[namespace]) || aFunction(global$J[namespace]) : path$p[namespace] && path$p[namespace][method3] || global$J[namespace] && global$J[namespace][method3];
};
var uncurryThis$q = functionUncurryThis;
var objectIsPrototypeOf = uncurryThis$q({}.isPrototypeOf);
var getBuiltIn$8 = getBuiltIn$9;
var engineUserAgent = getBuiltIn$8("navigator", "userAgent") || "";
var global$I = global$M;
var userAgent$3 = engineUserAgent;
var process = global$I.process;
var Deno = global$I.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match;
var version;
if (v8) {
  match = v8.split(".");
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}
if (!version && userAgent$3) {
  match = userAgent$3.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent$3.match(/Chrome\/(\d+)/);
    if (match)
      version = +match[1];
  }
}
var engineV8Version = version;
var V8_VERSION$2 = engineV8Version;
var fails$n = fails$r;
var nativeSymbol = !!Object.getOwnPropertySymbols && !fails$n(function() {
  var symbol3 = Symbol();
  return !String(symbol3) || !(Object(symbol3) instanceof Symbol) || !Symbol.sham && V8_VERSION$2 && V8_VERSION$2 < 41;
});
var NATIVE_SYMBOL$2 = nativeSymbol;
var useSymbolAsUid = NATIVE_SYMBOL$2 && !Symbol.sham && typeof Symbol.iterator == "symbol";
var global$H = global$M;
var getBuiltIn$7 = getBuiltIn$9;
var isCallable$e = isCallable$h;
var isPrototypeOf$i = objectIsPrototypeOf;
var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
var Object$8 = global$H.Object;
var isSymbol$3 = USE_SYMBOL_AS_UID$1 ? function(it2) {
  return typeof it2 == "symbol";
} : function(it2) {
  var $Symbol3 = getBuiltIn$7("Symbol");
  return isCallable$e($Symbol3) && isPrototypeOf$i($Symbol3.prototype, Object$8(it2));
};
var global$G = global$M;
var String$4 = global$G.String;
var tryToString$4 = function(argument) {
  try {
    return String$4(argument);
  } catch (error) {
    return "Object";
  }
};
var global$F = global$M;
var isCallable$d = isCallable$h;
var tryToString$3 = tryToString$4;
var TypeError$i = global$F.TypeError;
var aCallable$7 = function(argument) {
  if (isCallable$d(argument))
    return argument;
  throw TypeError$i(tryToString$3(argument) + " is not a function");
};
var aCallable$6 = aCallable$7;
var getMethod$3 = function(V, P) {
  var func = V[P];
  return func == null ? void 0 : aCallable$6(func);
};
var global$E = global$M;
var call$9 = functionCall;
var isCallable$c = isCallable$h;
var isObject$e = isObject$f;
var TypeError$h = global$E.TypeError;
var ordinaryToPrimitive$1 = function(input, pref) {
  var fn, val;
  if (pref === "string" && isCallable$c(fn = input.toString) && !isObject$e(val = call$9(fn, input)))
    return val;
  if (isCallable$c(fn = input.valueOf) && !isObject$e(val = call$9(fn, input)))
    return val;
  if (pref !== "string" && isCallable$c(fn = input.toString) && !isObject$e(val = call$9(fn, input)))
    return val;
  throw TypeError$h("Can't convert object to primitive value");
};
var shared$4 = { exports: {} };
var global$D = global$M;
var defineProperty$d = Object.defineProperty;
var setGlobal$1 = function(key, value) {
  try {
    defineProperty$d(global$D, key, {
      value,
      configurable: true,
      writable: true
    });
  } catch (error) {
    global$D[key] = value;
  }
  return value;
};
var global$C = global$M;
var setGlobal = setGlobal$1;
var SHARED = "__core-js_shared__";
var store$3 = global$C[SHARED] || setGlobal(SHARED, {});
var sharedStore = store$3;
var store$2 = sharedStore;
(shared$4.exports = function(key, value) {
  return store$2[key] || (store$2[key] = value !== void 0 ? value : {});
})("versions", []).push({
  version: "3.21.1",
  mode: "pure",
  copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
  license: "https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",
  source: "https://github.com/zloirock/core-js"
});
var global$B = global$M;
var requireObjectCoercible$3 = requireObjectCoercible$5;
var Object$7 = global$B.Object;
var toObject$e = function(argument) {
  return Object$7(requireObjectCoercible$3(argument));
};
var uncurryThis$p = functionUncurryThis;
var toObject$d = toObject$e;
var hasOwnProperty = uncurryThis$p({}.hasOwnProperty);
var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it2, key) {
  return hasOwnProperty(toObject$d(it2), key);
};
var uncurryThis$o = functionUncurryThis;
var id$1 = 0;
var postfix = Math.random();
var toString$8 = uncurryThis$o(1 .toString);
var uid$4 = function(key) {
  return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString$8(++id$1 + postfix, 36);
};
var global$A = global$M;
var shared$3 = shared$4.exports;
var hasOwn$f = hasOwnProperty_1;
var uid$3 = uid$4;
var NATIVE_SYMBOL$1 = nativeSymbol;
var USE_SYMBOL_AS_UID = useSymbolAsUid;
var WellKnownSymbolsStore$1 = shared$3("wks");
var Symbol$2 = global$A.Symbol;
var symbolFor = Symbol$2 && Symbol$2["for"];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$2 : Symbol$2 && Symbol$2.withoutSetter || uid$3;
var wellKnownSymbol$j = function(name) {
  if (!hasOwn$f(WellKnownSymbolsStore$1, name) || !(NATIVE_SYMBOL$1 || typeof WellKnownSymbolsStore$1[name] == "string")) {
    var description = "Symbol." + name;
    if (NATIVE_SYMBOL$1 && hasOwn$f(Symbol$2, name)) {
      WellKnownSymbolsStore$1[name] = Symbol$2[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore$1[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore$1[name] = createWellKnownSymbol(description);
    }
  }
  return WellKnownSymbolsStore$1[name];
};
var global$z = global$M;
var call$8 = functionCall;
var isObject$d = isObject$f;
var isSymbol$2 = isSymbol$3;
var getMethod$2 = getMethod$3;
var ordinaryToPrimitive = ordinaryToPrimitive$1;
var wellKnownSymbol$i = wellKnownSymbol$j;
var TypeError$g = global$z.TypeError;
var TO_PRIMITIVE$1 = wellKnownSymbol$i("toPrimitive");
var toPrimitive$1 = function(input, pref) {
  if (!isObject$d(input) || isSymbol$2(input))
    return input;
  var exoticToPrim = getMethod$2(input, TO_PRIMITIVE$1);
  var result;
  if (exoticToPrim) {
    if (pref === void 0)
      pref = "default";
    result = call$8(exoticToPrim, input, pref);
    if (!isObject$d(result) || isSymbol$2(result))
      return result;
    throw TypeError$g("Can't convert object to primitive value");
  }
  if (pref === void 0)
    pref = "number";
  return ordinaryToPrimitive(input, pref);
};
var toPrimitive = toPrimitive$1;
var isSymbol$1 = isSymbol$3;
var toPropertyKey$4 = function(argument) {
  var key = toPrimitive(argument, "string");
  return isSymbol$1(key) ? key : key + "";
};
var global$y = global$M;
var isObject$c = isObject$f;
var document$1 = global$y.document;
var EXISTS$1 = isObject$c(document$1) && isObject$c(document$1.createElement);
var documentCreateElement$1 = function(it2) {
  return EXISTS$1 ? document$1.createElement(it2) : {};
};
var DESCRIPTORS$h = descriptors;
var fails$m = fails$r;
var createElement = documentCreateElement$1;
var ie8DomDefine = !DESCRIPTORS$h && !fails$m(function() {
  return Object.defineProperty(createElement("div"), "a", {
    get: function() {
      return 7;
    }
  }).a != 7;
});
var DESCRIPTORS$g = descriptors;
var call$7 = functionCall;
var propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;
var createPropertyDescriptor$4 = createPropertyDescriptor$5;
var toIndexedObject$a = toIndexedObject$b;
var toPropertyKey$3 = toPropertyKey$4;
var hasOwn$e = hasOwnProperty_1;
var IE8_DOM_DEFINE$1 = ie8DomDefine;
var $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;
objectGetOwnPropertyDescriptor.f = DESCRIPTORS$g ? $getOwnPropertyDescriptor$2 : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject$a(O);
  P = toPropertyKey$3(P);
  if (IE8_DOM_DEFINE$1)
    try {
      return $getOwnPropertyDescriptor$2(O, P);
    } catch (error) {
    }
  if (hasOwn$e(O, P))
    return createPropertyDescriptor$4(!call$7(propertyIsEnumerableModule$2.f, O, P), O[P]);
};
var fails$l = fails$r;
var isCallable$b = isCallable$h;
var replacement = /#|\.prototype\./;
var isForced$1 = function(feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true : value == NATIVE ? false : isCallable$b(detection) ? fails$l(detection) : !!detection;
};
var normalize = isForced$1.normalize = function(string2) {
  return String(string2).replace(replacement, ".").toLowerCase();
};
var data = isForced$1.data = {};
var NATIVE = isForced$1.NATIVE = "N";
var POLYFILL = isForced$1.POLYFILL = "P";
var isForced_1 = isForced$1;
var uncurryThis$n = functionUncurryThis;
var aCallable$5 = aCallable$7;
var NATIVE_BIND$1 = functionBindNative;
var bind$c = uncurryThis$n(uncurryThis$n.bind);
var functionBindContext = function(fn, that) {
  aCallable$5(fn);
  return that === void 0 ? fn : NATIVE_BIND$1 ? bind$c(fn, that) : function() {
    return fn.apply(that, arguments);
  };
};
var objectDefineProperty = {};
var DESCRIPTORS$f = descriptors;
var fails$k = fails$r;
var v8PrototypeDefineBug = DESCRIPTORS$f && fails$k(function() {
  return Object.defineProperty(function() {
  }, "prototype", {
    value: 42,
    writable: false
  }).prototype != 42;
});
var global$x = global$M;
var isObject$b = isObject$f;
var String$3 = global$x.String;
var TypeError$f = global$x.TypeError;
var anObject$b = function(argument) {
  if (isObject$b(argument))
    return argument;
  throw TypeError$f(String$3(argument) + " is not an object");
};
var global$w = global$M;
var DESCRIPTORS$e = descriptors;
var IE8_DOM_DEFINE = ie8DomDefine;
var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
var anObject$a = anObject$b;
var toPropertyKey$2 = toPropertyKey$4;
var TypeError$e = global$w.TypeError;
var $defineProperty$1 = Object.defineProperty;
var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
var ENUMERABLE = "enumerable";
var CONFIGURABLE$1 = "configurable";
var WRITABLE = "writable";
objectDefineProperty.f = DESCRIPTORS$e ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
  anObject$a(O);
  P = toPropertyKey$2(P);
  anObject$a(Attributes);
  if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor$1(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  }
  return $defineProperty$1(O, P, Attributes);
} : $defineProperty$1 : function defineProperty2(O, P, Attributes) {
  anObject$a(O);
  P = toPropertyKey$2(P);
  anObject$a(Attributes);
  if (IE8_DOM_DEFINE)
    try {
      return $defineProperty$1(O, P, Attributes);
    } catch (error) {
    }
  if ("get" in Attributes || "set" in Attributes)
    throw TypeError$e("Accessors not supported");
  if ("value" in Attributes)
    O[P] = Attributes.value;
  return O;
};
var DESCRIPTORS$d = descriptors;
var definePropertyModule$4 = objectDefineProperty;
var createPropertyDescriptor$3 = createPropertyDescriptor$5;
var createNonEnumerableProperty$6 = DESCRIPTORS$d ? function(object2, key, value) {
  return definePropertyModule$4.f(object2, key, createPropertyDescriptor$3(1, value));
} : function(object2, key, value) {
  object2[key] = value;
  return object2;
};
var global$v = global$M;
var apply$5 = functionApply;
var uncurryThis$m = functionUncurryThis;
var isCallable$a = isCallable$h;
var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f;
var isForced = isForced_1;
var path$o = path$q;
var bind$b = functionBindContext;
var createNonEnumerableProperty$5 = createNonEnumerableProperty$6;
var hasOwn$d = hasOwnProperty_1;
var wrapConstructor = function(NativeConstructor) {
  var Wrapper = function(a, b, c2) {
    if (this instanceof Wrapper) {
      switch (arguments.length) {
        case 0:
          return new NativeConstructor();
        case 1:
          return new NativeConstructor(a);
        case 2:
          return new NativeConstructor(a, b);
      }
      return new NativeConstructor(a, b, c2);
    }
    return apply$5(NativeConstructor, this, arguments);
  };
  Wrapper.prototype = NativeConstructor.prototype;
  return Wrapper;
};
var _export = function(options2, source) {
  var TARGET = options2.target;
  var GLOBAL = options2.global;
  var STATIC = options2.stat;
  var PROTO = options2.proto;
  var nativeSource = GLOBAL ? global$v : STATIC ? global$v[TARGET] : (global$v[TARGET] || {}).prototype;
  var target = GLOBAL ? path$o : path$o[TARGET] || createNonEnumerableProperty$5(path$o, TARGET, {})[TARGET];
  var targetPrototype = target.prototype;
  var FORCED3, USE_NATIVE, VIRTUAL_PROTOTYPE;
  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
  for (key in source) {
    FORCED3 = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options2.forced);
    USE_NATIVE = !FORCED3 && nativeSource && hasOwn$d(nativeSource, key);
    targetProperty = target[key];
    if (USE_NATIVE)
      if (options2.noTargetGet) {
        descriptor = getOwnPropertyDescriptor$4(nativeSource, key);
        nativeProperty = descriptor && descriptor.value;
      } else
        nativeProperty = nativeSource[key];
    sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
    if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
      continue;
    if (options2.bind && USE_NATIVE)
      resultProperty = bind$b(sourceProperty, global$v);
    else if (options2.wrap && USE_NATIVE)
      resultProperty = wrapConstructor(sourceProperty);
    else if (PROTO && isCallable$a(sourceProperty))
      resultProperty = uncurryThis$m(sourceProperty);
    else
      resultProperty = sourceProperty;
    if (options2.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
      createNonEnumerableProperty$5(resultProperty, "sham", true);
    }
    createNonEnumerableProperty$5(target, key, resultProperty);
    if (PROTO) {
      VIRTUAL_PROTOTYPE = TARGET + "Prototype";
      if (!hasOwn$d(path$o, VIRTUAL_PROTOTYPE)) {
        createNonEnumerableProperty$5(path$o, VIRTUAL_PROTOTYPE, {});
      }
      createNonEnumerableProperty$5(path$o[VIRTUAL_PROTOTYPE], key, sourceProperty);
      if (options2.real && targetPrototype && !targetPrototype[key]) {
        createNonEnumerableProperty$5(targetPrototype, key, sourceProperty);
      }
    }
  }
};
var $$C = _export;
var DESCRIPTORS$c = descriptors;
var defineProperty$c = objectDefineProperty.f;
$$C({
  target: "Object",
  stat: true,
  forced: Object.defineProperty !== defineProperty$c,
  sham: !DESCRIPTORS$c
}, {
  defineProperty: defineProperty$c
});
var path$n = path$q;
var Object$6 = path$n.Object;
var defineProperty$b = defineProperty$e.exports = function defineProperty3(it2, key, desc) {
  return Object$6.defineProperty(it2, key, desc);
};
if (Object$6.defineProperty.sham)
  defineProperty$b.sham = true;
var parent$V = defineProperty$e.exports;
var defineProperty$a = parent$V;
var parent$U = defineProperty$a;
var defineProperty$9 = parent$U;
var parent$T = defineProperty$9;
var defineProperty$8 = parent$T;
var defineProperty$7 = defineProperty$8;
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    defineProperty$7(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  defineProperty$7(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    defineProperty$7(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var uncurryThis$l = functionUncurryThis;
var arraySlice$5 = uncurryThis$l([].slice);
var global$u = global$M;
var uncurryThis$k = functionUncurryThis;
var aCallable$4 = aCallable$7;
var isObject$a = isObject$f;
var hasOwn$c = hasOwnProperty_1;
var arraySlice$4 = arraySlice$5;
var NATIVE_BIND = functionBindNative;
var Function$2 = global$u.Function;
var concat$6 = uncurryThis$k([].concat);
var join = uncurryThis$k([].join);
var factories = {};
var construct$4 = function(C, argsLength, args) {
  if (!hasOwn$c(factories, argsLength)) {
    for (var list = [], i = 0; i < argsLength; i++)
      list[i] = "a[" + i + "]";
    factories[argsLength] = Function$2("C,a", "return new C(" + join(list, ",") + ")");
  }
  return factories[argsLength](C, args);
};
var functionBind = NATIVE_BIND ? Function$2.bind : function bind(that) {
  var F = aCallable$4(this);
  var Prototype = F.prototype;
  var partArgs = arraySlice$4(arguments, 1);
  var boundFunction = function bound() {
    var args = concat$6(partArgs, arraySlice$4(arguments));
    return this instanceof boundFunction ? construct$4(F, args.length, args) : F.apply(that, args);
  };
  if (isObject$a(Prototype))
    boundFunction.prototype = Prototype;
  return boundFunction;
};
var $$B = _export;
var bind$a = functionBind;
$$B({
  target: "Function",
  proto: true,
  forced: Function.bind !== bind$a
}, {
  bind: bind$a
});
var path$m = path$q;
var entryVirtual$k = function(CONSTRUCTOR) {
  return path$m[CONSTRUCTOR + "Prototype"];
};
var entryVirtual$j = entryVirtual$k;
var bind$9 = entryVirtual$j("Function").bind;
var isPrototypeOf$h = objectIsPrototypeOf;
var method$e = bind$9;
var FunctionPrototype$1 = Function.prototype;
var bind$8 = function(it2) {
  var own = it2.bind;
  return it2 === FunctionPrototype$1 || isPrototypeOf$h(FunctionPrototype$1, it2) && own === FunctionPrototype$1.bind ? method$e : own;
};
var parent$S = bind$8;
var bind$7 = parent$S;
var bind$6 = bind$7;
var ceil = Math.ceil;
var floor$1 = Math.floor;
var toIntegerOrInfinity$4 = function(argument) {
  var number2 = +argument;
  return number2 !== number2 || number2 === 0 ? 0 : (number2 > 0 ? floor$1 : ceil)(number2);
};
var toIntegerOrInfinity$3 = toIntegerOrInfinity$4;
var min$2 = Math.min;
var toLength$1 = function(argument) {
  return argument > 0 ? min$2(toIntegerOrInfinity$3(argument), 9007199254740991) : 0;
};
var toLength = toLength$1;
var lengthOfArrayLike$d = function(obj) {
  return toLength(obj.length);
};
var global$t = global$M;
var aCallable$3 = aCallable$7;
var toObject$c = toObject$e;
var IndexedObject$2 = indexedObject;
var lengthOfArrayLike$c = lengthOfArrayLike$d;
var TypeError$d = global$t.TypeError;
var createMethod$5 = function(IS_RIGHT) {
  return function(that, callbackfn, argumentsLength, memo) {
    aCallable$3(callbackfn);
    var O = toObject$c(that);
    var self2 = IndexedObject$2(O);
    var length2 = lengthOfArrayLike$c(O);
    var index2 = IS_RIGHT ? length2 - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2)
      while (true) {
        if (index2 in self2) {
          memo = self2[index2];
          index2 += i;
          break;
        }
        index2 += i;
        if (IS_RIGHT ? index2 < 0 : length2 <= index2) {
          throw TypeError$d("Reduce of empty array with no initial value");
        }
      }
    for (; IS_RIGHT ? index2 >= 0 : length2 > index2; index2 += i)
      if (index2 in self2) {
        memo = callbackfn(memo, self2[index2], index2, O);
      }
    return memo;
  };
};
var arrayReduce = {
  left: createMethod$5(false),
  right: createMethod$5(true)
};
var fails$j = fails$r;
var arrayMethodIsStrict$5 = function(METHOD_NAME, argument) {
  var method3 = [][METHOD_NAME];
  return !!method3 && fails$j(function() {
    method3.call(null, argument || function() {
      return 1;
    }, 1);
  });
};
var classof$e = classofRaw$1;
var global$s = global$M;
var engineIsNode = classof$e(global$s.process) == "process";
var $$A = _export;
var $reduce = arrayReduce.left;
var arrayMethodIsStrict$4 = arrayMethodIsStrict$5;
var CHROME_VERSION = engineV8Version;
var IS_NODE = engineIsNode;
var STRICT_METHOD$4 = arrayMethodIsStrict$4("reduce");
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
$$A({
  target: "Array",
  proto: true,
  forced: !STRICT_METHOD$4 || CHROME_BUG
}, {
  reduce: function reduce(callbackfn) {
    var length2 = arguments.length;
    return $reduce(this, callbackfn, length2, length2 > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$i = entryVirtual$k;
var reduce$3 = entryVirtual$i("Array").reduce;
var isPrototypeOf$g = objectIsPrototypeOf;
var method$d = reduce$3;
var ArrayPrototype$e = Array.prototype;
var reduce$2 = function(it2) {
  var own = it2.reduce;
  return it2 === ArrayPrototype$e || isPrototypeOf$g(ArrayPrototype$e, it2) && own === ArrayPrototype$e.reduce ? method$d : own;
};
var parent$R = reduce$2;
var reduce$1 = parent$R;
var reduce2 = reduce$1;
var classof$d = classofRaw$1;
var isArray$d = Array.isArray || function isArray(argument) {
  return classof$d(argument) == "Array";
};
var wellKnownSymbol$h = wellKnownSymbol$j;
var TO_STRING_TAG$3 = wellKnownSymbol$h("toStringTag");
var test$2 = {};
test$2[TO_STRING_TAG$3] = "z";
var toStringTagSupport = String(test$2) === "[object z]";
var global$r = global$M;
var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
var isCallable$9 = isCallable$h;
var classofRaw = classofRaw$1;
var wellKnownSymbol$g = wellKnownSymbol$j;
var TO_STRING_TAG$2 = wellKnownSymbol$g("toStringTag");
var Object$5 = global$r.Object;
var CORRECT_ARGUMENTS = classofRaw(function() {
  return arguments;
}()) == "Arguments";
var tryGet = function(it2, key) {
  try {
    return it2[key];
  } catch (error) {
  }
};
var classof$c = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function(it2) {
  var O, tag, result;
  return it2 === void 0 ? "Undefined" : it2 === null ? "Null" : typeof (tag = tryGet(O = Object$5(it2), TO_STRING_TAG$2)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && isCallable$9(O.callee) ? "Arguments" : result;
};
var uncurryThis$j = functionUncurryThis;
var isCallable$8 = isCallable$h;
var store$1 = sharedStore;
var functionToString = uncurryThis$j(Function.toString);
if (!isCallable$8(store$1.inspectSource)) {
  store$1.inspectSource = function(it2) {
    return functionToString(it2);
  };
}
var inspectSource$2 = store$1.inspectSource;
var uncurryThis$i = functionUncurryThis;
var fails$i = fails$r;
var isCallable$7 = isCallable$h;
var classof$b = classof$c;
var getBuiltIn$6 = getBuiltIn$9;
var inspectSource$1 = inspectSource$2;
var noop = function() {
};
var empty = [];
var construct$3 = getBuiltIn$6("Reflect", "construct");
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec$2 = uncurryThis$i(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
var isConstructorModern = function isConstructor(argument) {
  if (!isCallable$7(argument))
    return false;
  try {
    construct$3(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};
var isConstructorLegacy = function isConstructor2(argument) {
  if (!isCallable$7(argument))
    return false;
  switch (classof$b(argument)) {
    case "AsyncFunction":
    case "GeneratorFunction":
    case "AsyncGeneratorFunction":
      return false;
  }
  try {
    return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource$1(argument));
  } catch (error) {
    return true;
  }
};
isConstructorLegacy.sham = true;
var isConstructor$4 = !construct$3 || fails$i(function() {
  var called;
  return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
    called = true;
  }) || called;
}) ? isConstructorLegacy : isConstructorModern;
var global$q = global$M;
var isArray$c = isArray$d;
var isConstructor$3 = isConstructor$4;
var isObject$9 = isObject$f;
var wellKnownSymbol$f = wellKnownSymbol$j;
var SPECIES$3 = wellKnownSymbol$f("species");
var Array$5 = global$q.Array;
var arraySpeciesConstructor$1 = function(originalArray) {
  var C;
  if (isArray$c(originalArray)) {
    C = originalArray.constructor;
    if (isConstructor$3(C) && (C === Array$5 || isArray$c(C.prototype)))
      C = void 0;
    else if (isObject$9(C)) {
      C = C[SPECIES$3];
      if (C === null)
        C = void 0;
    }
  }
  return C === void 0 ? Array$5 : C;
};
var arraySpeciesConstructor = arraySpeciesConstructor$1;
var arraySpeciesCreate$4 = function(originalArray, length2) {
  return new (arraySpeciesConstructor(originalArray))(length2 === 0 ? 0 : length2);
};
var bind$5 = functionBindContext;
var uncurryThis$h = functionUncurryThis;
var IndexedObject$1 = indexedObject;
var toObject$b = toObject$e;
var lengthOfArrayLike$b = lengthOfArrayLike$d;
var arraySpeciesCreate$3 = arraySpeciesCreate$4;
var push$5 = uncurryThis$h([].push);
var createMethod$4 = function(TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function($this, callbackfn, that, specificCreate) {
    var O = toObject$b($this);
    var self2 = IndexedObject$1(O);
    var boundFunction = bind$5(callbackfn, that);
    var length2 = lengthOfArrayLike$b(self2);
    var index2 = 0;
    var create9 = specificCreate || arraySpeciesCreate$3;
    var target = IS_MAP ? create9($this, length2) : IS_FILTER || IS_FILTER_REJECT ? create9($this, 0) : void 0;
    var value, result;
    for (; length2 > index2; index2++)
      if (NO_HOLES || index2 in self2) {
        value = self2[index2];
        result = boundFunction(value, index2, O);
        if (TYPE) {
          if (IS_MAP)
            target[index2] = result;
          else if (result)
            switch (TYPE) {
              case 3:
                return true;
              case 5:
                return value;
              case 6:
                return index2;
              case 2:
                push$5(target, value);
            }
          else
            switch (TYPE) {
              case 4:
                return false;
              case 7:
                push$5(target, value);
            }
        }
      }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};
var arrayIteration = {
  forEach: createMethod$4(0),
  map: createMethod$4(1),
  filter: createMethod$4(2),
  some: createMethod$4(3),
  every: createMethod$4(4),
  find: createMethod$4(5),
  findIndex: createMethod$4(6),
  filterReject: createMethod$4(7)
};
var fails$h = fails$r;
var wellKnownSymbol$e = wellKnownSymbol$j;
var V8_VERSION$1 = engineV8Version;
var SPECIES$2 = wellKnownSymbol$e("species");
var arrayMethodHasSpeciesSupport$5 = function(METHOD_NAME) {
  return V8_VERSION$1 >= 51 || !fails$h(function() {
    var array2 = [];
    var constructor = array2.constructor = {};
    constructor[SPECIES$2] = function() {
      return {
        foo: 1
      };
    };
    return array2[METHOD_NAME](Boolean).foo !== 1;
  });
};
var $$z = _export;
var $filter = arrayIteration.filter;
var arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;
var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$4("filter");
$$z({
  target: "Array",
  proto: true,
  forced: !HAS_SPECIES_SUPPORT$3
}, {
  filter: function filter(callbackfn) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$h = entryVirtual$k;
var filter$3 = entryVirtual$h("Array").filter;
var isPrototypeOf$f = objectIsPrototypeOf;
var method$c = filter$3;
var ArrayPrototype$d = Array.prototype;
var filter$2 = function(it2) {
  var own = it2.filter;
  return it2 === ArrayPrototype$d || isPrototypeOf$f(ArrayPrototype$d, it2) && own === ArrayPrototype$d.filter ? method$c : own;
};
var parent$Q = filter$2;
var filter$1 = parent$Q;
var filter2 = filter$1;
var $$y = _export;
var $map = arrayIteration.map;
var arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;
var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$3("map");
$$y({
  target: "Array",
  proto: true,
  forced: !HAS_SPECIES_SUPPORT$2
}, {
  map: function map(callbackfn) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$g = entryVirtual$k;
var map$6 = entryVirtual$g("Array").map;
var isPrototypeOf$e = objectIsPrototypeOf;
var method$b = map$6;
var ArrayPrototype$c = Array.prototype;
var map$5 = function(it2) {
  var own = it2.map;
  return it2 === ArrayPrototype$c || isPrototypeOf$e(ArrayPrototype$c, it2) && own === ArrayPrototype$c.map ? method$b : own;
};
var parent$P = map$5;
var map$4 = parent$P;
var map$3 = map$4;
var global$p = global$M;
var isArray$b = isArray$d;
var lengthOfArrayLike$a = lengthOfArrayLike$d;
var bind$4 = functionBindContext;
var TypeError$c = global$p.TypeError;
var flattenIntoArray$1 = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? bind$4(mapper, thisArg) : false;
  var element, elementLen;
  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
      if (depth > 0 && isArray$b(element)) {
        elementLen = lengthOfArrayLike$a(element);
        targetIndex = flattenIntoArray$1(target, original, element, elementLen, targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 9007199254740991)
          throw TypeError$c("Exceed the acceptable array length");
        target[targetIndex] = element;
      }
      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
};
var flattenIntoArray_1 = flattenIntoArray$1;
var $$x = _export;
var flattenIntoArray = flattenIntoArray_1;
var aCallable$2 = aCallable$7;
var toObject$a = toObject$e;
var lengthOfArrayLike$9 = lengthOfArrayLike$d;
var arraySpeciesCreate$2 = arraySpeciesCreate$4;
$$x({
  target: "Array",
  proto: true
}, {
  flatMap: function flatMap(callbackfn) {
    var O = toObject$a(this);
    var sourceLen = lengthOfArrayLike$9(O);
    var A;
    aCallable$2(callbackfn);
    A = arraySpeciesCreate$2(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    return A;
  }
});
var entryVirtual$f = entryVirtual$k;
var flatMap$3 = entryVirtual$f("Array").flatMap;
var isPrototypeOf$d = objectIsPrototypeOf;
var method$a = flatMap$3;
var ArrayPrototype$b = Array.prototype;
var flatMap$2 = function(it2) {
  var own = it2.flatMap;
  return it2 === ArrayPrototype$b || isPrototypeOf$d(ArrayPrototype$b, it2) && own === ArrayPrototype$b.flatMap ? method$a : own;
};
var parent$O = flatMap$2;
var flatMap$1 = parent$O;
var flatMap2 = flatMap$1;
var SimpleDataPipe = function() {
  function SimpleDataPipe2(_source, _transformers, _target) {
    var _context, _context2, _context3;
    _classCallCheck(this, SimpleDataPipe2);
    _defineProperty(this, "_source", void 0);
    _defineProperty(this, "_transformers", void 0);
    _defineProperty(this, "_target", void 0);
    _defineProperty(this, "_listeners", {
      add: bind$6(_context = this._add).call(_context, this),
      remove: bind$6(_context2 = this._remove).call(_context2, this),
      update: bind$6(_context3 = this._update).call(_context3, this)
    });
    this._source = _source;
    this._transformers = _transformers;
    this._target = _target;
  }
  _createClass(SimpleDataPipe2, [{
    key: "all",
    value: function all() {
      this._target.update(this._transformItems(this._source.get()));
      return this;
    }
  }, {
    key: "start",
    value: function start() {
      this._source.on("add", this._listeners.add);
      this._source.on("remove", this._listeners.remove);
      this._source.on("update", this._listeners.update);
      return this;
    }
  }, {
    key: "stop",
    value: function stop() {
      this._source.off("add", this._listeners.add);
      this._source.off("remove", this._listeners.remove);
      this._source.off("update", this._listeners.update);
      return this;
    }
  }, {
    key: "_transformItems",
    value: function _transformItems(items) {
      var _context4;
      return reduce2(_context4 = this._transformers).call(_context4, function(items2, transform) {
        return transform(items2);
      }, items);
    }
  }, {
    key: "_add",
    value: function _add(_name, payload) {
      if (payload == null) {
        return;
      }
      this._target.add(this._transformItems(this._source.get(payload.items)));
    }
  }, {
    key: "_update",
    value: function _update(_name, payload) {
      if (payload == null) {
        return;
      }
      this._target.update(this._transformItems(this._source.get(payload.items)));
    }
  }, {
    key: "_remove",
    value: function _remove(_name, payload) {
      if (payload == null) {
        return;
      }
      this._target.remove(this._transformItems(payload.oldData));
    }
  }]);
  return SimpleDataPipe2;
}();
var DataPipeUnderConstruction = function() {
  function DataPipeUnderConstruction2(_source) {
    _classCallCheck(this, DataPipeUnderConstruction2);
    _defineProperty(this, "_source", void 0);
    _defineProperty(this, "_transformers", []);
    this._source = _source;
  }
  _createClass(DataPipeUnderConstruction2, [{
    key: "filter",
    value: function filter$13(callback) {
      this._transformers.push(function(input) {
        return filter2(input).call(input, callback);
      });
      return this;
    }
  }, {
    key: "map",
    value: function map5(callback) {
      this._transformers.push(function(input) {
        return map$3(input).call(input, callback);
      });
      return this;
    }
  }, {
    key: "flatMap",
    value: function flatMap$12(callback) {
      this._transformers.push(function(input) {
        return flatMap2(input).call(input, callback);
      });
      return this;
    }
  }, {
    key: "to",
    value: function to(target) {
      return new SimpleDataPipe(this._source, this._transformers, target);
    }
  }]);
  return DataPipeUnderConstruction2;
}();
var global$o = global$M;
var classof$a = classof$c;
var String$2 = global$o.String;
var toString$7 = function(argument) {
  if (classof$a(argument) === "Symbol")
    throw TypeError("Cannot convert a Symbol value to a string");
  return String$2(argument);
};
var uncurryThis$g = functionUncurryThis;
var toIntegerOrInfinity$2 = toIntegerOrInfinity$4;
var toString$6 = toString$7;
var requireObjectCoercible$2 = requireObjectCoercible$5;
var charAt$2 = uncurryThis$g("".charAt);
var charCodeAt$1 = uncurryThis$g("".charCodeAt);
var stringSlice = uncurryThis$g("".slice);
var createMethod$3 = function(CONVERT_TO_STRING) {
  return function($this, pos) {
    var S = toString$6(requireObjectCoercible$2($this));
    var position = toIntegerOrInfinity$2(pos);
    var size = S.length;
    var first2, second;
    if (position < 0 || position >= size)
      return CONVERT_TO_STRING ? "" : void 0;
    first2 = charCodeAt$1(S, position);
    return first2 < 55296 || first2 > 56319 || position + 1 === size || (second = charCodeAt$1(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt$2(S, position) : first2 : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first2 - 55296 << 10) + (second - 56320) + 65536;
  };
};
var stringMultibyte = {
  codeAt: createMethod$3(false),
  charAt: createMethod$3(true)
};
var global$n = global$M;
var isCallable$6 = isCallable$h;
var inspectSource = inspectSource$2;
var WeakMap$1 = global$n.WeakMap;
var nativeWeakMap = isCallable$6(WeakMap$1) && /native code/.test(inspectSource(WeakMap$1));
var shared$2 = shared$4.exports;
var uid$2 = uid$4;
var keys$7 = shared$2("keys");
var sharedKey$4 = function(key) {
  return keys$7[key] || (keys$7[key] = uid$2(key));
};
var hiddenKeys$6 = {};
var NATIVE_WEAK_MAP = nativeWeakMap;
var global$m = global$M;
var uncurryThis$f = functionUncurryThis;
var isObject$8 = isObject$f;
var createNonEnumerableProperty$4 = createNonEnumerableProperty$6;
var hasOwn$b = hasOwnProperty_1;
var shared$1 = sharedStore;
var sharedKey$3 = sharedKey$4;
var hiddenKeys$5 = hiddenKeys$6;
var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
var TypeError$b = global$m.TypeError;
var WeakMap = global$m.WeakMap;
var set$3;
var get;
var has;
var enforce = function(it2) {
  return has(it2) ? get(it2) : set$3(it2, {});
};
var getterFor = function(TYPE) {
  return function(it2) {
    var state;
    if (!isObject$8(it2) || (state = get(it2)).type !== TYPE) {
      throw TypeError$b("Incompatible receiver, " + TYPE + " required");
    }
    return state;
  };
};
if (NATIVE_WEAK_MAP || shared$1.state) {
  store = shared$1.state || (shared$1.state = new WeakMap());
  wmget = uncurryThis$f(store.get);
  wmhas = uncurryThis$f(store.has);
  wmset = uncurryThis$f(store.set);
  set$3 = function(it2, metadata) {
    if (wmhas(store, it2))
      throw new TypeError$b(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it2;
    wmset(store, it2, metadata);
    return metadata;
  };
  get = function(it2) {
    return wmget(store, it2) || {};
  };
  has = function(it2) {
    return wmhas(store, it2);
  };
} else {
  STATE = sharedKey$3("state");
  hiddenKeys$5[STATE] = true;
  set$3 = function(it2, metadata) {
    if (hasOwn$b(it2, STATE))
      throw new TypeError$b(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it2;
    createNonEnumerableProperty$4(it2, STATE, metadata);
    return metadata;
  };
  get = function(it2) {
    return hasOwn$b(it2, STATE) ? it2[STATE] : {};
  };
  has = function(it2) {
    return hasOwn$b(it2, STATE);
  };
}
var store;
var wmget;
var wmhas;
var wmset;
var STATE;
var internalState = {
  set: set$3,
  get,
  has,
  enforce,
  getterFor
};
var DESCRIPTORS$b = descriptors;
var hasOwn$a = hasOwnProperty_1;
var FunctionPrototype = Function.prototype;
var getDescriptor = DESCRIPTORS$b && Object.getOwnPropertyDescriptor;
var EXISTS = hasOwn$a(FunctionPrototype, "name");
var PROPER = EXISTS && function something() {
}.name === "something";
var CONFIGURABLE = EXISTS && (!DESCRIPTORS$b || DESCRIPTORS$b && getDescriptor(FunctionPrototype, "name").configurable);
var functionName = {
  EXISTS,
  PROPER,
  CONFIGURABLE
};
var objectDefineProperties = {};
var toIntegerOrInfinity$1 = toIntegerOrInfinity$4;
var max$3 = Math.max;
var min$1 = Math.min;
var toAbsoluteIndex$5 = function(index2, length2) {
  var integer = toIntegerOrInfinity$1(index2);
  return integer < 0 ? max$3(integer + length2, 0) : min$1(integer, length2);
};
var toIndexedObject$9 = toIndexedObject$b;
var toAbsoluteIndex$4 = toAbsoluteIndex$5;
var lengthOfArrayLike$8 = lengthOfArrayLike$d;
var createMethod$2 = function(IS_INCLUDES) {
  return function($this, el, fromIndex) {
    var O = toIndexedObject$9($this);
    var length2 = lengthOfArrayLike$8(O);
    var index2 = toAbsoluteIndex$4(fromIndex, length2);
    var value;
    if (IS_INCLUDES && el != el)
      while (length2 > index2) {
        value = O[index2++];
        if (value != value)
          return true;
      }
    else
      for (; length2 > index2; index2++) {
        if ((IS_INCLUDES || index2 in O) && O[index2] === el)
          return IS_INCLUDES || index2 || 0;
      }
    return !IS_INCLUDES && -1;
  };
};
var arrayIncludes = {
  includes: createMethod$2(true),
  indexOf: createMethod$2(false)
};
var uncurryThis$e = functionUncurryThis;
var hasOwn$9 = hasOwnProperty_1;
var toIndexedObject$8 = toIndexedObject$b;
var indexOf = arrayIncludes.indexOf;
var hiddenKeys$4 = hiddenKeys$6;
var push$4 = uncurryThis$e([].push);
var objectKeysInternal = function(object2, names) {
  var O = toIndexedObject$8(object2);
  var i = 0;
  var result = [];
  var key;
  for (key in O)
    !hasOwn$9(hiddenKeys$4, key) && hasOwn$9(O, key) && push$4(result, key);
  while (names.length > i)
    if (hasOwn$9(O, key = names[i++])) {
      ~indexOf(result, key) || push$4(result, key);
    }
  return result;
};
var enumBugKeys$3 = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
var internalObjectKeys$1 = objectKeysInternal;
var enumBugKeys$2 = enumBugKeys$3;
var objectKeys$4 = Object.keys || function keys(O) {
  return internalObjectKeys$1(O, enumBugKeys$2);
};
var DESCRIPTORS$a = descriptors;
var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
var definePropertyModule$3 = objectDefineProperty;
var anObject$9 = anObject$b;
var toIndexedObject$7 = toIndexedObject$b;
var objectKeys$3 = objectKeys$4;
objectDefineProperties.f = DESCRIPTORS$a && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject$9(O);
  var props = toIndexedObject$7(Properties);
  var keys7 = objectKeys$3(Properties);
  var length2 = keys7.length;
  var index2 = 0;
  var key;
  while (length2 > index2)
    definePropertyModule$3.f(O, key = keys7[index2++], props[key]);
  return O;
};
var getBuiltIn$5 = getBuiltIn$9;
var html$1 = getBuiltIn$5("document", "documentElement");
var anObject$8 = anObject$b;
var definePropertiesModule$1 = objectDefineProperties;
var enumBugKeys$1 = enumBugKeys$3;
var hiddenKeys$3 = hiddenKeys$6;
var html = html$1;
var documentCreateElement = documentCreateElement$1;
var sharedKey$2 = sharedKey$4;
var GT = ">";
var LT = "<";
var PROTOTYPE$1 = "prototype";
var SCRIPT = "script";
var IE_PROTO$1 = sharedKey$2("IE_PROTO");
var EmptyConstructor = function() {
};
var scriptTag = function(content) {
  return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
};
var NullProtoObjectViaActiveX = function(activeXDocument3) {
  activeXDocument3.write(scriptTag(""));
  activeXDocument3.close();
  var temp = activeXDocument3.parentWindow.Object;
  activeXDocument3 = null;
  return temp;
};
var NullProtoObjectViaIFrame = function() {
  var iframe = documentCreateElement("iframe");
  var JS = "java" + SCRIPT + ":";
  var iframeDocument;
  iframe.style.display = "none";
  html.appendChild(iframe);
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag("document.F=Object"));
  iframeDocument.close();
  return iframeDocument.F;
};
var activeXDocument;
var NullProtoObject = function() {
  try {
    activeXDocument = new ActiveXObject("htmlfile");
  } catch (error) {
  }
  NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
  var length2 = enumBugKeys$1.length;
  while (length2--)
    delete NullProtoObject[PROTOTYPE$1][enumBugKeys$1[length2]];
  return NullProtoObject();
};
hiddenKeys$3[IE_PROTO$1] = true;
var objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE$1] = anObject$8(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE$1] = null;
    result[IE_PROTO$1] = O;
  } else
    result = NullProtoObject();
  return Properties === void 0 ? result : definePropertiesModule$1.f(result, Properties);
};
var fails$g = fails$r;
var correctPrototypeGetter = !fails$g(function() {
  function F() {
  }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});
var global$l = global$M;
var hasOwn$8 = hasOwnProperty_1;
var isCallable$5 = isCallable$h;
var toObject$9 = toObject$e;
var sharedKey$1 = sharedKey$4;
var CORRECT_PROTOTYPE_GETTER$1 = correctPrototypeGetter;
var IE_PROTO = sharedKey$1("IE_PROTO");
var Object$4 = global$l.Object;
var ObjectPrototype$2 = Object$4.prototype;
var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER$1 ? Object$4.getPrototypeOf : function(O) {
  var object2 = toObject$9(O);
  if (hasOwn$8(object2, IE_PROTO))
    return object2[IE_PROTO];
  var constructor = object2.constructor;
  if (isCallable$5(constructor) && object2 instanceof constructor) {
    return constructor.prototype;
  }
  return object2 instanceof Object$4 ? ObjectPrototype$2 : null;
};
var createNonEnumerableProperty$3 = createNonEnumerableProperty$6;
var redefine$4 = function(target, key, value, options2) {
  if (options2 && options2.enumerable)
    target[key] = value;
  else
    createNonEnumerableProperty$3(target, key, value);
};
var fails$f = fails$r;
var isCallable$4 = isCallable$h;
var create$a = objectCreate;
var getPrototypeOf$6 = objectGetPrototypeOf;
var redefine$3 = redefine$4;
var wellKnownSymbol$d = wellKnownSymbol$j;
var ITERATOR$5 = wellKnownSymbol$d("iterator");
var BUGGY_SAFARI_ITERATORS$1 = false;
var IteratorPrototype$1;
var PrototypeOfArrayIteratorPrototype;
var arrayIterator;
if ([].keys) {
  arrayIterator = [].keys();
  if (!("next" in arrayIterator))
    BUGGY_SAFARI_ITERATORS$1 = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf$6(getPrototypeOf$6(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
      IteratorPrototype$1 = PrototypeOfArrayIteratorPrototype;
  }
}
var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$1 == void 0 || fails$f(function() {
  var test3 = {};
  return IteratorPrototype$1[ITERATOR$5].call(test3) !== test3;
});
if (NEW_ITERATOR_PROTOTYPE)
  IteratorPrototype$1 = {};
else
  IteratorPrototype$1 = create$a(IteratorPrototype$1);
if (!isCallable$4(IteratorPrototype$1[ITERATOR$5])) {
  redefine$3(IteratorPrototype$1, ITERATOR$5, function() {
    return this;
  });
}
var iteratorsCore = {
  IteratorPrototype: IteratorPrototype$1,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
};
var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
var classof$9 = classof$c;
var objectToString = TO_STRING_TAG_SUPPORT$1 ? {}.toString : function toString() {
  return "[object " + classof$9(this) + "]";
};
var TO_STRING_TAG_SUPPORT = toStringTagSupport;
var defineProperty$6 = objectDefineProperty.f;
var createNonEnumerableProperty$2 = createNonEnumerableProperty$6;
var hasOwn$7 = hasOwnProperty_1;
var toString$5 = objectToString;
var wellKnownSymbol$c = wellKnownSymbol$j;
var TO_STRING_TAG$1 = wellKnownSymbol$c("toStringTag");
var setToStringTag$5 = function(it2, TAG, STATIC, SET_METHOD) {
  if (it2) {
    var target = STATIC ? it2 : it2.prototype;
    if (!hasOwn$7(target, TO_STRING_TAG$1)) {
      defineProperty$6(target, TO_STRING_TAG$1, {
        configurable: true,
        value: TAG
      });
    }
    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
      createNonEnumerableProperty$2(target, "toString", toString$5);
    }
  }
};
var iterators = {};
var IteratorPrototype = iteratorsCore.IteratorPrototype;
var create$9 = objectCreate;
var createPropertyDescriptor$2 = createPropertyDescriptor$5;
var setToStringTag$4 = setToStringTag$5;
var Iterators$5 = iterators;
var returnThis$1 = function() {
  return this;
};
var createIteratorConstructor$1 = function(IteratorConstructor, NAME, next4, ENUMERABLE_NEXT) {
  var TO_STRING_TAG3 = NAME + " Iterator";
  IteratorConstructor.prototype = create$9(IteratorPrototype, {
    next: createPropertyDescriptor$2(+!ENUMERABLE_NEXT, next4)
  });
  setToStringTag$4(IteratorConstructor, TO_STRING_TAG3, false, true);
  Iterators$5[TO_STRING_TAG3] = returnThis$1;
  return IteratorConstructor;
};
var global$k = global$M;
var isCallable$3 = isCallable$h;
var String$1 = global$k.String;
var TypeError$a = global$k.TypeError;
var aPossiblePrototype$1 = function(argument) {
  if (typeof argument == "object" || isCallable$3(argument))
    return argument;
  throw TypeError$a("Can't set " + String$1(argument) + " as a prototype");
};
var uncurryThis$d = functionUncurryThis;
var anObject$7 = anObject$b;
var aPossiblePrototype = aPossiblePrototype$1;
var objectSetPrototypeOf = Object.setPrototypeOf || ("__proto__" in {} ? function() {
  var CORRECT_SETTER = false;
  var test3 = {};
  var setter;
  try {
    setter = uncurryThis$d(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
    setter(test3, []);
    CORRECT_SETTER = test3 instanceof Array;
  } catch (error) {
  }
  return function setPrototypeOf3(O, proto) {
    anObject$7(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER)
      setter(O, proto);
    else
      O.__proto__ = proto;
    return O;
  };
}() : void 0);
var $$w = _export;
var call$6 = functionCall;
var FunctionName = functionName;
var createIteratorConstructor = createIteratorConstructor$1;
var getPrototypeOf$5 = objectGetPrototypeOf;
var setToStringTag$3 = setToStringTag$5;
var redefine$2 = redefine$4;
var wellKnownSymbol$b = wellKnownSymbol$j;
var Iterators$4 = iterators;
var IteratorsCore = iteratorsCore;
var PROPER_FUNCTION_NAME$1 = FunctionName.PROPER;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR$4 = wellKnownSymbol$b("iterator");
var KEYS = "keys";
var VALUES = "values";
var ENTRIES = "entries";
var returnThis = function() {
  return this;
};
var defineIterator$3 = function(Iterable, NAME, IteratorConstructor, next4, DEFAULT, IS_SET, FORCED3) {
  createIteratorConstructor(IteratorConstructor, NAME, next4);
  var getIterationMethod = function(KIND) {
    if (KIND === DEFAULT && defaultIterator)
      return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
      return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS:
        return function keys7() {
          return new IteratorConstructor(this, KIND);
        };
      case VALUES:
        return function values5() {
          return new IteratorConstructor(this, KIND);
        };
      case ENTRIES:
        return function entries2() {
          return new IteratorConstructor(this, KIND);
        };
    }
    return function() {
      return new IteratorConstructor(this);
    };
  };
  var TO_STRING_TAG3 = NAME + " Iterator";
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR$4] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf$5(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      setToStringTag$3(CurrentIteratorPrototype, TO_STRING_TAG3, true, true);
      Iterators$4[TO_STRING_TAG3] = returnThis;
    }
  }
  if (PROPER_FUNCTION_NAME$1 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values5() {
        return call$6(nativeIterator, this);
      };
    }
  }
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED3)
      for (KEY in methods) {
        if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
          redefine$2(IterablePrototype, KEY, methods[KEY]);
        }
      }
    else
      $$w({
        target: NAME,
        proto: true,
        forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
      }, methods);
  }
  if (FORCED3 && IterablePrototype[ITERATOR$4] !== defaultIterator) {
    redefine$2(IterablePrototype, ITERATOR$4, defaultIterator, {
      name: DEFAULT
    });
  }
  Iterators$4[NAME] = defaultIterator;
  return methods;
};
var charAt$1 = stringMultibyte.charAt;
var toString$4 = toString$7;
var InternalStateModule$4 = internalState;
var defineIterator$2 = defineIterator$3;
var STRING_ITERATOR = "String Iterator";
var setInternalState$4 = InternalStateModule$4.set;
var getInternalState$2 = InternalStateModule$4.getterFor(STRING_ITERATOR);
defineIterator$2(String, "String", function(iterated) {
  setInternalState$4(this, {
    type: STRING_ITERATOR,
    string: toString$4(iterated),
    index: 0
  });
}, function next() {
  var state = getInternalState$2(this);
  var string2 = state.string;
  var index2 = state.index;
  var point;
  if (index2 >= string2.length)
    return {
      value: void 0,
      done: true
    };
  point = charAt$1(string2, index2);
  state.index += point.length;
  return {
    value: point,
    done: false
  };
});
var call$5 = functionCall;
var anObject$6 = anObject$b;
var getMethod$1 = getMethod$3;
var iteratorClose$2 = function(iterator3, kind, value) {
  var innerResult, innerError;
  anObject$6(iterator3);
  try {
    innerResult = getMethod$1(iterator3, "return");
    if (!innerResult) {
      if (kind === "throw")
        throw value;
      return value;
    }
    innerResult = call$5(innerResult, iterator3);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === "throw")
    throw value;
  if (innerError)
    throw innerResult;
  anObject$6(innerResult);
  return value;
};
var anObject$5 = anObject$b;
var iteratorClose$1 = iteratorClose$2;
var callWithSafeIterationClosing$1 = function(iterator3, fn, value, ENTRIES3) {
  try {
    return ENTRIES3 ? fn(anObject$5(value)[0], value[1]) : fn(value);
  } catch (error) {
    iteratorClose$1(iterator3, "throw", error);
  }
};
var wellKnownSymbol$a = wellKnownSymbol$j;
var Iterators$3 = iterators;
var ITERATOR$3 = wellKnownSymbol$a("iterator");
var ArrayPrototype$a = Array.prototype;
var isArrayIteratorMethod$2 = function(it2) {
  return it2 !== void 0 && (Iterators$3.Array === it2 || ArrayPrototype$a[ITERATOR$3] === it2);
};
var toPropertyKey$1 = toPropertyKey$4;
var definePropertyModule$2 = objectDefineProperty;
var createPropertyDescriptor$1 = createPropertyDescriptor$5;
var createProperty$6 = function(object2, key, value) {
  var propertyKey = toPropertyKey$1(key);
  if (propertyKey in object2)
    definePropertyModule$2.f(object2, propertyKey, createPropertyDescriptor$1(0, value));
  else
    object2[propertyKey] = value;
};
var classof$8 = classof$c;
var getMethod = getMethod$3;
var Iterators$2 = iterators;
var wellKnownSymbol$9 = wellKnownSymbol$j;
var ITERATOR$2 = wellKnownSymbol$9("iterator");
var getIteratorMethod$8 = function(it2) {
  if (it2 != void 0)
    return getMethod(it2, ITERATOR$2) || getMethod(it2, "@@iterator") || Iterators$2[classof$8(it2)];
};
var global$j = global$M;
var call$4 = functionCall;
var aCallable$1 = aCallable$7;
var anObject$4 = anObject$b;
var tryToString$2 = tryToString$4;
var getIteratorMethod$7 = getIteratorMethod$8;
var TypeError$9 = global$j.TypeError;
var getIterator$7 = function(argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$7(argument) : usingIterator;
  if (aCallable$1(iteratorMethod))
    return anObject$4(call$4(iteratorMethod, argument));
  throw TypeError$9(tryToString$2(argument) + " is not iterable");
};
var global$i = global$M;
var bind$3 = functionBindContext;
var call$3 = functionCall;
var toObject$8 = toObject$e;
var callWithSafeIterationClosing = callWithSafeIterationClosing$1;
var isArrayIteratorMethod$1 = isArrayIteratorMethod$2;
var isConstructor$2 = isConstructor$4;
var lengthOfArrayLike$7 = lengthOfArrayLike$d;
var createProperty$5 = createProperty$6;
var getIterator$6 = getIterator$7;
var getIteratorMethod$6 = getIteratorMethod$8;
var Array$4 = global$i.Array;
var arrayFrom = function from(arrayLike) {
  var O = toObject$8(arrayLike);
  var IS_CONSTRUCTOR = isConstructor$2(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
  var mapping = mapfn !== void 0;
  if (mapping)
    mapfn = bind$3(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
  var iteratorMethod = getIteratorMethod$6(O);
  var index2 = 0;
  var length2, result, step, iterator3, next4, value;
  if (iteratorMethod && !(this == Array$4 && isArrayIteratorMethod$1(iteratorMethod))) {
    iterator3 = getIterator$6(O, iteratorMethod);
    next4 = iterator3.next;
    result = IS_CONSTRUCTOR ? new this() : [];
    for (; !(step = call$3(next4, iterator3)).done; index2++) {
      value = mapping ? callWithSafeIterationClosing(iterator3, mapfn, [step.value, index2], true) : step.value;
      createProperty$5(result, index2, value);
    }
  } else {
    length2 = lengthOfArrayLike$7(O);
    result = IS_CONSTRUCTOR ? new this(length2) : Array$4(length2);
    for (; length2 > index2; index2++) {
      value = mapping ? mapfn(O[index2], index2) : O[index2];
      createProperty$5(result, index2, value);
    }
  }
  result.length = index2;
  return result;
};
var wellKnownSymbol$8 = wellKnownSymbol$j;
var ITERATOR$1 = wellKnownSymbol$8("iterator");
var SAFE_CLOSING = false;
try {
  called = 0;
  iteratorWithReturn = {
    next: function() {
      return {
        done: !!called++
      };
    },
    "return": function() {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR$1] = function() {
    return this;
  };
  Array.from(iteratorWithReturn, function() {
    throw 2;
  });
} catch (error) {
}
var called;
var iteratorWithReturn;
var checkCorrectnessOfIteration$1 = function(exec3, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING)
    return false;
  var ITERATION_SUPPORT = false;
  try {
    var object2 = {};
    object2[ITERATOR$1] = function() {
      return {
        next: function() {
          return {
            done: ITERATION_SUPPORT = true
          };
        }
      };
    };
    exec3(object2);
  } catch (error) {
  }
  return ITERATION_SUPPORT;
};
var $$v = _export;
var from$6 = arrayFrom;
var checkCorrectnessOfIteration = checkCorrectnessOfIteration$1;
var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
  Array.from(iterable);
});
$$v({
  target: "Array",
  stat: true,
  forced: INCORRECT_ITERATION
}, {
  from: from$6
});
var path$l = path$q;
var from$5 = path$l.Array.from;
var parent$N = from$5;
var from$4 = parent$N;
var from$3 = from$4;
var toIndexedObject$6 = toIndexedObject$b;
var Iterators$1 = iterators;
var InternalStateModule$3 = internalState;
objectDefineProperty.f;
var defineIterator$1 = defineIterator$3;
var ARRAY_ITERATOR = "Array Iterator";
var setInternalState$3 = InternalStateModule$3.set;
var getInternalState$1 = InternalStateModule$3.getterFor(ARRAY_ITERATOR);
defineIterator$1(Array, "Array", function(iterated, kind) {
  setInternalState$3(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject$6(iterated),
    index: 0,
    kind
  });
}, function() {
  var state = getInternalState$1(this);
  var target = state.target;
  var kind = state.kind;
  var index2 = state.index++;
  if (!target || index2 >= target.length) {
    state.target = void 0;
    return {
      value: void 0,
      done: true
    };
  }
  if (kind == "keys")
    return {
      value: index2,
      done: false
    };
  if (kind == "values")
    return {
      value: target[index2],
      done: false
    };
  return {
    value: [index2, target[index2]],
    done: false
  };
}, "values");
Iterators$1.Arguments = Iterators$1.Array;
var getIteratorMethod$5 = getIteratorMethod$8;
var getIteratorMethod_1 = getIteratorMethod$5;
var domIterables = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};
var DOMIterables$4 = domIterables;
var global$h = global$M;
var classof$7 = classof$c;
var createNonEnumerableProperty$1 = createNonEnumerableProperty$6;
var Iterators = iterators;
var wellKnownSymbol$7 = wellKnownSymbol$j;
var TO_STRING_TAG = wellKnownSymbol$7("toStringTag");
for (var COLLECTION_NAME in DOMIterables$4) {
  Collection = global$h[COLLECTION_NAME];
  CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype && classof$7(CollectionPrototype) !== TO_STRING_TAG) {
    createNonEnumerableProperty$1(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
  }
  Iterators[COLLECTION_NAME] = Iterators.Array;
}
var Collection;
var CollectionPrototype;
var parent$M = getIteratorMethod_1;
var getIteratorMethod$4 = parent$M;
var parent$L = getIteratorMethod$4;
var getIteratorMethod$3 = parent$L;
var parent$K = getIteratorMethod$3;
var getIteratorMethod$2 = parent$K;
var getIteratorMethod$1 = getIteratorMethod$2;
var objectGetOwnPropertyNames = {};
var internalObjectKeys = objectKeysInternal;
var enumBugKeys = enumBugKeys$3;
var hiddenKeys$2 = enumBugKeys.concat("length", "prototype");
objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys$2);
};
var objectGetOwnPropertyNamesExternal = {};
var global$g = global$M;
var toAbsoluteIndex$3 = toAbsoluteIndex$5;
var lengthOfArrayLike$6 = lengthOfArrayLike$d;
var createProperty$4 = createProperty$6;
var Array$3 = global$g.Array;
var max$2 = Math.max;
var arraySliceSimple = function(O, start, end) {
  var length2 = lengthOfArrayLike$6(O);
  var k = toAbsoluteIndex$3(start, length2);
  var fin = toAbsoluteIndex$3(end === void 0 ? length2 : end, length2);
  var result = Array$3(max$2(fin - k, 0));
  for (var n = 0; k < fin; k++, n++)
    createProperty$4(result, n, O[k]);
  result.length = n;
  return result;
};
var classof$6 = classofRaw$1;
var toIndexedObject$5 = toIndexedObject$b;
var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
var arraySlice$3 = arraySliceSimple;
var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function(it2) {
  try {
    return $getOwnPropertyNames$1(it2);
  } catch (error) {
    return arraySlice$3(windowNames);
  }
};
objectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames2(it2) {
  return windowNames && classof$6(it2) == "Window" ? getWindowNames(it2) : $getOwnPropertyNames$1(toIndexedObject$5(it2));
};
var objectGetOwnPropertySymbols = {};
objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;
var wellKnownSymbolWrapped = {};
var wellKnownSymbol$6 = wellKnownSymbol$j;
wellKnownSymbolWrapped.f = wellKnownSymbol$6;
var path$k = path$q;
var hasOwn$6 = hasOwnProperty_1;
var wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
var defineProperty$5 = objectDefineProperty.f;
var defineWellKnownSymbol$l = function(NAME) {
  var Symbol2 = path$k.Symbol || (path$k.Symbol = {});
  if (!hasOwn$6(Symbol2, NAME))
    defineProperty$5(Symbol2, NAME, {
      value: wrappedWellKnownSymbolModule$1.f(NAME)
    });
};
var $$u = _export;
var global$f = global$M;
var getBuiltIn$4 = getBuiltIn$9;
var apply$4 = functionApply;
var call$2 = functionCall;
var uncurryThis$c = functionUncurryThis;
var DESCRIPTORS$9 = descriptors;
var NATIVE_SYMBOL = nativeSymbol;
var fails$e = fails$r;
var hasOwn$5 = hasOwnProperty_1;
var isArray$a = isArray$d;
var isCallable$2 = isCallable$h;
var isObject$7 = isObject$f;
var isPrototypeOf$c = objectIsPrototypeOf;
var isSymbol = isSymbol$3;
var anObject$3 = anObject$b;
var toObject$7 = toObject$e;
var toIndexedObject$4 = toIndexedObject$b;
var toPropertyKey = toPropertyKey$4;
var $toString = toString$7;
var createPropertyDescriptor = createPropertyDescriptor$5;
var nativeObjectCreate = objectCreate;
var objectKeys$2 = objectKeys$4;
var getOwnPropertyNamesModule$2 = objectGetOwnPropertyNames;
var getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;
var getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;
var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
var definePropertyModule$1 = objectDefineProperty;
var definePropertiesModule = objectDefineProperties;
var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
var arraySlice$2 = arraySlice$5;
var redefine$1 = redefine$4;
var shared = shared$4.exports;
var sharedKey = sharedKey$4;
var hiddenKeys$1 = hiddenKeys$6;
var uid$1 = uid$4;
var wellKnownSymbol$5 = wellKnownSymbol$j;
var wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
var defineWellKnownSymbol$k = defineWellKnownSymbol$l;
var setToStringTag$2 = setToStringTag$5;
var InternalStateModule$2 = internalState;
var $forEach$1 = arrayIteration.forEach;
var HIDDEN = sharedKey("hidden");
var SYMBOL = "Symbol";
var PROTOTYPE = "prototype";
var TO_PRIMITIVE = wellKnownSymbol$5("toPrimitive");
var setInternalState$2 = InternalStateModule$2.set;
var getInternalState = InternalStateModule$2.getterFor(SYMBOL);
var ObjectPrototype$1 = Object[PROTOTYPE];
var $Symbol = global$f.Symbol;
var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
var TypeError$8 = global$f.TypeError;
var QObject = global$f.QObject;
var $stringify$1 = getBuiltIn$4("JSON", "stringify");
var nativeGetOwnPropertyDescriptor$1 = getOwnPropertyDescriptorModule$1.f;
var nativeDefineProperty = definePropertyModule$1.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule$1.f;
var push$3 = uncurryThis$c([].push);
var AllSymbols = shared("symbols");
var ObjectPrototypeSymbols = shared("op-symbols");
var StringToSymbolRegistry = shared("string-to-symbol-registry");
var SymbolToStringRegistry = shared("symbol-to-string-registry");
var WellKnownSymbolsStore = shared("wks");
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
var setSymbolDescriptor = DESCRIPTORS$9 && fails$e(function() {
  return nativeObjectCreate(nativeDefineProperty({}, "a", {
    get: function() {
      return nativeDefineProperty(this, "a", {
        value: 7
      }).a;
    }
  })).a != 7;
}) ? function(O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype$1, P);
  if (ObjectPrototypeDescriptor)
    delete ObjectPrototype$1[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {
    nativeDefineProperty(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;
var wrap$1 = function(tag, description) {
  var symbol3 = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
  setInternalState$2(symbol3, {
    type: SYMBOL,
    tag,
    description
  });
  if (!DESCRIPTORS$9)
    symbol3.description = description;
  return symbol3;
};
var $defineProperty = function defineProperty4(O, P, Attributes) {
  if (O === ObjectPrototype$1)
    $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject$3(O);
  var key = toPropertyKey(P);
  anObject$3(Attributes);
  if (hasOwn$5(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!hasOwn$5(O, HIDDEN))
        nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (hasOwn$5(O, HIDDEN) && O[HIDDEN][key])
        O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, {
        enumerable: createPropertyDescriptor(0, false)
      });
    }
    return setSymbolDescriptor(O, key, Attributes);
  }
  return nativeDefineProperty(O, key, Attributes);
};
var $defineProperties = function defineProperties2(O, Properties) {
  anObject$3(O);
  var properties = toIndexedObject$4(Properties);
  var keys7 = objectKeys$2(properties).concat($getOwnPropertySymbols(properties));
  $forEach$1(keys7, function(key) {
    if (!DESCRIPTORS$9 || call$2($propertyIsEnumerable$1, properties, key))
      $defineProperty(O, key, properties[key]);
  });
  return O;
};
var $create = function create2(O, Properties) {
  return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};
var $propertyIsEnumerable$1 = function propertyIsEnumerable2(V) {
  var P = toPropertyKey(V);
  var enumerable = call$2(nativePropertyIsEnumerable, this, P);
  if (this === ObjectPrototype$1 && hasOwn$5(AllSymbols, P) && !hasOwn$5(ObjectPrototypeSymbols, P))
    return false;
  return enumerable || !hasOwn$5(this, P) || !hasOwn$5(AllSymbols, P) || hasOwn$5(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor2(O, P) {
  var it2 = toIndexedObject$4(O);
  var key = toPropertyKey(P);
  if (it2 === ObjectPrototype$1 && hasOwn$5(AllSymbols, key) && !hasOwn$5(ObjectPrototypeSymbols, key))
    return;
  var descriptor = nativeGetOwnPropertyDescriptor$1(it2, key);
  if (descriptor && hasOwn$5(AllSymbols, key) && !(hasOwn$5(it2, HIDDEN) && it2[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};
var $getOwnPropertyNames = function getOwnPropertyNames3(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject$4(O));
  var result = [];
  $forEach$1(names, function(key) {
    if (!hasOwn$5(AllSymbols, key) && !hasOwn$5(hiddenKeys$1, key))
      push$3(result, key);
  });
  return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$4(O));
  var result = [];
  $forEach$1(names, function(key) {
    if (hasOwn$5(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn$5(ObjectPrototype$1, key))) {
      push$3(result, AllSymbols[key]);
    }
  });
  return result;
};
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol2() {
    if (isPrototypeOf$c(SymbolPrototype, this))
      throw TypeError$8("Symbol is not a constructor");
    var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
    var tag = uid$1(description);
    var setter = function(value) {
      if (this === ObjectPrototype$1)
        call$2(setter, ObjectPrototypeSymbols, value);
      if (hasOwn$5(this, HIDDEN) && hasOwn$5(this[HIDDEN], tag))
        this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS$9 && USE_SETTER)
      setSymbolDescriptor(ObjectPrototype$1, tag, {
        configurable: true,
        set: setter
      });
    return wrap$1(tag, description);
  };
  SymbolPrototype = $Symbol[PROTOTYPE];
  redefine$1(SymbolPrototype, "toString", function toString5() {
    return getInternalState(this).tag;
  });
  redefine$1($Symbol, "withoutSetter", function(description) {
    return wrap$1(uid$1(description), description);
  });
  propertyIsEnumerableModule$1.f = $propertyIsEnumerable$1;
  definePropertyModule$1.f = $defineProperty;
  definePropertiesModule.f = $defineProperties;
  getOwnPropertyDescriptorModule$1.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule$2.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule$2.f = $getOwnPropertySymbols;
  wrappedWellKnownSymbolModule.f = function(name) {
    return wrap$1(wellKnownSymbol$5(name), name);
  };
  if (DESCRIPTORS$9) {
    nativeDefineProperty(SymbolPrototype, "description", {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
  }
}
$$u({
  global: true,
  wrap: true,
  forced: !NATIVE_SYMBOL,
  sham: !NATIVE_SYMBOL
}, {
  Symbol: $Symbol
});
$forEach$1(objectKeys$2(WellKnownSymbolsStore), function(name) {
  defineWellKnownSymbol$k(name);
});
$$u({
  target: SYMBOL,
  stat: true,
  forced: !NATIVE_SYMBOL
}, {
  "for": function(key) {
    var string2 = $toString(key);
    if (hasOwn$5(StringToSymbolRegistry, string2))
      return StringToSymbolRegistry[string2];
    var symbol3 = $Symbol(string2);
    StringToSymbolRegistry[string2] = symbol3;
    SymbolToStringRegistry[symbol3] = string2;
    return symbol3;
  },
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym))
      throw TypeError$8(sym + " is not a symbol");
    if (hasOwn$5(SymbolToStringRegistry, sym))
      return SymbolToStringRegistry[sym];
  },
  useSetter: function() {
    USE_SETTER = true;
  },
  useSimple: function() {
    USE_SETTER = false;
  }
});
$$u({
  target: "Object",
  stat: true,
  forced: !NATIVE_SYMBOL,
  sham: !DESCRIPTORS$9
}, {
  create: $create,
  defineProperty: $defineProperty,
  defineProperties: $defineProperties,
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});
$$u({
  target: "Object",
  stat: true,
  forced: !NATIVE_SYMBOL
}, {
  getOwnPropertyNames: $getOwnPropertyNames,
  getOwnPropertySymbols: $getOwnPropertySymbols
});
$$u({
  target: "Object",
  stat: true,
  forced: fails$e(function() {
    getOwnPropertySymbolsModule$2.f(1);
  })
}, {
  getOwnPropertySymbols: function getOwnPropertySymbols2(it2) {
    return getOwnPropertySymbolsModule$2.f(toObject$7(it2));
  }
});
if ($stringify$1) {
  FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails$e(function() {
    var symbol3 = $Symbol();
    return $stringify$1([symbol3]) != "[null]" || $stringify$1({
      a: symbol3
    }) != "{}" || $stringify$1(Object(symbol3)) != "{}";
  });
  $$u({
    target: "JSON",
    stat: true,
    forced: FORCED_JSON_STRINGIFY
  }, {
    stringify: function stringify5(it2, replacer, space) {
      var args = arraySlice$2(arguments);
      var $replacer = replacer;
      if (!isObject$7(replacer) && it2 === void 0 || isSymbol(it2))
        return;
      if (!isArray$a(replacer))
        replacer = function(key, value) {
          if (isCallable$2($replacer))
            value = call$2($replacer, this, key, value);
          if (!isSymbol(value))
            return value;
        };
      args[1] = replacer;
      return apply$4($stringify$1, null, args);
    }
  });
}
var FORCED_JSON_STRINGIFY;
if (!SymbolPrototype[TO_PRIMITIVE]) {
  valueOf = SymbolPrototype.valueOf;
  redefine$1(SymbolPrototype, TO_PRIMITIVE, function(hint) {
    return call$2(valueOf, this);
  });
}
var valueOf;
setToStringTag$2($Symbol, SYMBOL);
hiddenKeys$1[HIDDEN] = true;
var path$j = path$q;
var getOwnPropertySymbols$2 = path$j.Object.getOwnPropertySymbols;
var parent$J = getOwnPropertySymbols$2;
var getOwnPropertySymbols$1 = parent$J;
var getOwnPropertySymbols3 = getOwnPropertySymbols$1;
var getOwnPropertyDescriptor$3 = { exports: {} };
var $$t = _export;
var fails$d = fails$r;
var toIndexedObject$3 = toIndexedObject$b;
var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
var DESCRIPTORS$8 = descriptors;
var FAILS_ON_PRIMITIVES$3 = fails$d(function() {
  nativeGetOwnPropertyDescriptor(1);
});
var FORCED$5 = !DESCRIPTORS$8 || FAILS_ON_PRIMITIVES$3;
$$t({
  target: "Object",
  stat: true,
  forced: FORCED$5,
  sham: !DESCRIPTORS$8
}, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor3(it2, key) {
    return nativeGetOwnPropertyDescriptor(toIndexedObject$3(it2), key);
  }
});
var path$i = path$q;
var Object$3 = path$i.Object;
var getOwnPropertyDescriptor$2 = getOwnPropertyDescriptor$3.exports = function getOwnPropertyDescriptor4(it2, key) {
  return Object$3.getOwnPropertyDescriptor(it2, key);
};
if (Object$3.getOwnPropertyDescriptor.sham)
  getOwnPropertyDescriptor$2.sham = true;
var parent$I = getOwnPropertyDescriptor$3.exports;
var getOwnPropertyDescriptor$1 = parent$I;
var getOwnPropertyDescriptor5 = getOwnPropertyDescriptor$1;
var getBuiltIn$3 = getBuiltIn$9;
var uncurryThis$b = functionUncurryThis;
var getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;
var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
var anObject$2 = anObject$b;
var concat$5 = uncurryThis$b([].concat);
var ownKeys$6 = getBuiltIn$3("Reflect", "ownKeys") || function ownKeys(it2) {
  var keys7 = getOwnPropertyNamesModule$1.f(anObject$2(it2));
  var getOwnPropertySymbols7 = getOwnPropertySymbolsModule$1.f;
  return getOwnPropertySymbols7 ? concat$5(keys7, getOwnPropertySymbols7(it2)) : keys7;
};
var $$s = _export;
var DESCRIPTORS$7 = descriptors;
var ownKeys$5 = ownKeys$6;
var toIndexedObject$2 = toIndexedObject$b;
var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
var createProperty$3 = createProperty$6;
$$s({
  target: "Object",
  stat: true,
  sham: !DESCRIPTORS$7
}, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object2) {
    var O = toIndexedObject$2(object2);
    var getOwnPropertyDescriptor11 = getOwnPropertyDescriptorModule.f;
    var keys7 = ownKeys$5(O);
    var result = {};
    var index2 = 0;
    var key, descriptor;
    while (keys7.length > index2) {
      descriptor = getOwnPropertyDescriptor11(O, key = keys7[index2++]);
      if (descriptor !== void 0)
        createProperty$3(result, key, descriptor);
    }
    return result;
  }
});
var path$h = path$q;
var getOwnPropertyDescriptors$2 = path$h.Object.getOwnPropertyDescriptors;
var parent$H = getOwnPropertyDescriptors$2;
var getOwnPropertyDescriptors$1 = parent$H;
var getOwnPropertyDescriptors2 = getOwnPropertyDescriptors$1;
var defineProperties$4 = { exports: {} };
var $$r = _export;
var DESCRIPTORS$6 = descriptors;
var defineProperties$3 = objectDefineProperties.f;
$$r({
  target: "Object",
  stat: true,
  forced: Object.defineProperties !== defineProperties$3,
  sham: !DESCRIPTORS$6
}, {
  defineProperties: defineProperties$3
});
var path$g = path$q;
var Object$2 = path$g.Object;
var defineProperties$2 = defineProperties$4.exports = function defineProperties3(T, D) {
  return Object$2.defineProperties(T, D);
};
if (Object$2.defineProperties.sham)
  defineProperties$2.sham = true;
var parent$G = defineProperties$4.exports;
var defineProperties$1 = parent$G;
var defineProperties4 = defineProperties$1;
var defineProperty$4 = defineProperty$a;
var $$q = _export;
var isArray$9 = isArray$d;
$$q({
  target: "Array",
  stat: true
}, {
  isArray: isArray$9
});
var path$f = path$q;
var isArray$8 = path$f.Array.isArray;
var parent$F = isArray$8;
var isArray$7 = parent$F;
var parent$E = isArray$7;
var isArray$6 = parent$E;
var parent$D = isArray$6;
var isArray$5 = parent$D;
var isArray$4 = isArray$5;
function _arrayWithHoles(arr) {
  if (isArray$4(arr))
    return arr;
}
var $$p = _export;
var global$e = global$M;
var fails$c = fails$r;
var isArray$3 = isArray$d;
var isObject$6 = isObject$f;
var toObject$6 = toObject$e;
var lengthOfArrayLike$5 = lengthOfArrayLike$d;
var createProperty$2 = createProperty$6;
var arraySpeciesCreate$1 = arraySpeciesCreate$4;
var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;
var wellKnownSymbol$4 = wellKnownSymbol$j;
var V8_VERSION = engineV8Version;
var IS_CONCAT_SPREADABLE = wellKnownSymbol$4("isConcatSpreadable");
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded";
var TypeError$7 = global$e.TypeError;
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails$c(function() {
  var array2 = [];
  array2[IS_CONCAT_SPREADABLE] = false;
  return array2.concat()[0] !== array2;
});
var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport$2("concat");
var isConcatSpreadable = function(O) {
  if (!isObject$6(O))
    return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== void 0 ? !!spreadable : isArray$3(O);
};
var FORCED$4 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
$$p({
  target: "Array",
  proto: true,
  forced: FORCED$4
}, {
  concat: function concat(arg) {
    var O = toObject$6(this);
    var A = arraySpeciesCreate$1(O, 0);
    var n = 0;
    var i, k, length2, len, E;
    for (i = -1, length2 = arguments.length; i < length2; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = lengthOfArrayLike$5(E);
        if (n + len > MAX_SAFE_INTEGER$1)
          throw TypeError$7(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++)
          if (k in E)
            createProperty$2(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER$1)
          throw TypeError$7(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty$2(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});
var defineWellKnownSymbol$j = defineWellKnownSymbol$l;
defineWellKnownSymbol$j("asyncIterator");
var defineWellKnownSymbol$i = defineWellKnownSymbol$l;
defineWellKnownSymbol$i("hasInstance");
var defineWellKnownSymbol$h = defineWellKnownSymbol$l;
defineWellKnownSymbol$h("isConcatSpreadable");
var defineWellKnownSymbol$g = defineWellKnownSymbol$l;
defineWellKnownSymbol$g("iterator");
var defineWellKnownSymbol$f = defineWellKnownSymbol$l;
defineWellKnownSymbol$f("match");
var defineWellKnownSymbol$e = defineWellKnownSymbol$l;
defineWellKnownSymbol$e("matchAll");
var defineWellKnownSymbol$d = defineWellKnownSymbol$l;
defineWellKnownSymbol$d("replace");
var defineWellKnownSymbol$c = defineWellKnownSymbol$l;
defineWellKnownSymbol$c("search");
var defineWellKnownSymbol$b = defineWellKnownSymbol$l;
defineWellKnownSymbol$b("species");
var defineWellKnownSymbol$a = defineWellKnownSymbol$l;
defineWellKnownSymbol$a("split");
var defineWellKnownSymbol$9 = defineWellKnownSymbol$l;
defineWellKnownSymbol$9("toPrimitive");
var defineWellKnownSymbol$8 = defineWellKnownSymbol$l;
defineWellKnownSymbol$8("toStringTag");
var defineWellKnownSymbol$7 = defineWellKnownSymbol$l;
defineWellKnownSymbol$7("unscopables");
var global$d = global$M;
var setToStringTag$1 = setToStringTag$5;
setToStringTag$1(global$d.JSON, "JSON", true);
var path$e = path$q;
var symbol$5 = path$e.Symbol;
var parent$C = symbol$5;
var symbol$4 = parent$C;
var parent$B = symbol$4;
var symbol$3 = parent$B;
var defineWellKnownSymbol$6 = defineWellKnownSymbol$l;
defineWellKnownSymbol$6("asyncDispose");
var defineWellKnownSymbol$5 = defineWellKnownSymbol$l;
defineWellKnownSymbol$5("dispose");
var defineWellKnownSymbol$4 = defineWellKnownSymbol$l;
defineWellKnownSymbol$4("matcher");
var defineWellKnownSymbol$3 = defineWellKnownSymbol$l;
defineWellKnownSymbol$3("metadata");
var defineWellKnownSymbol$2 = defineWellKnownSymbol$l;
defineWellKnownSymbol$2("observable");
var defineWellKnownSymbol$1 = defineWellKnownSymbol$l;
defineWellKnownSymbol$1("patternMatch");
var defineWellKnownSymbol = defineWellKnownSymbol$l;
defineWellKnownSymbol("replaceAll");
var parent$A = symbol$3;
var symbol$2 = parent$A;
var symbol$1 = symbol$2;
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof symbol$1 !== "undefined" && getIteratorMethod$1(arr) || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
var $$o = _export;
var global$c = global$M;
var isArray$2 = isArray$d;
var isConstructor$1 = isConstructor$4;
var isObject$5 = isObject$f;
var toAbsoluteIndex$2 = toAbsoluteIndex$5;
var lengthOfArrayLike$4 = lengthOfArrayLike$d;
var toIndexedObject$1 = toIndexedObject$b;
var createProperty$1 = createProperty$6;
var wellKnownSymbol$3 = wellKnownSymbol$j;
var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;
var un$Slice = arraySlice$5;
var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1("slice");
var SPECIES$1 = wellKnownSymbol$3("species");
var Array$2 = global$c.Array;
var max$1 = Math.max;
$$o({
  target: "Array",
  proto: true,
  forced: !HAS_SPECIES_SUPPORT$1
}, {
  slice: function slice(start, end) {
    var O = toIndexedObject$1(this);
    var length2 = lengthOfArrayLike$4(O);
    var k = toAbsoluteIndex$2(start, length2);
    var fin = toAbsoluteIndex$2(end === void 0 ? length2 : end, length2);
    var Constructor, result, n;
    if (isArray$2(O)) {
      Constructor = O.constructor;
      if (isConstructor$1(Constructor) && (Constructor === Array$2 || isArray$2(Constructor.prototype))) {
        Constructor = void 0;
      } else if (isObject$5(Constructor)) {
        Constructor = Constructor[SPECIES$1];
        if (Constructor === null)
          Constructor = void 0;
      }
      if (Constructor === Array$2 || Constructor === void 0) {
        return un$Slice(O, k, fin);
      }
    }
    result = new (Constructor === void 0 ? Array$2 : Constructor)(max$1(fin - k, 0));
    for (n = 0; k < fin; k++, n++)
      if (k in O)
        createProperty$1(result, n, O[k]);
    result.length = n;
    return result;
  }
});
var entryVirtual$e = entryVirtual$k;
var slice$6 = entryVirtual$e("Array").slice;
var isPrototypeOf$b = objectIsPrototypeOf;
var method$9 = slice$6;
var ArrayPrototype$9 = Array.prototype;
var slice$5 = function(it2) {
  var own = it2.slice;
  return it2 === ArrayPrototype$9 || isPrototypeOf$b(ArrayPrototype$9, it2) && own === ArrayPrototype$9.slice ? method$9 : own;
};
var parent$z = slice$5;
var slice$4 = parent$z;
var parent$y = slice$4;
var slice$3 = parent$y;
var parent$x = slice$3;
var slice$2 = parent$x;
var slice$1 = slice$2;
var parent$w = from$4;
var from$2 = parent$w;
var parent$v = from$2;
var from$1 = parent$v;
var from2 = from$1;
function _arrayLikeToArray$4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _unsupportedIterableToArray$4(o, minLen) {
  var _context;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$4(o, minLen);
  var n = slice$1(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from2(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$4(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest();
}
var WrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
var iterator$5 = WrappedWellKnownSymbolModule.f("iterator");
var parent$u = iterator$5;
var iterator$4 = parent$u;
var parent$t = iterator$4;
var iterator$3 = parent$t;
var parent$s = iterator$3;
var iterator$2 = parent$s;
var iterator$1 = iterator$2;
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = typeof symbol$1 == "function" && typeof iterator$1 == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof symbol$1 == "function" && obj2.constructor === symbol$1 && obj2 !== symbol$1.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _arrayWithoutHoles(arr) {
  if (isArray$4(arr))
    return _arrayLikeToArray$4(arr);
}
function _iterableToArray(iter) {
  if (typeof symbol$1 !== "undefined" && getIteratorMethod$1(iter) != null || iter["@@iterator"] != null)
    return from2(iter);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableSpread();
}
var symbol = symbol$4;
var entryVirtual$d = entryVirtual$k;
var concat$4 = entryVirtual$d("Array").concat;
var isPrototypeOf$a = objectIsPrototypeOf;
var method$8 = concat$4;
var ArrayPrototype$8 = Array.prototype;
var concat$3 = function(it2) {
  var own = it2.concat;
  return it2 === ArrayPrototype$8 || isPrototypeOf$a(ArrayPrototype$8, it2) && own === ArrayPrototype$8.concat ? method$8 : own;
};
var parent$r = concat$3;
var concat$2 = parent$r;
var concat$1 = concat$2;
var slice2 = slice$4;
var $$n = _export;
var ownKeys$4 = ownKeys$6;
$$n({
  target: "Reflect",
  stat: true
}, {
  ownKeys: ownKeys$4
});
var path$d = path$q;
var ownKeys$3 = path$d.Reflect.ownKeys;
var parent$q = ownKeys$3;
var ownKeys$2 = parent$q;
var ownKeys$1 = ownKeys$2;
var isArray$1 = isArray$7;
var $$m = _export;
var toObject$5 = toObject$e;
var nativeKeys = objectKeys$4;
var fails$b = fails$r;
var FAILS_ON_PRIMITIVES$2 = fails$b(function() {
  nativeKeys(1);
});
$$m({
  target: "Object",
  stat: true,
  forced: FAILS_ON_PRIMITIVES$2
}, {
  keys: function keys2(it2) {
    return nativeKeys(toObject$5(it2));
  }
});
var path$c = path$q;
var keys$6 = path$c.Object.keys;
var parent$p = keys$6;
var keys$5 = parent$p;
var keys$4 = keys$5;
var $$l = _export;
var global$b = global$M;
var uncurryThis$a = functionUncurryThis;
var Date$1 = global$b.Date;
var getTime = uncurryThis$a(Date$1.prototype.getTime);
$$l({
  target: "Date",
  stat: true
}, {
  now: function now() {
    return getTime(new Date$1());
  }
});
var path$b = path$q;
path$b.Date.now;
var $forEach = arrayIteration.forEach;
var arrayMethodIsStrict$3 = arrayMethodIsStrict$5;
var STRICT_METHOD$3 = arrayMethodIsStrict$3("forEach");
var arrayForEach = !STRICT_METHOD$3 ? function forEach(callbackfn) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
} : [].forEach;
var $$k = _export;
var forEach$5 = arrayForEach;
$$k({
  target: "Array",
  proto: true,
  forced: [].forEach != forEach$5
}, {
  forEach: forEach$5
});
var entryVirtual$c = entryVirtual$k;
var forEach$4 = entryVirtual$c("Array").forEach;
var parent$o = forEach$4;
var forEach$3 = parent$o;
var classof$5 = classof$c;
var hasOwn$4 = hasOwnProperty_1;
var isPrototypeOf$9 = objectIsPrototypeOf;
var method$7 = forEach$3;
var ArrayPrototype$7 = Array.prototype;
var DOMIterables$3 = {
  DOMTokenList: true,
  NodeList: true
};
var forEach$2 = function(it2) {
  var own = it2.forEach;
  return it2 === ArrayPrototype$7 || isPrototypeOf$9(ArrayPrototype$7, it2) && own === ArrayPrototype$7.forEach || hasOwn$4(DOMIterables$3, classof$5(it2)) ? method$7 : own;
};
var forEach$1 = forEach$2;
var $$j = _export;
var uncurryThis$9 = functionUncurryThis;
var isArray2 = isArray$d;
var un$Reverse = uncurryThis$9([].reverse);
var test$1 = [1, 2];
$$j({
  target: "Array",
  proto: true,
  forced: String(test$1) === String(test$1.reverse())
}, {
  reverse: function reverse() {
    if (isArray2(this))
      this.length = this.length;
    return un$Reverse(this);
  }
});
var entryVirtual$b = entryVirtual$k;
var reverse$3 = entryVirtual$b("Array").reverse;
var isPrototypeOf$8 = objectIsPrototypeOf;
var method$6 = reverse$3;
var ArrayPrototype$6 = Array.prototype;
var reverse$2 = function(it2) {
  var own = it2.reverse;
  return it2 === ArrayPrototype$6 || isPrototypeOf$8(ArrayPrototype$6, it2) && own === ArrayPrototype$6.reverse ? method$6 : own;
};
var parent$n = reverse$2;
var reverse$1 = parent$n;
var reverse2 = reverse$1;
var $$i = _export;
var global$a = global$M;
var toAbsoluteIndex$1 = toAbsoluteIndex$5;
var toIntegerOrInfinity = toIntegerOrInfinity$4;
var lengthOfArrayLike$3 = lengthOfArrayLike$d;
var toObject$4 = toObject$e;
var arraySpeciesCreate = arraySpeciesCreate$4;
var createProperty = createProperty$6;
var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;
var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
var TypeError$6 = global$a.TypeError;
var max = Math.max;
var min = Math.min;
var MAX_SAFE_INTEGER = 9007199254740991;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = "Maximum allowed length exceeded";
$$i({
  target: "Array",
  proto: true,
  forced: !HAS_SPECIES_SUPPORT
}, {
  splice: function splice(start, deleteCount) {
    var O = toObject$4(this);
    var len = lengthOfArrayLike$3(O);
    var actualStart = toAbsoluteIndex$1(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from5, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
      throw TypeError$6(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
    }
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from5 = actualStart + k;
      if (from5 in O)
        createProperty(A, k, O[from5]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from5 = k + actualDeleteCount;
        to = k + insertCount;
        if (from5 in O)
          O[to] = O[from5];
        else
          delete O[to];
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--)
        delete O[k - 1];
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from5 = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from5 in O)
          O[to] = O[from5];
        else
          delete O[to];
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});
var entryVirtual$a = entryVirtual$k;
var splice$3 = entryVirtual$a("Array").splice;
var isPrototypeOf$7 = objectIsPrototypeOf;
var method$5 = splice$3;
var ArrayPrototype$5 = Array.prototype;
var splice$2 = function(it2) {
  var own = it2.splice;
  return it2 === ArrayPrototype$5 || isPrototypeOf$7(ArrayPrototype$5, it2) && own === ArrayPrototype$5.splice ? method$5 : own;
};
var parent$m = splice$2;
var splice$1 = parent$m;
var splice2 = splice$1;
var DESCRIPTORS$5 = descriptors;
var uncurryThis$8 = functionUncurryThis;
var call$1 = functionCall;
var fails$a = fails$r;
var objectKeys$1 = objectKeys$4;
var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
var propertyIsEnumerableModule = objectPropertyIsEnumerable;
var toObject$3 = toObject$e;
var IndexedObject = indexedObject;
var $assign = Object.assign;
var defineProperty$3 = Object.defineProperty;
var concat2 = uncurryThis$8([].concat);
var objectAssign = !$assign || fails$a(function() {
  if (DESCRIPTORS$5 && $assign({
    b: 1
  }, $assign(defineProperty$3({}, "a", {
    enumerable: true,
    get: function() {
      defineProperty$3(this, "b", {
        value: 3,
        enumerable: false
      });
    }
  }), {
    b: 2
  })).b !== 1)
    return true;
  var A = {};
  var B = {};
  var symbol3 = Symbol();
  var alphabet = "abcdefghijklmnopqrst";
  A[symbol3] = 7;
  alphabet.split("").forEach(function(chr) {
    B[chr] = chr;
  });
  return $assign({}, A)[symbol3] != 7 || objectKeys$1($assign({}, B)).join("") != alphabet;
}) ? function assign(target, source) {
  var T = toObject$3(target);
  var argumentsLength = arguments.length;
  var index2 = 1;
  var getOwnPropertySymbols7 = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable7 = propertyIsEnumerableModule.f;
  while (argumentsLength > index2) {
    var S = IndexedObject(arguments[index2++]);
    var keys7 = getOwnPropertySymbols7 ? concat2(objectKeys$1(S), getOwnPropertySymbols7(S)) : objectKeys$1(S);
    var length2 = keys7.length;
    var j = 0;
    var key;
    while (length2 > j) {
      key = keys7[j++];
      if (!DESCRIPTORS$5 || call$1(propertyIsEnumerable7, S, key))
        T[key] = S[key];
    }
  }
  return T;
} : $assign;
var $$h = _export;
var assign$5 = objectAssign;
$$h({
  target: "Object",
  stat: true,
  forced: Object.assign !== assign$5
}, {
  assign: assign$5
});
var path$a = path$q;
var assign$4 = path$a.Object.assign;
var parent$l = assign$4;
var assign$3 = parent$l;
var assign$2 = assign$3;
var $$g = _export;
var $includes = arrayIncludes.includes;
$$g({
  target: "Array",
  proto: true
}, {
  includes: function includes(el) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$9 = entryVirtual$k;
entryVirtual$9("Array").includes;
var isObject$4 = isObject$f;
var classof$4 = classofRaw$1;
var wellKnownSymbol$2 = wellKnownSymbol$j;
var MATCH$1 = wellKnownSymbol$2("match");
var isRegexp = function(it2) {
  var isRegExp3;
  return isObject$4(it2) && ((isRegExp3 = it2[MATCH$1]) !== void 0 ? !!isRegExp3 : classof$4(it2) == "RegExp");
};
var global$9 = global$M;
var isRegExp = isRegexp;
var TypeError$5 = global$9.TypeError;
var notARegexp = function(it2) {
  if (isRegExp(it2)) {
    throw TypeError$5("The method doesn't accept regular expressions");
  }
  return it2;
};
var wellKnownSymbol$1 = wellKnownSymbol$j;
var MATCH = wellKnownSymbol$1("match");
var correctIsRegexpLogic = function(METHOD_NAME) {
  var regexp = /./;
  try {
    "/./"[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return "/./"[METHOD_NAME](regexp);
    } catch (error2) {
    }
  }
  return false;
};
var $$f = _export;
var uncurryThis$7 = functionUncurryThis;
var notARegExp = notARegexp;
var requireObjectCoercible$1 = requireObjectCoercible$5;
var toString$3 = toString$7;
var correctIsRegExpLogic = correctIsRegexpLogic;
var stringIndexOf = uncurryThis$7("".indexOf);
$$f({
  target: "String",
  proto: true,
  forced: !correctIsRegExpLogic("includes")
}, {
  includes: function includes2(searchString) {
    return !!~stringIndexOf(toString$3(requireObjectCoercible$1(this)), toString$3(notARegExp(searchString)), arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$8 = entryVirtual$k;
entryVirtual$8("String").includes;
var $$e = _export;
var fails$9 = fails$r;
var toObject$2 = toObject$e;
var nativeGetPrototypeOf = objectGetPrototypeOf;
var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;
var FAILS_ON_PRIMITIVES$1 = fails$9(function() {
  nativeGetPrototypeOf(1);
});
$$e({
  target: "Object",
  stat: true,
  forced: FAILS_ON_PRIMITIVES$1,
  sham: !CORRECT_PROTOTYPE_GETTER
}, {
  getPrototypeOf: function getPrototypeOf(it2) {
    return nativeGetPrototypeOf(toObject$2(it2));
  }
});
var path$9 = path$q;
var getPrototypeOf$4 = path$9.Object.getPrototypeOf;
var parent$k = getPrototypeOf$4;
var getPrototypeOf$3 = parent$k;
var DESCRIPTORS$4 = descriptors;
var uncurryThis$6 = functionUncurryThis;
var objectKeys = objectKeys$4;
var toIndexedObject = toIndexedObject$b;
var $propertyIsEnumerable = objectPropertyIsEnumerable.f;
var propertyIsEnumerable3 = uncurryThis$6($propertyIsEnumerable);
var push$2 = uncurryThis$6([].push);
var createMethod$1 = function(TO_ENTRIES) {
  return function(it2) {
    var O = toIndexedObject(it2);
    var keys7 = objectKeys(O);
    var length2 = keys7.length;
    var i = 0;
    var result = [];
    var key;
    while (length2 > i) {
      key = keys7[i++];
      if (!DESCRIPTORS$4 || propertyIsEnumerable3(O, key)) {
        push$2(result, TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};
var objectToArray = {
  entries: createMethod$1(true),
  values: createMethod$1(false)
};
var $$d = _export;
var $values = objectToArray.values;
$$d({
  target: "Object",
  stat: true
}, {
  values: function values(O) {
    return $values(O);
  }
});
var path$8 = path$q;
path$8.Object.values;
var whitespaces$3 = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
var uncurryThis$5 = functionUncurryThis;
var requireObjectCoercible = requireObjectCoercible$5;
var toString$2 = toString$7;
var whitespaces$2 = whitespaces$3;
var replace$1 = uncurryThis$5("".replace);
var whitespace = "[" + whitespaces$2 + "]";
var ltrim = RegExp("^" + whitespace + whitespace + "*");
var rtrim = RegExp(whitespace + whitespace + "*$");
var createMethod = function(TYPE) {
  return function($this) {
    var string2 = toString$2(requireObjectCoercible($this));
    if (TYPE & 1)
      string2 = replace$1(string2, ltrim, "");
    if (TYPE & 2)
      string2 = replace$1(string2, rtrim, "");
    return string2;
  };
};
var stringTrim = {
  start: createMethod(1),
  end: createMethod(2),
  trim: createMethod(3)
};
var global$8 = global$M;
var fails$8 = fails$r;
var uncurryThis$4 = functionUncurryThis;
var toString$1 = toString$7;
var trim = stringTrim.trim;
var whitespaces$1 = whitespaces$3;
var $parseInt$1 = global$8.parseInt;
var Symbol$1 = global$8.Symbol;
var ITERATOR = Symbol$1 && Symbol$1.iterator;
var hex = /^[+-]?0x/i;
var exec$1 = uncurryThis$4(hex.exec);
var FORCED$3 = $parseInt$1(whitespaces$1 + "08") !== 8 || $parseInt$1(whitespaces$1 + "0x16") !== 22 || ITERATOR && !fails$8(function() {
  $parseInt$1(Object(ITERATOR));
});
var numberParseInt = FORCED$3 ? function parseInt2(string2, radix) {
  var S = trim(toString$1(string2));
  return $parseInt$1(S, radix >>> 0 || (exec$1(hex, S) ? 16 : 10));
} : $parseInt$1;
var $$c = _export;
var $parseInt = numberParseInt;
$$c({
  global: true,
  forced: parseInt != $parseInt
}, {
  parseInt: $parseInt
});
var path$7 = path$q;
path$7.parseInt;
var $$b = _export;
var uncurryThis$3 = functionUncurryThis;
var $IndexOf = arrayIncludes.indexOf;
var arrayMethodIsStrict$2 = arrayMethodIsStrict$5;
var un$IndexOf = uncurryThis$3([].indexOf);
var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
var STRICT_METHOD$2 = arrayMethodIsStrict$2("indexOf");
$$b({
  target: "Array",
  proto: true,
  forced: NEGATIVE_ZERO || !STRICT_METHOD$2
}, {
  indexOf: function indexOf2(searchElement) {
    var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
    return NEGATIVE_ZERO ? un$IndexOf(this, searchElement, fromIndex) || 0 : $IndexOf(this, searchElement, fromIndex);
  }
});
var entryVirtual$7 = entryVirtual$k;
entryVirtual$7("Array").indexOf;
var PROPER_FUNCTION_NAME = functionName.PROPER;
var fails$7 = fails$r;
var whitespaces = whitespaces$3;
var non = "\u200B\x85\u180E";
var stringTrimForced = function(METHOD_NAME) {
  return fails$7(function() {
    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
  });
};
var $$a = _export;
var $trim = stringTrim.trim;
var forcedStringTrimMethod = stringTrimForced;
$$a({
  target: "String",
  proto: true,
  forced: forcedStringTrimMethod("trim")
}, {
  trim: function trim2() {
    return $trim(this);
  }
});
var entryVirtual$6 = entryVirtual$k;
entryVirtual$6("String").trim;
var $$9 = _export;
var DESCRIPTORS$3 = descriptors;
var create$8 = objectCreate;
$$9({
  target: "Object",
  stat: true,
  sham: !DESCRIPTORS$3
}, {
  create: create$8
});
var path$6 = path$q;
var Object$1 = path$6.Object;
var create$7 = function create3(P, D) {
  return Object$1.create(P, D);
};
var parent$j = create$7;
var create$6 = parent$j;
var create$5 = create$6;
var $$8 = _export;
var global$7 = global$M;
var getBuiltIn$2 = getBuiltIn$9;
var apply$3 = functionApply;
var uncurryThis$2 = functionUncurryThis;
var fails$6 = fails$r;
var Array$1 = global$7.Array;
var $stringify = getBuiltIn$2("JSON", "stringify");
var exec = uncurryThis$2(/./.exec);
var charAt = uncurryThis$2("".charAt);
var charCodeAt = uncurryThis$2("".charCodeAt);
var replace = uncurryThis$2("".replace);
var numberToString = uncurryThis$2(1 .toString);
var tester = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;
var fix = function(match3, offset, string2) {
  var prev = charAt(string2, offset - 1);
  var next4 = charAt(string2, offset + 1);
  if (exec(low, match3) && !exec(hi, next4) || exec(hi, match3) && !exec(low, prev)) {
    return "\\u" + numberToString(charCodeAt(match3, 0), 16);
  }
  return match3;
};
var FORCED$2 = fails$6(function() {
  return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
});
if ($stringify) {
  $$8({
    target: "JSON",
    stat: true,
    forced: FORCED$2
  }, {
    stringify: function stringify5(it2, replacer, space) {
      for (var i = 0, l = arguments.length, args = Array$1(l); i < l; i++)
        args[i] = arguments[i];
      var result = apply$3($stringify, null, args);
      return typeof result == "string" ? replace(result, tester, fix) : result;
    }
  });
}
var path$5 = path$q;
var apply$2 = functionApply;
if (!path$5.JSON)
  path$5.JSON = {
    stringify: JSON.stringify
  };
var stringify$3 = function stringify(it2, replacer, space) {
  return apply$2(path$5.JSON.stringify, null, arguments);
};
var parent$i = stringify$3;
var stringify$2 = parent$i;
var stringify$1 = stringify$2;
var global$6 = global$M;
var TypeError$4 = global$6.TypeError;
var validateArgumentsLength$1 = function(passed, required) {
  if (passed < required)
    throw TypeError$4("Not enough arguments");
  return passed;
};
var $$7 = _export;
var global$5 = global$M;
var apply$1 = functionApply;
var isCallable$1 = isCallable$h;
var userAgent$2 = engineUserAgent;
var arraySlice$1 = arraySlice$5;
var validateArgumentsLength = validateArgumentsLength$1;
var MSIE = /MSIE .\./.test(userAgent$2);
var Function$1 = global$5.Function;
var wrap = function(scheduler) {
  return function(handler, timeout) {
    var boundArgs = validateArgumentsLength(arguments.length, 1) > 2;
    var fn = isCallable$1(handler) ? handler : Function$1(handler);
    var args = boundArgs ? arraySlice$1(arguments, 2) : void 0;
    return scheduler(boundArgs ? function() {
      apply$1(fn, this, args);
    } : fn, timeout);
  };
};
$$7({
  global: true,
  bind: true,
  forced: MSIE
}, {
  setTimeout: wrap(global$5.setTimeout),
  setInterval: wrap(global$5.setInterval)
});
var path$4 = path$q;
var setTimeout$2 = path$4.setTimeout;
var setTimeout$1 = setTimeout$2;
var toObject$1 = toObject$e;
var toAbsoluteIndex = toAbsoluteIndex$5;
var lengthOfArrayLike$2 = lengthOfArrayLike$d;
var arrayFill = function fill(value) {
  var O = toObject$1(this);
  var length2 = lengthOfArrayLike$2(O);
  var argumentsLength = arguments.length;
  var index2 = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : void 0, length2);
  var end = argumentsLength > 2 ? arguments[2] : void 0;
  var endPos = end === void 0 ? length2 : toAbsoluteIndex(end, length2);
  while (endPos > index2)
    O[index2++] = value;
  return O;
};
var $$6 = _export;
var fill2 = arrayFill;
$$6({
  target: "Array",
  proto: true
}, {
  fill: fill2
});
var entryVirtual$5 = entryVirtual$k;
entryVirtual$5("Array").fill;
var componentEmitter = { exports: {} };
(function(module) {
  {
    module.exports = Emitter3;
  }
  function Emitter3(obj) {
    if (obj)
      return mixin(obj);
  }
  function mixin(obj) {
    for (var key in Emitter3.prototype) {
      obj[key] = Emitter3.prototype[key];
    }
    return obj;
  }
  Emitter3.prototype.on = Emitter3.prototype.addEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
    return this;
  };
  Emitter3.prototype.once = function(event, fn) {
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }
    on.fn = fn;
    this.on(event, on);
    return this;
  };
  Emitter3.prototype.off = Emitter3.prototype.removeListener = Emitter3.prototype.removeAllListeners = Emitter3.prototype.removeEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    if (arguments.length == 0) {
      this._callbacks = {};
      return this;
    }
    var callbacks = this._callbacks["$" + event];
    if (!callbacks)
      return this;
    if (arguments.length == 1) {
      delete this._callbacks["$" + event];
      return this;
    }
    var cb;
    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }
    if (callbacks.length === 0) {
      delete this._callbacks["$" + event];
    }
    return this;
  };
  Emitter3.prototype.emit = function(event) {
    this._callbacks = this._callbacks || {};
    var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }
    return this;
  };
  Emitter3.prototype.listeners = function(event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks["$" + event] || [];
  };
  Emitter3.prototype.hasListeners = function(event) {
    return !!this.listeners(event).length;
  };
})(componentEmitter);
var Emitter = componentEmitter.exports;
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
function _assertThisInitialized$1(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
var assign2;
if (typeof Object.assign !== "function") {
  assign2 = function assign5(target) {
    if (target === void 0 || target === null) {
      throw new TypeError("Cannot convert undefined or null to object");
    }
    var output = Object(target);
    for (var index2 = 1; index2 < arguments.length; index2++) {
      var source = arguments[index2];
      if (source !== void 0 && source !== null) {
        for (var nextKey in source) {
          if (source.hasOwnProperty(nextKey)) {
            output[nextKey] = source[nextKey];
          }
        }
      }
    }
    return output;
  };
} else {
  assign2 = Object.assign;
}
var assign$1 = assign2;
var VENDOR_PREFIXES = ["", "webkit", "Moz", "MS", "ms", "o"];
var TEST_ELEMENT = typeof document === "undefined" ? {
  style: {}
} : document.createElement("div");
var TYPE_FUNCTION = "function";
var round = Math.round;
var abs = Math.abs;
var now2 = Date.now;
function prefixed(obj, property) {
  var prefix;
  var prop;
  var camelProp = property[0].toUpperCase() + property.slice(1);
  var i = 0;
  while (i < VENDOR_PREFIXES.length) {
    prefix = VENDOR_PREFIXES[i];
    prop = prefix ? prefix + camelProp : property;
    if (prop in obj) {
      return prop;
    }
    i++;
  }
  return void 0;
}
var win;
if (typeof window === "undefined") {
  win = {};
} else {
  win = window;
}
var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, "touchAction");
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== void 0;
function getTouchActionProps() {
  if (!NATIVE_TOUCH_ACTION) {
    return false;
  }
  var touchMap = {};
  var cssSupports = win.CSS && win.CSS.supports;
  ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function(val) {
    return touchMap[val] = cssSupports ? win.CSS.supports("touch-action", val) : true;
  });
  return touchMap;
}
var TOUCH_ACTION_COMPUTE = "compute";
var TOUCH_ACTION_AUTO = "auto";
var TOUCH_ACTION_MANIPULATION = "manipulation";
var TOUCH_ACTION_NONE = "none";
var TOUCH_ACTION_PAN_X = "pan-x";
var TOUCH_ACTION_PAN_Y = "pan-y";
var TOUCH_ACTION_MAP = getTouchActionProps();
var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
var SUPPORT_TOUCH = "ontouchstart" in win;
var SUPPORT_POINTER_EVENTS = prefixed(win, "PointerEvent") !== void 0;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
var INPUT_TYPE_TOUCH = "touch";
var INPUT_TYPE_PEN = "pen";
var INPUT_TYPE_MOUSE = "mouse";
var INPUT_TYPE_KINECT = "kinect";
var COMPUTE_INTERVAL = 25;
var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;
var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;
var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
var PROPS_XY = ["x", "y"];
var PROPS_CLIENT_XY = ["clientX", "clientY"];
function each(obj, iterator3, context) {
  var i;
  if (!obj) {
    return;
  }
  if (obj.forEach) {
    obj.forEach(iterator3, context);
  } else if (obj.length !== void 0) {
    i = 0;
    while (i < obj.length) {
      iterator3.call(context, obj[i], i, obj);
      i++;
    }
  } else {
    for (i in obj) {
      obj.hasOwnProperty(i) && iterator3.call(context, obj[i], i, obj);
    }
  }
}
function boolOrFn(val, args) {
  if (typeof val === TYPE_FUNCTION) {
    return val.apply(args ? args[0] || void 0 : void 0, args);
  }
  return val;
}
function inStr(str, find2) {
  return str.indexOf(find2) > -1;
}
function cleanTouchActions(actions) {
  if (inStr(actions, TOUCH_ACTION_NONE)) {
    return TOUCH_ACTION_NONE;
  }
  var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
  var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
  if (hasPanX && hasPanY) {
    return TOUCH_ACTION_NONE;
  }
  if (hasPanX || hasPanY) {
    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
  }
  if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
    return TOUCH_ACTION_MANIPULATION;
  }
  return TOUCH_ACTION_AUTO;
}
var TouchAction = function() {
  function TouchAction3(manager, value) {
    this.manager = manager;
    this.set(value);
  }
  var _proto = TouchAction3.prototype;
  _proto.set = function set3(value) {
    if (value === TOUCH_ACTION_COMPUTE) {
      value = this.compute();
    }
    if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
      this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
    }
    this.actions = value.toLowerCase().trim();
  };
  _proto.update = function update() {
    this.set(this.manager.options.touchAction);
  };
  _proto.compute = function compute() {
    var actions = [];
    each(this.manager.recognizers, function(recognizer) {
      if (boolOrFn(recognizer.options.enable, [recognizer])) {
        actions = actions.concat(recognizer.getTouchAction());
      }
    });
    return cleanTouchActions(actions.join(" "));
  };
  _proto.preventDefaults = function preventDefaults(input) {
    var srcEvent = input.srcEvent;
    var direction = input.offsetDirection;
    if (this.manager.session.prevented) {
      srcEvent.preventDefault();
      return;
    }
    var actions = this.actions;
    var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
    if (hasNone) {
      var isTapPointer = input.pointers.length === 1;
      var isTapMovement = input.distance < 2;
      var isTapTouchTime = input.deltaTime < 250;
      if (isTapPointer && isTapMovement && isTapTouchTime) {
        return;
      }
    }
    if (hasPanX && hasPanY) {
      return;
    }
    if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
      return this.preventSrc(srcEvent);
    }
  };
  _proto.preventSrc = function preventSrc(srcEvent) {
    this.manager.session.prevented = true;
    srcEvent.preventDefault();
  };
  return TouchAction3;
}();
function hasParent(node, parent3) {
  while (node) {
    if (node === parent3) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
}
function getCenter(pointers) {
  var pointersLength = pointers.length;
  if (pointersLength === 1) {
    return {
      x: round(pointers[0].clientX),
      y: round(pointers[0].clientY)
    };
  }
  var x = 0;
  var y = 0;
  var i = 0;
  while (i < pointersLength) {
    x += pointers[i].clientX;
    y += pointers[i].clientY;
    i++;
  }
  return {
    x: round(x / pointersLength),
    y: round(y / pointersLength)
  };
}
function simpleCloneInputData(input) {
  var pointers = [];
  var i = 0;
  while (i < input.pointers.length) {
    pointers[i] = {
      clientX: round(input.pointers[i].clientX),
      clientY: round(input.pointers[i].clientY)
    };
    i++;
  }
  return {
    timeStamp: now2(),
    pointers,
    center: getCenter(pointers),
    deltaX: input.deltaX,
    deltaY: input.deltaY
  };
}
function getDistance(p1, p2, props) {
  if (!props) {
    props = PROPS_XY;
  }
  var x = p2[props[0]] - p1[props[0]];
  var y = p2[props[1]] - p1[props[1]];
  return Math.sqrt(x * x + y * y);
}
function getAngle(p1, p2, props) {
  if (!props) {
    props = PROPS_XY;
  }
  var x = p2[props[0]] - p1[props[0]];
  var y = p2[props[1]] - p1[props[1]];
  return Math.atan2(y, x) * 180 / Math.PI;
}
function getDirection(x, y) {
  if (x === y) {
    return DIRECTION_NONE;
  }
  if (abs(x) >= abs(y)) {
    return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
  }
  return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}
function computeDeltaXY(session, input) {
  var center = input.center;
  var offset = session.offsetDelta || {};
  var prevDelta = session.prevDelta || {};
  var prevInput = session.prevInput || {};
  if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
    prevDelta = session.prevDelta = {
      x: prevInput.deltaX || 0,
      y: prevInput.deltaY || 0
    };
    offset = session.offsetDelta = {
      x: center.x,
      y: center.y
    };
  }
  input.deltaX = prevDelta.x + (center.x - offset.x);
  input.deltaY = prevDelta.y + (center.y - offset.y);
}
function getVelocity(deltaTime, x, y) {
  return {
    x: x / deltaTime || 0,
    y: y / deltaTime || 0
  };
}
function getScale(start, end) {
  return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}
function getRotation(start, end) {
  return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}
function computeIntervalInputData(session, input) {
  var last = session.lastInterval || input;
  var deltaTime = input.timeStamp - last.timeStamp;
  var velocity;
  var velocityX;
  var velocityY;
  var direction;
  if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === void 0)) {
    var deltaX = input.deltaX - last.deltaX;
    var deltaY = input.deltaY - last.deltaY;
    var v = getVelocity(deltaTime, deltaX, deltaY);
    velocityX = v.x;
    velocityY = v.y;
    velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
    direction = getDirection(deltaX, deltaY);
    session.lastInterval = input;
  } else {
    velocity = last.velocity;
    velocityX = last.velocityX;
    velocityY = last.velocityY;
    direction = last.direction;
  }
  input.velocity = velocity;
  input.velocityX = velocityX;
  input.velocityY = velocityY;
  input.direction = direction;
}
function computeInputData(manager, input) {
  var session = manager.session;
  var pointers = input.pointers;
  var pointersLength = pointers.length;
  if (!session.firstInput) {
    session.firstInput = simpleCloneInputData(input);
  }
  if (pointersLength > 1 && !session.firstMultiple) {
    session.firstMultiple = simpleCloneInputData(input);
  } else if (pointersLength === 1) {
    session.firstMultiple = false;
  }
  var firstInput = session.firstInput, firstMultiple = session.firstMultiple;
  var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
  var center = input.center = getCenter(pointers);
  input.timeStamp = now2();
  input.deltaTime = input.timeStamp - firstInput.timeStamp;
  input.angle = getAngle(offsetCenter, center);
  input.distance = getDistance(offsetCenter, center);
  computeDeltaXY(session, input);
  input.offsetDirection = getDirection(input.deltaX, input.deltaY);
  var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
  input.overallVelocityX = overallVelocity.x;
  input.overallVelocityY = overallVelocity.y;
  input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
  input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
  input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
  computeIntervalInputData(session, input);
  var target = manager.element;
  var srcEvent = input.srcEvent;
  var srcEventTarget;
  if (srcEvent.composedPath) {
    srcEventTarget = srcEvent.composedPath()[0];
  } else if (srcEvent.path) {
    srcEventTarget = srcEvent.path[0];
  } else {
    srcEventTarget = srcEvent.target;
  }
  if (hasParent(srcEventTarget, target)) {
    target = srcEventTarget;
  }
  input.target = target;
}
function inputHandler(manager, eventType, input) {
  var pointersLen = input.pointers.length;
  var changedPointersLen = input.changedPointers.length;
  var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
  var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
  input.isFirst = !!isFirst;
  input.isFinal = !!isFinal;
  if (isFirst) {
    manager.session = {};
  }
  input.eventType = eventType;
  computeInputData(manager, input);
  manager.emit("hammer.input", input);
  manager.recognize(input);
  manager.session.prevInput = input;
}
function splitStr(str) {
  return str.trim().split(/\s+/g);
}
function addEventListeners(target, types, handler) {
  each(splitStr(types), function(type) {
    target.addEventListener(type, handler, false);
  });
}
function removeEventListeners(target, types, handler) {
  each(splitStr(types), function(type) {
    target.removeEventListener(type, handler, false);
  });
}
function getWindowForElement(element) {
  var doc = element.ownerDocument || element;
  return doc.defaultView || doc.parentWindow || window;
}
var Input = function() {
  function Input3(manager, callback) {
    var self2 = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;
    this.domHandler = function(ev) {
      if (boolOrFn(manager.options.enable, [manager])) {
        self2.handler(ev);
      }
    };
    this.init();
  }
  var _proto = Input3.prototype;
  _proto.handler = function handler() {
  };
  _proto.init = function init() {
    this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
    this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
    this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  };
  _proto.destroy = function destroy() {
    this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
    this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
    this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  };
  return Input3;
}();
function inArray(src, find2, findByKey) {
  if (src.indexOf && !findByKey) {
    return src.indexOf(find2);
  } else {
    var i = 0;
    while (i < src.length) {
      if (findByKey && src[i][findByKey] == find2 || !findByKey && src[i] === find2) {
        return i;
      }
      i++;
    }
    return -1;
  }
}
var POINTER_INPUT_MAP = {
  pointerdown: INPUT_START,
  pointermove: INPUT_MOVE,
  pointerup: INPUT_END,
  pointercancel: INPUT_CANCEL,
  pointerout: INPUT_CANCEL
};
var IE10_POINTER_TYPE_ENUM = {
  2: INPUT_TYPE_TOUCH,
  3: INPUT_TYPE_PEN,
  4: INPUT_TYPE_MOUSE,
  5: INPUT_TYPE_KINECT
};
var POINTER_ELEMENT_EVENTS = "pointerdown";
var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel";
if (win.MSPointerEvent && !win.PointerEvent) {
  POINTER_ELEMENT_EVENTS = "MSPointerDown";
  POINTER_WINDOW_EVENTS = "MSPointerMove MSPointerUp MSPointerCancel";
}
var PointerEventInput = function(_Input) {
  _inheritsLoose(PointerEventInput3, _Input);
  function PointerEventInput3() {
    var _this;
    var proto = PointerEventInput3.prototype;
    proto.evEl = POINTER_ELEMENT_EVENTS;
    proto.evWin = POINTER_WINDOW_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.store = _this.manager.session.pointerEvents = [];
    return _this;
  }
  var _proto = PointerEventInput3.prototype;
  _proto.handler = function handler(ev) {
    var store = this.store;
    var removePointer = false;
    var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
    var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
    var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
    var isTouch = pointerType === INPUT_TYPE_TOUCH;
    var storeIndex = inArray(store, ev.pointerId, "pointerId");
    if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
      if (storeIndex < 0) {
        store.push(ev);
        storeIndex = store.length - 1;
      }
    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
      removePointer = true;
    }
    if (storeIndex < 0) {
      return;
    }
    store[storeIndex] = ev;
    this.callback(this.manager, eventType, {
      pointers: store,
      changedPointers: [ev],
      pointerType,
      srcEvent: ev
    });
    if (removePointer) {
      store.splice(storeIndex, 1);
    }
  };
  return PointerEventInput3;
}(Input);
function toArray(obj) {
  return Array.prototype.slice.call(obj, 0);
}
function uniqueArray(src, key, sort5) {
  var results = [];
  var values5 = [];
  var i = 0;
  while (i < src.length) {
    var val = key ? src[i][key] : src[i];
    if (inArray(values5, val) < 0) {
      results.push(src[i]);
    }
    values5[i] = val;
    i++;
  }
  if (sort5) {
    if (!key) {
      results = results.sort();
    } else {
      results = results.sort(function(a, b) {
        return a[key] > b[key];
      });
    }
  }
  return results;
}
var TOUCH_INPUT_MAP = {
  touchstart: INPUT_START,
  touchmove: INPUT_MOVE,
  touchend: INPUT_END,
  touchcancel: INPUT_CANCEL
};
var TOUCH_TARGET_EVENTS = "touchstart touchmove touchend touchcancel";
var TouchInput = function(_Input) {
  _inheritsLoose(TouchInput3, _Input);
  function TouchInput3() {
    var _this;
    TouchInput3.prototype.evTarget = TOUCH_TARGET_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.targetIds = {};
    return _this;
  }
  var _proto = TouchInput3.prototype;
  _proto.handler = function handler(ev) {
    var type = TOUCH_INPUT_MAP[ev.type];
    var touches = getTouches.call(this, ev, type);
    if (!touches) {
      return;
    }
    this.callback(this.manager, type, {
      pointers: touches[0],
      changedPointers: touches[1],
      pointerType: INPUT_TYPE_TOUCH,
      srcEvent: ev
    });
  };
  return TouchInput3;
}(Input);
function getTouches(ev, type) {
  var allTouches = toArray(ev.touches);
  var targetIds = this.targetIds;
  if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
    targetIds[allTouches[0].identifier] = true;
    return [allTouches, allTouches];
  }
  var i;
  var targetTouches;
  var changedTouches = toArray(ev.changedTouches);
  var changedTargetTouches = [];
  var target = this.target;
  targetTouches = allTouches.filter(function(touch) {
    return hasParent(touch.target, target);
  });
  if (type === INPUT_START) {
    i = 0;
    while (i < targetTouches.length) {
      targetIds[targetTouches[i].identifier] = true;
      i++;
    }
  }
  i = 0;
  while (i < changedTouches.length) {
    if (targetIds[changedTouches[i].identifier]) {
      changedTargetTouches.push(changedTouches[i]);
    }
    if (type & (INPUT_END | INPUT_CANCEL)) {
      delete targetIds[changedTouches[i].identifier];
    }
    i++;
  }
  if (!changedTargetTouches.length) {
    return;
  }
  return [
    uniqueArray(targetTouches.concat(changedTargetTouches), "identifier", true),
    changedTargetTouches
  ];
}
var MOUSE_INPUT_MAP = {
  mousedown: INPUT_START,
  mousemove: INPUT_MOVE,
  mouseup: INPUT_END
};
var MOUSE_ELEMENT_EVENTS = "mousedown";
var MOUSE_WINDOW_EVENTS = "mousemove mouseup";
var MouseInput = function(_Input) {
  _inheritsLoose(MouseInput3, _Input);
  function MouseInput3() {
    var _this;
    var proto = MouseInput3.prototype;
    proto.evEl = MOUSE_ELEMENT_EVENTS;
    proto.evWin = MOUSE_WINDOW_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.pressed = false;
    return _this;
  }
  var _proto = MouseInput3.prototype;
  _proto.handler = function handler(ev) {
    var eventType = MOUSE_INPUT_MAP[ev.type];
    if (eventType & INPUT_START && ev.button === 0) {
      this.pressed = true;
    }
    if (eventType & INPUT_MOVE && ev.which !== 1) {
      eventType = INPUT_END;
    }
    if (!this.pressed) {
      return;
    }
    if (eventType & INPUT_END) {
      this.pressed = false;
    }
    this.callback(this.manager, eventType, {
      pointers: [ev],
      changedPointers: [ev],
      pointerType: INPUT_TYPE_MOUSE,
      srcEvent: ev
    });
  };
  return MouseInput3;
}(Input);
var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;
function setLastTouch(eventData) {
  var _eventData$changedPoi = eventData.changedPointers, touch = _eventData$changedPoi[0];
  if (touch.identifier === this.primaryTouch) {
    var lastTouch = {
      x: touch.clientX,
      y: touch.clientY
    };
    var lts = this.lastTouches;
    this.lastTouches.push(lastTouch);
    var removeLastTouch = function removeLastTouch2() {
      var i = lts.indexOf(lastTouch);
      if (i > -1) {
        lts.splice(i, 1);
      }
    };
    setTimeout(removeLastTouch, DEDUP_TIMEOUT);
  }
}
function recordTouches(eventType, eventData) {
  if (eventType & INPUT_START) {
    this.primaryTouch = eventData.changedPointers[0].identifier;
    setLastTouch.call(this, eventData);
  } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
    setLastTouch.call(this, eventData);
  }
}
function isSyntheticEvent(eventData) {
  var x = eventData.srcEvent.clientX;
  var y = eventData.srcEvent.clientY;
  for (var i = 0; i < this.lastTouches.length; i++) {
    var t = this.lastTouches[i];
    var dx = Math.abs(x - t.x);
    var dy = Math.abs(y - t.y);
    if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
      return true;
    }
  }
  return false;
}
var TouchMouseInput = function() {
  var TouchMouseInput3 = function(_Input) {
    _inheritsLoose(TouchMouseInput4, _Input);
    function TouchMouseInput4(_manager, callback) {
      var _this;
      _this = _Input.call(this, _manager, callback) || this;
      _this.handler = function(manager, inputEvent, inputData) {
        var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;
        var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;
        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
          return;
        }
        if (isTouch) {
          recordTouches.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputData)) {
          return;
        }
        _this.callback(manager, inputEvent, inputData);
      };
      _this.touch = new TouchInput(_this.manager, _this.handler);
      _this.mouse = new MouseInput(_this.manager, _this.handler);
      _this.primaryTouch = null;
      _this.lastTouches = [];
      return _this;
    }
    var _proto = TouchMouseInput4.prototype;
    _proto.destroy = function destroy() {
      this.touch.destroy();
      this.mouse.destroy();
    };
    return TouchMouseInput4;
  }(Input);
  return TouchMouseInput3;
}();
function createInputInstance(manager) {
  var Type;
  var inputClass = manager.options.inputClass;
  if (inputClass) {
    Type = inputClass;
  } else if (SUPPORT_POINTER_EVENTS) {
    Type = PointerEventInput;
  } else if (SUPPORT_ONLY_TOUCH) {
    Type = TouchInput;
  } else if (!SUPPORT_TOUCH) {
    Type = MouseInput;
  } else {
    Type = TouchMouseInput;
  }
  return new Type(manager, inputHandler);
}
function invokeArrayArg(arg, fn, context) {
  if (Array.isArray(arg)) {
    each(arg, context[fn], context);
    return true;
  }
  return false;
}
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;
var _uniqueId = 1;
function uniqueId() {
  return _uniqueId++;
}
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
  var manager = recognizer.manager;
  if (manager) {
    return manager.get(otherRecognizer);
  }
  return otherRecognizer;
}
function stateStr(state) {
  if (state & STATE_CANCELLED) {
    return "cancel";
  } else if (state & STATE_ENDED) {
    return "end";
  } else if (state & STATE_CHANGED) {
    return "move";
  } else if (state & STATE_BEGAN) {
    return "start";
  }
  return "";
}
var Recognizer = function() {
  function Recognizer3(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    this.options = _extends({
      enable: true
    }, options2);
    this.id = uniqueId();
    this.manager = null;
    this.state = STATE_POSSIBLE;
    this.simultaneous = {};
    this.requireFail = [];
  }
  var _proto = Recognizer3.prototype;
  _proto.set = function set3(options2) {
    assign$1(this.options, options2);
    this.manager && this.manager.touchAction.update();
    return this;
  };
  _proto.recognizeWith = function recognizeWith(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "recognizeWith", this)) {
      return this;
    }
    var simultaneous = this.simultaneous;
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    if (!simultaneous[otherRecognizer.id]) {
      simultaneous[otherRecognizer.id] = otherRecognizer;
      otherRecognizer.recognizeWith(this);
    }
    return this;
  };
  _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "dropRecognizeWith", this)) {
      return this;
    }
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    delete this.simultaneous[otherRecognizer.id];
    return this;
  };
  _proto.requireFailure = function requireFailure(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "requireFailure", this)) {
      return this;
    }
    var requireFail = this.requireFail;
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    if (inArray(requireFail, otherRecognizer) === -1) {
      requireFail.push(otherRecognizer);
      otherRecognizer.requireFailure(this);
    }
    return this;
  };
  _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {
    if (invokeArrayArg(otherRecognizer, "dropRequireFailure", this)) {
      return this;
    }
    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
    var index2 = inArray(this.requireFail, otherRecognizer);
    if (index2 > -1) {
      this.requireFail.splice(index2, 1);
    }
    return this;
  };
  _proto.hasRequireFailures = function hasRequireFailures() {
    return this.requireFail.length > 0;
  };
  _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {
    return !!this.simultaneous[otherRecognizer.id];
  };
  _proto.emit = function emit(input) {
    var self2 = this;
    var state = this.state;
    function emit2(event) {
      self2.manager.emit(event, input);
    }
    if (state < STATE_ENDED) {
      emit2(self2.options.event + stateStr(state));
    }
    emit2(self2.options.event);
    if (input.additionalEvent) {
      emit2(input.additionalEvent);
    }
    if (state >= STATE_ENDED) {
      emit2(self2.options.event + stateStr(state));
    }
  };
  _proto.tryEmit = function tryEmit(input) {
    if (this.canEmit()) {
      return this.emit(input);
    }
    this.state = STATE_FAILED;
  };
  _proto.canEmit = function canEmit() {
    var i = 0;
    while (i < this.requireFail.length) {
      if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
        return false;
      }
      i++;
    }
    return true;
  };
  _proto.recognize = function recognize(inputData) {
    var inputDataClone = assign$1({}, inputData);
    if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
      this.reset();
      this.state = STATE_FAILED;
      return;
    }
    if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
      this.state = STATE_POSSIBLE;
    }
    this.state = this.process(inputDataClone);
    if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
      this.tryEmit(inputDataClone);
    }
  };
  _proto.process = function process3(inputData) {
  };
  _proto.getTouchAction = function getTouchAction() {
  };
  _proto.reset = function reset() {
  };
  return Recognizer3;
}();
var TapRecognizer = function(_Recognizer) {
  _inheritsLoose(TapRecognizer3, _Recognizer);
  function TapRecognizer3(options2) {
    var _this;
    if (options2 === void 0) {
      options2 = {};
    }
    _this = _Recognizer.call(this, _extends({
      event: "tap",
      pointers: 1,
      taps: 1,
      interval: 300,
      time: 250,
      threshold: 9,
      posThreshold: 10
    }, options2)) || this;
    _this.pTime = false;
    _this.pCenter = false;
    _this._timer = null;
    _this._input = null;
    _this.count = 0;
    return _this;
  }
  var _proto = TapRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_MANIPULATION];
  };
  _proto.process = function process3(input) {
    var _this2 = this;
    var options2 = this.options;
    var validPointers = input.pointers.length === options2.pointers;
    var validMovement = input.distance < options2.threshold;
    var validTouchTime = input.deltaTime < options2.time;
    this.reset();
    if (input.eventType & INPUT_START && this.count === 0) {
      return this.failTimeout();
    }
    if (validMovement && validTouchTime && validPointers) {
      if (input.eventType !== INPUT_END) {
        return this.failTimeout();
      }
      var validInterval = this.pTime ? input.timeStamp - this.pTime < options2.interval : true;
      var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options2.posThreshold;
      this.pTime = input.timeStamp;
      this.pCenter = input.center;
      if (!validMultiTap || !validInterval) {
        this.count = 1;
      } else {
        this.count += 1;
      }
      this._input = input;
      var tapCount = this.count % options2.taps;
      if (tapCount === 0) {
        if (!this.hasRequireFailures()) {
          return STATE_RECOGNIZED;
        } else {
          this._timer = setTimeout(function() {
            _this2.state = STATE_RECOGNIZED;
            _this2.tryEmit();
          }, options2.interval);
          return STATE_BEGAN;
        }
      }
    }
    return STATE_FAILED;
  };
  _proto.failTimeout = function failTimeout() {
    var _this3 = this;
    this._timer = setTimeout(function() {
      _this3.state = STATE_FAILED;
    }, this.options.interval);
    return STATE_FAILED;
  };
  _proto.reset = function reset() {
    clearTimeout(this._timer);
  };
  _proto.emit = function emit() {
    if (this.state === STATE_RECOGNIZED) {
      this._input.tapCount = this.count;
      this.manager.emit(this.options.event, this._input);
    }
  };
  return TapRecognizer3;
}(Recognizer);
var AttrRecognizer = function(_Recognizer) {
  _inheritsLoose(AttrRecognizer3, _Recognizer);
  function AttrRecognizer3(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _Recognizer.call(this, _extends({
      pointers: 1
    }, options2)) || this;
  }
  var _proto = AttrRecognizer3.prototype;
  _proto.attrTest = function attrTest(input) {
    var optionPointers = this.options.pointers;
    return optionPointers === 0 || input.pointers.length === optionPointers;
  };
  _proto.process = function process3(input) {
    var state = this.state;
    var eventType = input.eventType;
    var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
    var isValid = this.attrTest(input);
    if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
      return state | STATE_CANCELLED;
    } else if (isRecognized || isValid) {
      if (eventType & INPUT_END) {
        return state | STATE_ENDED;
      } else if (!(state & STATE_BEGAN)) {
        return STATE_BEGAN;
      }
      return state | STATE_CHANGED;
    }
    return STATE_FAILED;
  };
  return AttrRecognizer3;
}(Recognizer);
function directionStr(direction) {
  if (direction === DIRECTION_DOWN) {
    return "down";
  } else if (direction === DIRECTION_UP) {
    return "up";
  } else if (direction === DIRECTION_LEFT) {
    return "left";
  } else if (direction === DIRECTION_RIGHT) {
    return "right";
  }
  return "";
}
var PanRecognizer = function(_AttrRecognizer) {
  _inheritsLoose(PanRecognizer3, _AttrRecognizer);
  function PanRecognizer3(options2) {
    var _this;
    if (options2 === void 0) {
      options2 = {};
    }
    _this = _AttrRecognizer.call(this, _extends({
      event: "pan",
      threshold: 10,
      pointers: 1,
      direction: DIRECTION_ALL
    }, options2)) || this;
    _this.pX = null;
    _this.pY = null;
    return _this;
  }
  var _proto = PanRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    var direction = this.options.direction;
    var actions = [];
    if (direction & DIRECTION_HORIZONTAL) {
      actions.push(TOUCH_ACTION_PAN_Y);
    }
    if (direction & DIRECTION_VERTICAL) {
      actions.push(TOUCH_ACTION_PAN_X);
    }
    return actions;
  };
  _proto.directionTest = function directionTest(input) {
    var options2 = this.options;
    var hasMoved = true;
    var distance = input.distance;
    var direction = input.direction;
    var x = input.deltaX;
    var y = input.deltaY;
    if (!(direction & options2.direction)) {
      if (options2.direction & DIRECTION_HORIZONTAL) {
        direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        hasMoved = x !== this.pX;
        distance = Math.abs(input.deltaX);
      } else {
        direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
        hasMoved = y !== this.pY;
        distance = Math.abs(input.deltaY);
      }
    }
    input.direction = direction;
    return hasMoved && distance > options2.threshold && direction & options2.direction;
  };
  _proto.attrTest = function attrTest(input) {
    return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
  };
  _proto.emit = function emit(input) {
    this.pX = input.deltaX;
    this.pY = input.deltaY;
    var direction = directionStr(input.direction);
    if (direction) {
      input.additionalEvent = this.options.event + direction;
    }
    _AttrRecognizer.prototype.emit.call(this, input);
  };
  return PanRecognizer3;
}(AttrRecognizer);
var SwipeRecognizer = function(_AttrRecognizer) {
  _inheritsLoose(SwipeRecognizer3, _AttrRecognizer);
  function SwipeRecognizer3(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _AttrRecognizer.call(this, _extends({
      event: "swipe",
      threshold: 10,
      velocity: 0.3,
      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
      pointers: 1
    }, options2)) || this;
  }
  var _proto = SwipeRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return PanRecognizer.prototype.getTouchAction.call(this);
  };
  _proto.attrTest = function attrTest(input) {
    var direction = this.options.direction;
    var velocity;
    if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
      velocity = input.overallVelocity;
    } else if (direction & DIRECTION_HORIZONTAL) {
      velocity = input.overallVelocityX;
    } else if (direction & DIRECTION_VERTICAL) {
      velocity = input.overallVelocityY;
    }
    return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
  };
  _proto.emit = function emit(input) {
    var direction = directionStr(input.offsetDirection);
    if (direction) {
      this.manager.emit(this.options.event + direction, input);
    }
    this.manager.emit(this.options.event, input);
  };
  return SwipeRecognizer3;
}(AttrRecognizer);
var PinchRecognizer = function(_AttrRecognizer) {
  _inheritsLoose(PinchRecognizer3, _AttrRecognizer);
  function PinchRecognizer3(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _AttrRecognizer.call(this, _extends({
      event: "pinch",
      threshold: 0,
      pointers: 2
    }, options2)) || this;
  }
  var _proto = PinchRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_NONE];
  };
  _proto.attrTest = function attrTest(input) {
    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
  };
  _proto.emit = function emit(input) {
    if (input.scale !== 1) {
      var inOut = input.scale < 1 ? "in" : "out";
      input.additionalEvent = this.options.event + inOut;
    }
    _AttrRecognizer.prototype.emit.call(this, input);
  };
  return PinchRecognizer3;
}(AttrRecognizer);
var RotateRecognizer = function(_AttrRecognizer) {
  _inheritsLoose(RotateRecognizer3, _AttrRecognizer);
  function RotateRecognizer3(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _AttrRecognizer.call(this, _extends({
      event: "rotate",
      threshold: 0,
      pointers: 2
    }, options2)) || this;
  }
  var _proto = RotateRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_NONE];
  };
  _proto.attrTest = function attrTest(input) {
    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
  };
  return RotateRecognizer3;
}(AttrRecognizer);
var PressRecognizer = function(_Recognizer) {
  _inheritsLoose(PressRecognizer3, _Recognizer);
  function PressRecognizer3(options2) {
    var _this;
    if (options2 === void 0) {
      options2 = {};
    }
    _this = _Recognizer.call(this, _extends({
      event: "press",
      pointers: 1,
      time: 251,
      threshold: 9
    }, options2)) || this;
    _this._timer = null;
    _this._input = null;
    return _this;
  }
  var _proto = PressRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_AUTO];
  };
  _proto.process = function process3(input) {
    var _this2 = this;
    var options2 = this.options;
    var validPointers = input.pointers.length === options2.pointers;
    var validMovement = input.distance < options2.threshold;
    var validTime = input.deltaTime > options2.time;
    this._input = input;
    if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
      this.reset();
    } else if (input.eventType & INPUT_START) {
      this.reset();
      this._timer = setTimeout(function() {
        _this2.state = STATE_RECOGNIZED;
        _this2.tryEmit();
      }, options2.time);
    } else if (input.eventType & INPUT_END) {
      return STATE_RECOGNIZED;
    }
    return STATE_FAILED;
  };
  _proto.reset = function reset() {
    clearTimeout(this._timer);
  };
  _proto.emit = function emit(input) {
    if (this.state !== STATE_RECOGNIZED) {
      return;
    }
    if (input && input.eventType & INPUT_END) {
      this.manager.emit(this.options.event + "up", input);
    } else {
      this._input.timeStamp = now2();
      this.manager.emit(this.options.event, this._input);
    }
  };
  return PressRecognizer3;
}(Recognizer);
var defaults = {
  domEvents: false,
  touchAction: TOUCH_ACTION_COMPUTE,
  enable: true,
  inputTarget: null,
  inputClass: null,
  cssProps: {
    userSelect: "none",
    touchSelect: "none",
    touchCallout: "none",
    contentZooming: "none",
    userDrag: "none",
    tapHighlightColor: "rgba(0,0,0,0)"
  }
};
var preset = [[RotateRecognizer, {
  enable: false
}], [PinchRecognizer, {
  enable: false
}, ["rotate"]], [SwipeRecognizer, {
  direction: DIRECTION_HORIZONTAL
}], [PanRecognizer, {
  direction: DIRECTION_HORIZONTAL
}, ["swipe"]], [TapRecognizer], [TapRecognizer, {
  event: "doubletap",
  taps: 2
}, ["tap"]], [PressRecognizer]];
var STOP = 1;
var FORCED_STOP = 2;
function toggleCssProps(manager, add) {
  var element = manager.element;
  if (!element.style) {
    return;
  }
  var prop;
  each(manager.options.cssProps, function(value, name) {
    prop = prefixed(element.style, name);
    if (add) {
      manager.oldCssProps[prop] = element.style[prop];
      element.style[prop] = value;
    } else {
      element.style[prop] = manager.oldCssProps[prop] || "";
    }
  });
  if (!add) {
    manager.oldCssProps = {};
  }
}
function triggerDomEvent(event, data3) {
  var gestureEvent = document.createEvent("Event");
  gestureEvent.initEvent(event, true, true);
  gestureEvent.gesture = data3;
  data3.target.dispatchEvent(gestureEvent);
}
var Manager = function() {
  function Manager3(element, options2) {
    var _this = this;
    this.options = assign$1({}, defaults, options2 || {});
    this.options.inputTarget = this.options.inputTarget || element;
    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};
    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);
    toggleCssProps(this, true);
    each(this.options.recognizers, function(item) {
      var recognizer = _this.add(new item[0](item[1]));
      item[2] && recognizer.recognizeWith(item[2]);
      item[3] && recognizer.requireFailure(item[3]);
    }, this);
  }
  var _proto = Manager3.prototype;
  _proto.set = function set3(options2) {
    assign$1(this.options, options2);
    if (options2.touchAction) {
      this.touchAction.update();
    }
    if (options2.inputTarget) {
      this.input.destroy();
      this.input.target = options2.inputTarget;
      this.input.init();
    }
    return this;
  };
  _proto.stop = function stop(force) {
    this.session.stopped = force ? FORCED_STOP : STOP;
  };
  _proto.recognize = function recognize(inputData) {
    var session = this.session;
    if (session.stopped) {
      return;
    }
    this.touchAction.preventDefaults(inputData);
    var recognizer;
    var recognizers = this.recognizers;
    var curRecognizer = session.curRecognizer;
    if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
      session.curRecognizer = null;
      curRecognizer = null;
    }
    var i = 0;
    while (i < recognizers.length) {
      recognizer = recognizers[i];
      if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer === curRecognizer || recognizer.canRecognizeWith(curRecognizer))) {
        recognizer.recognize(inputData);
      } else {
        recognizer.reset();
      }
      if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
        session.curRecognizer = recognizer;
        curRecognizer = recognizer;
      }
      i++;
    }
  };
  _proto.get = function get3(recognizer) {
    if (recognizer instanceof Recognizer) {
      return recognizer;
    }
    var recognizers = this.recognizers;
    for (var i = 0; i < recognizers.length; i++) {
      if (recognizers[i].options.event === recognizer) {
        return recognizers[i];
      }
    }
    return null;
  };
  _proto.add = function add(recognizer) {
    if (invokeArrayArg(recognizer, "add", this)) {
      return this;
    }
    var existing = this.get(recognizer.options.event);
    if (existing) {
      this.remove(existing);
    }
    this.recognizers.push(recognizer);
    recognizer.manager = this;
    this.touchAction.update();
    return recognizer;
  };
  _proto.remove = function remove(recognizer) {
    if (invokeArrayArg(recognizer, "remove", this)) {
      return this;
    }
    var targetRecognizer = this.get(recognizer);
    if (recognizer) {
      var recognizers = this.recognizers;
      var index2 = inArray(recognizers, targetRecognizer);
      if (index2 !== -1) {
        recognizers.splice(index2, 1);
        this.touchAction.update();
      }
    }
    return this;
  };
  _proto.on = function on(events, handler) {
    if (events === void 0 || handler === void 0) {
      return this;
    }
    var handlers = this.handlers;
    each(splitStr(events), function(event) {
      handlers[event] = handlers[event] || [];
      handlers[event].push(handler);
    });
    return this;
  };
  _proto.off = function off(events, handler) {
    if (events === void 0) {
      return this;
    }
    var handlers = this.handlers;
    each(splitStr(events), function(event) {
      if (!handler) {
        delete handlers[event];
      } else {
        handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
      }
    });
    return this;
  };
  _proto.emit = function emit(event, data3) {
    if (this.options.domEvents) {
      triggerDomEvent(event, data3);
    }
    var handlers = this.handlers[event] && this.handlers[event].slice();
    if (!handlers || !handlers.length) {
      return;
    }
    data3.type = event;
    data3.preventDefault = function() {
      data3.srcEvent.preventDefault();
    };
    var i = 0;
    while (i < handlers.length) {
      handlers[i](data3);
      i++;
    }
  };
  _proto.destroy = function destroy() {
    this.element && toggleCssProps(this, false);
    this.handlers = {};
    this.session = {};
    this.input.destroy();
    this.element = null;
  };
  return Manager3;
}();
var SINGLE_TOUCH_INPUT_MAP = {
  touchstart: INPUT_START,
  touchmove: INPUT_MOVE,
  touchend: INPUT_END,
  touchcancel: INPUT_CANCEL
};
var SINGLE_TOUCH_TARGET_EVENTS = "touchstart";
var SINGLE_TOUCH_WINDOW_EVENTS = "touchstart touchmove touchend touchcancel";
var SingleTouchInput = function(_Input) {
  _inheritsLoose(SingleTouchInput3, _Input);
  function SingleTouchInput3() {
    var _this;
    var proto = SingleTouchInput3.prototype;
    proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    _this = _Input.apply(this, arguments) || this;
    _this.started = false;
    return _this;
  }
  var _proto = SingleTouchInput3.prototype;
  _proto.handler = function handler(ev) {
    var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
    if (type === INPUT_START) {
      this.started = true;
    }
    if (!this.started) {
      return;
    }
    var touches = normalizeSingleTouches.call(this, ev, type);
    if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
      this.started = false;
    }
    this.callback(this.manager, type, {
      pointers: touches[0],
      changedPointers: touches[1],
      pointerType: INPUT_TYPE_TOUCH,
      srcEvent: ev
    });
  };
  return SingleTouchInput3;
}(Input);
function normalizeSingleTouches(ev, type) {
  var all = toArray(ev.touches);
  var changed = toArray(ev.changedTouches);
  if (type & (INPUT_END | INPUT_CANCEL)) {
    all = uniqueArray(all.concat(changed), "identifier", true);
  }
  return [all, changed];
}
function deprecate(method3, name, message) {
  var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message + " AT \n";
  return function() {
    var e = new Error("get-stack-trace");
    var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
    var log = window.console && (window.console.warn || window.console.log);
    if (log) {
      log.call(window.console, deprecationMessage, stack);
    }
    return method3.apply(this, arguments);
  };
}
var extend = deprecate(function(dest, src, merge3) {
  var keys7 = Object.keys(src);
  var i = 0;
  while (i < keys7.length) {
    if (!merge3 || merge3 && dest[keys7[i]] === void 0) {
      dest[keys7[i]] = src[keys7[i]];
    }
    i++;
  }
  return dest;
}, "extend", "Use `assign`.");
var merge$1 = deprecate(function(dest, src) {
  return extend(dest, src, true);
}, "merge", "Use `assign`.");
function inherit(child, base, properties) {
  var baseP = base.prototype;
  var childP;
  childP = child.prototype = Object.create(baseP);
  childP.constructor = child;
  childP._super = baseP;
  if (properties) {
    assign$1(childP, properties);
  }
}
function bindFn(fn, context) {
  return function boundFn() {
    return fn.apply(context, arguments);
  };
}
var Hammer = function() {
  var Hammer3 = function Hammer4(element, options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return new Manager(element, _extends({
      recognizers: preset.concat()
    }, options2));
  };
  Hammer3.VERSION = "2.0.17-rc";
  Hammer3.DIRECTION_ALL = DIRECTION_ALL;
  Hammer3.DIRECTION_DOWN = DIRECTION_DOWN;
  Hammer3.DIRECTION_LEFT = DIRECTION_LEFT;
  Hammer3.DIRECTION_RIGHT = DIRECTION_RIGHT;
  Hammer3.DIRECTION_UP = DIRECTION_UP;
  Hammer3.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;
  Hammer3.DIRECTION_VERTICAL = DIRECTION_VERTICAL;
  Hammer3.DIRECTION_NONE = DIRECTION_NONE;
  Hammer3.DIRECTION_DOWN = DIRECTION_DOWN;
  Hammer3.INPUT_START = INPUT_START;
  Hammer3.INPUT_MOVE = INPUT_MOVE;
  Hammer3.INPUT_END = INPUT_END;
  Hammer3.INPUT_CANCEL = INPUT_CANCEL;
  Hammer3.STATE_POSSIBLE = STATE_POSSIBLE;
  Hammer3.STATE_BEGAN = STATE_BEGAN;
  Hammer3.STATE_CHANGED = STATE_CHANGED;
  Hammer3.STATE_ENDED = STATE_ENDED;
  Hammer3.STATE_RECOGNIZED = STATE_RECOGNIZED;
  Hammer3.STATE_CANCELLED = STATE_CANCELLED;
  Hammer3.STATE_FAILED = STATE_FAILED;
  Hammer3.Manager = Manager;
  Hammer3.Input = Input;
  Hammer3.TouchAction = TouchAction;
  Hammer3.TouchInput = TouchInput;
  Hammer3.MouseInput = MouseInput;
  Hammer3.PointerEventInput = PointerEventInput;
  Hammer3.TouchMouseInput = TouchMouseInput;
  Hammer3.SingleTouchInput = SingleTouchInput;
  Hammer3.Recognizer = Recognizer;
  Hammer3.AttrRecognizer = AttrRecognizer;
  Hammer3.Tap = TapRecognizer;
  Hammer3.Pan = PanRecognizer;
  Hammer3.Swipe = SwipeRecognizer;
  Hammer3.Pinch = PinchRecognizer;
  Hammer3.Rotate = RotateRecognizer;
  Hammer3.Press = PressRecognizer;
  Hammer3.on = addEventListeners;
  Hammer3.off = removeEventListeners;
  Hammer3.each = each;
  Hammer3.merge = merge$1;
  Hammer3.extend = extend;
  Hammer3.bindFn = bindFn;
  Hammer3.assign = assign$1;
  Hammer3.inherit = inherit;
  Hammer3.bindFn = bindFn;
  Hammer3.prefixed = prefixed;
  Hammer3.toArray = toArray;
  Hammer3.inArray = inArray;
  Hammer3.uniqueArray = uniqueArray;
  Hammer3.splitStr = splitStr;
  Hammer3.boolOrFn = boolOrFn;
  Hammer3.hasParent = hasParent;
  Hammer3.addEventListeners = addEventListeners;
  Hammer3.removeEventListeners = removeEventListeners;
  Hammer3.defaults = assign$1({}, defaults, {
    preset
  });
  return Hammer3;
}();
var RealHammer = Hammer;
function _createForOfIteratorHelper$3(o, allowArrayLike) {
  var it2 = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$1(o) || (it2 = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$3(o, minLen) {
  var _context21;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$3(o, minLen);
  var n = slice2(_context21 = Object.prototype.toString.call(o)).call(_context21, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$3(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$3(o, minLen);
}
function _arrayLikeToArray$3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var DELETE = symbol("DELETE");
function pureDeepObjectAssign(base) {
  var _context;
  for (var _len = arguments.length, updates = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    updates[_key - 1] = arguments[_key];
  }
  return deepObjectAssign.apply(void 0, concat$1(_context = [{}, base]).call(_context, updates));
}
function deepObjectAssign() {
  var merged = deepObjectAssignNonentry.apply(void 0, arguments);
  stripDelete(merged);
  return merged;
}
function deepObjectAssignNonentry() {
  for (var _len2 = arguments.length, values5 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    values5[_key2] = arguments[_key2];
  }
  if (values5.length < 2) {
    return values5[0];
  } else if (values5.length > 2) {
    var _context2;
    return deepObjectAssignNonentry.apply(void 0, concat$1(_context2 = [deepObjectAssign(values5[0], values5[1])]).call(_context2, _toConsumableArray(slice2(values5).call(values5, 2))));
  }
  var a = values5[0];
  var b = values5[1];
  var _iterator = _createForOfIteratorHelper$3(ownKeys$1(b)), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var prop = _step.value;
      if (!Object.prototype.propertyIsEnumerable.call(b, prop))
        ;
      else if (b[prop] === DELETE) {
        delete a[prop];
      } else if (a[prop] !== null && b[prop] !== null && _typeof(a[prop]) === "object" && _typeof(b[prop]) === "object" && !isArray$1(a[prop]) && !isArray$1(b[prop])) {
        a[prop] = deepObjectAssignNonentry(a[prop], b[prop]);
      } else {
        a[prop] = clone(b[prop]);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return a;
}
function clone(a) {
  if (isArray$1(a)) {
    return map$3(a).call(a, function(value) {
      return clone(value);
    });
  } else if (_typeof(a) === "object" && a !== null) {
    return deepObjectAssignNonentry({}, a);
  } else {
    return a;
  }
}
function stripDelete(a) {
  for (var _i = 0, _Object$keys = keys$4(a); _i < _Object$keys.length; _i++) {
    var prop = _Object$keys[_i];
    if (a[prop] === DELETE) {
      delete a[prop];
    } else if (_typeof(a[prop]) === "object" && a[prop] !== null) {
      stripDelete(a[prop]);
    }
  }
}
function hammerMock() {
  var noop3 = function noop4() {
  };
  return {
    on: noop3,
    off: noop3,
    destroy: noop3,
    emit: noop3,
    get: function get3() {
      return {
        set: noop3
      };
    }
  };
}
var Hammer$1 = typeof window !== "undefined" ? window.Hammer || RealHammer : function() {
  return hammerMock();
};
function Activator$1(container) {
  var _this = this, _context3;
  this._cleanupQueue = [];
  this.active = false;
  this._dom = {
    container,
    overlay: document.createElement("div")
  };
  this._dom.overlay.classList.add("vis-overlay");
  this._dom.container.appendChild(this._dom.overlay);
  this._cleanupQueue.push(function() {
    _this._dom.overlay.parentNode.removeChild(_this._dom.overlay);
  });
  var hammer = Hammer$1(this._dom.overlay);
  hammer.on("tap", bind$6(_context3 = this._onTapOverlay).call(_context3, this));
  this._cleanupQueue.push(function() {
    hammer.destroy();
  });
  var events = ["tap", "doubletap", "press", "pinch", "pan", "panstart", "panmove", "panend"];
  forEach$1(events).call(events, function(event) {
    hammer.on(event, function(event2) {
      event2.srcEvent.stopPropagation();
    });
  });
  if (document && document.body) {
    this._onClick = function(event) {
      if (!_hasParent(event.target, container)) {
        _this.deactivate();
      }
    };
    document.body.addEventListener("click", this._onClick);
    this._cleanupQueue.push(function() {
      document.body.removeEventListener("click", _this._onClick);
    });
  }
  this._escListener = function(event) {
    if ("key" in event ? event.key === "Escape" : event.keyCode === 27) {
      _this.deactivate();
    }
  };
}
Emitter(Activator$1.prototype);
Activator$1.current = null;
Activator$1.prototype.destroy = function() {
  var _context4, _context5;
  this.deactivate();
  var _iterator2 = _createForOfIteratorHelper$3(reverse2(_context4 = splice2(_context5 = this._cleanupQueue).call(_context5, 0)).call(_context4)), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var callback = _step2.value;
      callback();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
};
Activator$1.prototype.activate = function() {
  if (Activator$1.current) {
    Activator$1.current.deactivate();
  }
  Activator$1.current = this;
  this.active = true;
  this._dom.overlay.style.display = "none";
  this._dom.container.classList.add("vis-active");
  this.emit("change");
  this.emit("activate");
  document.body.addEventListener("keydown", this._escListener);
};
Activator$1.prototype.deactivate = function() {
  this.active = false;
  this._dom.overlay.style.display = "block";
  this._dom.container.classList.remove("vis-active");
  document.body.removeEventListener("keydown", this._escListener);
  this.emit("change");
  this.emit("deactivate");
};
Activator$1.prototype._onTapOverlay = function(event) {
  this.activate();
  event.srcEvent.stopPropagation();
};
function _hasParent(element, parent3) {
  while (element) {
    if (element === parent3) {
      return true;
    }
    element = element.parentNode;
  }
  return false;
}
var global$4 = global$M;
var isConstructor3 = isConstructor$4;
var tryToString$1 = tryToString$4;
var TypeError$3 = global$4.TypeError;
var aConstructor$1 = function(argument) {
  if (isConstructor3(argument))
    return argument;
  throw TypeError$3(tryToString$1(argument) + " is not a constructor");
};
var $$5 = _export;
var getBuiltIn$1 = getBuiltIn$9;
var apply = functionApply;
var bind$2 = functionBind;
var aConstructor = aConstructor$1;
var anObject$1 = anObject$b;
var isObject$3 = isObject$f;
var create$4 = objectCreate;
var fails$5 = fails$r;
var nativeConstruct = getBuiltIn$1("Reflect", "construct");
var ObjectPrototype = Object.prototype;
var push$1 = [].push;
var NEW_TARGET_BUG = fails$5(function() {
  function F() {
  }
  return !(nativeConstruct(function() {
  }, [], F) instanceof F);
});
var ARGS_BUG = !fails$5(function() {
  nativeConstruct(function() {
  });
});
var FORCED$1 = NEW_TARGET_BUG || ARGS_BUG;
$$5({
  target: "Reflect",
  stat: true,
  forced: FORCED$1,
  sham: FORCED$1
}, {
  construct: function construct(Target, args) {
    aConstructor(Target);
    anObject$1(args);
    var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG)
      return nativeConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      var $args = [null];
      apply(push$1, $args, args);
      return new (apply(bind$2, Target, $args))();
    }
    var proto = newTarget.prototype;
    var instance = create$4(isObject$3(proto) ? proto : ObjectPrototype);
    var result = apply(Target, instance, args);
    return isObject$3(result) ? result : instance;
  }
});
var path$3 = path$q;
var construct$2 = path$3.Reflect.construct;
var parent$h = construct$2;
var construct$1 = parent$h;
var construct2 = construct$1;
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
var parent$g = create$6;
var create$3 = parent$g;
var parent$f = create$3;
var create$2 = parent$f;
var create$1 = create$2;
var $$4 = _export;
var setPrototypeOf$5 = objectSetPrototypeOf;
$$4({
  target: "Object",
  stat: true
}, {
  setPrototypeOf: setPrototypeOf$5
});
var path$2 = path$q;
var setPrototypeOf$4 = path$2.Object.setPrototypeOf;
var parent$e = setPrototypeOf$4;
var setPrototypeOf$3 = parent$e;
var parent$d = setPrototypeOf$3;
var setPrototypeOf$2 = parent$d;
var parent$c = setPrototypeOf$2;
var setPrototypeOf$1 = parent$c;
var setPrototypeOf = setPrototypeOf$1;
function _setPrototypeOf(o, p) {
  _setPrototypeOf = setPrototypeOf || function _setPrototypeOf3(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = create$1(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  defineProperty$7(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _possibleConstructorReturn(self2, call3) {
  if (call3 && (_typeof(call3) === "object" || typeof call3 === "function")) {
    return call3;
  } else if (call3 !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
var parent$b = getPrototypeOf$3;
var getPrototypeOf$2 = parent$b;
var parent$a = getPrototypeOf$2;
var getPrototypeOf$1 = parent$a;
var getPrototypeOf2 = getPrototypeOf$1;
function _getPrototypeOf(o) {
  _getPrototypeOf = setPrototypeOf ? getPrototypeOf2 : function _getPrototypeOf3(o2) {
    return o2.__proto__ || getPrototypeOf2(o2);
  };
  return _getPrototypeOf(o);
}
var runtime = { exports: {} };
(function(module) {
  var runtime2 = function(exports) {
    var Op = Object.prototype;
    var hasOwn5 = Op.hasOwnProperty;
    var undefined$1;
    var $Symbol3 = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol3.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol3.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol3.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap3(innerFn, outerFn, self2, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self2, context);
      return generator;
    }
    exports.wrap = wrap3;
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    var IteratorPrototype3 = {};
    define(IteratorPrototype3, iteratorSymbol, function() {
      return this;
    });
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values5([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn5.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype3 = NativeIteratorPrototype;
    }
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype3);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method3) {
        define(prototype, method3, function(arg) {
          return this._invoke(method3, arg);
        });
      });
    }
    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };
    exports.awrap = function(arg) {
      return {
        __await: arg
      };
    };
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method3, arg, resolve, reject) {
        var record = tryCatch(generator[method3], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value && typeof value === "object" && hasOwn5.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value2) {
              invoke("next", value2, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }
          return PromiseImpl.resolve(value).then(function(unwrapped) {
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            return invoke("throw", error, resolve, reject);
          });
        }
      }
      var previousPromise;
      function enqueue(method3, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method3, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
      this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
      return this;
    });
    exports.AsyncIterator = AsyncIterator;
    exports.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0)
        PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap3(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
        return result.done ? result.value : iter.next();
      });
    };
    function makeInvokeMethod(innerFn, self2, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method3, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }
        if (state === GenStateCompleted) {
          if (method3 === "throw") {
            throw arg;
          }
          return doneResult();
        }
        context.method = method3;
        context.arg = arg;
        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel)
                continue;
              return delegateResult;
            }
          }
          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }
            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }
          state = GenStateExecuting;
          var record = tryCatch(innerFn, self2, context);
          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
            if (record.arg === ContinueSentinel) {
              continue;
            }
            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var method3 = delegate.iterator[context.method];
      if (method3 === undefined$1) {
        context.delegate = null;
        if (context.method === "throw") {
          if (delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);
            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }
          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }
        return ContinueSentinel;
      }
      var record = tryCatch(method3, delegate.iterator, context.arg);
      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }
      var info = record.arg;
      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }
      if (info.done) {
        context[delegate.resultName] = info.value;
        context.next = delegate.nextLoc;
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        return info;
      }
      context.delegate = null;
      return ContinueSentinel;
    }
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    define(Gp, iteratorSymbol, function() {
      return this;
    });
    define(Gp, "toString", function() {
      return "[object Generator]";
    });
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      if (1 in locs) {
        entry.catchLoc = locs[1];
      }
      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }
      this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }
    exports.keys = function(object2) {
      var keys7 = [];
      for (var key in object2) {
        keys7.push(key);
      }
      keys7.reverse();
      return function next4() {
        while (keys7.length) {
          var key2 = keys7.pop();
          if (key2 in object2) {
            next4.value = key2;
            next4.done = false;
            return next4;
          }
        }
        next4.done = true;
        return next4;
      };
    };
    function values5(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }
        if (typeof iterable.next === "function") {
          return iterable;
        }
        if (!isNaN(iterable.length)) {
          var i = -1, next4 = function next5() {
            while (++i < iterable.length) {
              if (hasOwn5.call(iterable, i)) {
                next5.value = iterable[i];
                next5.done = false;
                return next5;
              }
            }
            next5.value = undefined$1;
            next5.done = true;
            return next5;
          };
          return next4.next = next4;
        }
      }
      return {
        next: doneResult
      };
    }
    exports.values = values5;
    function doneResult() {
      return {
        value: undefined$1,
        done: true
      };
    }
    Context.prototype = {
      constructor: Context,
      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);
        if (!skipTempReset) {
          for (var name in this) {
            if (name.charAt(0) === "t" && hasOwn5.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }
        return this.rval;
      },
      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }
        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
          if (caught) {
            context.method = "next";
            context.arg = undefined$1;
          }
          return !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;
          if (entry.tryLoc === "root") {
            return handle("end");
          }
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn5.call(entry, "catchLoc");
            var hasFinally = hasOwn5.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn5.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }
        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;
        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }
        return this.complete(record);
      },
      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }
        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
        return ContinueSentinel;
      },
      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values5(iterable),
          resultName,
          nextLoc
        };
        if (this.method === "next") {
          this.arg = undefined$1;
        }
        return ContinueSentinel;
      }
    };
    return exports;
  }(module.exports);
  try {
    regeneratorRuntime = runtime2;
  } catch (accidentalStrictMode) {
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime2;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime2);
    }
  }
})(runtime);
var regenerator = runtime.exports;
var internalMetadata = { exports: {} };
var fails$4 = fails$r;
var arrayBufferNonExtensible = fails$4(function() {
  if (typeof ArrayBuffer == "function") {
    var buffer = new ArrayBuffer(8);
    if (Object.isExtensible(buffer))
      Object.defineProperty(buffer, "a", {
        value: 8
      });
  }
});
var fails$3 = fails$r;
var isObject$2 = isObject$f;
var classof$3 = classofRaw$1;
var ARRAY_BUFFER_NON_EXTENSIBLE = arrayBufferNonExtensible;
var $isExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails$3(function() {
  $isExtensible(1);
});
var objectIsExtensible = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it2) {
  if (!isObject$2(it2))
    return false;
  if (ARRAY_BUFFER_NON_EXTENSIBLE && classof$3(it2) == "ArrayBuffer")
    return false;
  return $isExtensible ? $isExtensible(it2) : true;
} : $isExtensible;
var fails$2 = fails$r;
var freezing = !fails$2(function() {
  return Object.isExtensible(Object.preventExtensions({}));
});
var $$3 = _export;
var uncurryThis$1 = functionUncurryThis;
var hiddenKeys = hiddenKeys$6;
var isObject$1 = isObject$f;
var hasOwn$3 = hasOwnProperty_1;
var defineProperty$2 = objectDefineProperty.f;
var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
var getOwnPropertyNamesExternalModule = objectGetOwnPropertyNamesExternal;
var isExtensible2 = objectIsExtensible;
var uid = uid$4;
var FREEZING = freezing;
var REQUIRED = false;
var METADATA = uid("meta");
var id = 0;
var setMetadata = function(it2) {
  defineProperty$2(it2, METADATA, {
    value: {
      objectID: "O" + id++,
      weakData: {}
    }
  });
};
var fastKey$1 = function(it2, create9) {
  if (!isObject$1(it2))
    return typeof it2 == "symbol" ? it2 : (typeof it2 == "string" ? "S" : "P") + it2;
  if (!hasOwn$3(it2, METADATA)) {
    if (!isExtensible2(it2))
      return "F";
    if (!create9)
      return "E";
    setMetadata(it2);
  }
  return it2[METADATA].objectID;
};
var getWeakData = function(it2, create9) {
  if (!hasOwn$3(it2, METADATA)) {
    if (!isExtensible2(it2))
      return true;
    if (!create9)
      return false;
    setMetadata(it2);
  }
  return it2[METADATA].weakData;
};
var onFreeze = function(it2) {
  if (FREEZING && REQUIRED && isExtensible2(it2) && !hasOwn$3(it2, METADATA))
    setMetadata(it2);
  return it2;
};
var enable = function() {
  meta.enable = function() {
  };
  REQUIRED = true;
  var getOwnPropertyNames9 = getOwnPropertyNamesModule.f;
  var splice5 = uncurryThis$1([].splice);
  var test3 = {};
  test3[METADATA] = 1;
  if (getOwnPropertyNames9(test3).length) {
    getOwnPropertyNamesModule.f = function(it2) {
      var result = getOwnPropertyNames9(it2);
      for (var i = 0, length2 = result.length; i < length2; i++) {
        if (result[i] === METADATA) {
          splice5(result, i, 1);
          break;
        }
      }
      return result;
    };
    $$3({
      target: "Object",
      stat: true,
      forced: true
    }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
    });
  }
};
var meta = internalMetadata.exports = {
  enable,
  fastKey: fastKey$1,
  getWeakData,
  onFreeze
};
hiddenKeys[METADATA] = true;
var global$3 = global$M;
var bind$1 = functionBindContext;
var call = functionCall;
var anObject = anObject$b;
var tryToString = tryToString$4;
var isArrayIteratorMethod = isArrayIteratorMethod$2;
var lengthOfArrayLike$1 = lengthOfArrayLike$d;
var isPrototypeOf$6 = objectIsPrototypeOf;
var getIterator$5 = getIterator$7;
var getIteratorMethod = getIteratorMethod$8;
var iteratorClose = iteratorClose$2;
var TypeError$2 = global$3.TypeError;
var Result = function(stopped, result) {
  this.stopped = stopped;
  this.result = result;
};
var ResultPrototype = Result.prototype;
var iterate$2 = function(iterable, unboundFunction, options2) {
  var that = options2 && options2.that;
  var AS_ENTRIES = !!(options2 && options2.AS_ENTRIES);
  var IS_ITERATOR = !!(options2 && options2.IS_ITERATOR);
  var INTERRUPTED = !!(options2 && options2.INTERRUPTED);
  var fn = bind$1(unboundFunction, that);
  var iterator3, iterFn, index2, length2, result, next4, step;
  var stop = function(condition) {
    if (iterator3)
      iteratorClose(iterator3, "normal", condition);
    return new Result(true, condition);
  };
  var callFn = function(value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    }
    return INTERRUPTED ? fn(value, stop) : fn(value);
  };
  if (IS_ITERATOR) {
    iterator3 = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn)
      throw TypeError$2(tryToString(iterable) + " is not iterable");
    if (isArrayIteratorMethod(iterFn)) {
      for (index2 = 0, length2 = lengthOfArrayLike$1(iterable); length2 > index2; index2++) {
        result = callFn(iterable[index2]);
        if (result && isPrototypeOf$6(ResultPrototype, result))
          return result;
      }
      return new Result(false);
    }
    iterator3 = getIterator$5(iterable, iterFn);
  }
  next4 = iterator3.next;
  while (!(step = call(next4, iterator3)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator3, "throw", error);
    }
    if (typeof result == "object" && result && isPrototypeOf$6(ResultPrototype, result))
      return result;
  }
  return new Result(false);
};
var global$2 = global$M;
var isPrototypeOf$5 = objectIsPrototypeOf;
var TypeError$1 = global$2.TypeError;
var anInstance$2 = function(it2, Prototype) {
  if (isPrototypeOf$5(Prototype, it2))
    return it2;
  throw TypeError$1("Incorrect invocation");
};
var $$2 = _export;
var global$1 = global$M;
var InternalMetadataModule = internalMetadata.exports;
var fails$1 = fails$r;
var createNonEnumerableProperty = createNonEnumerableProperty$6;
var iterate$1 = iterate$2;
var anInstance$1 = anInstance$2;
var isCallable = isCallable$h;
var isObject = isObject$f;
var setToStringTag = setToStringTag$5;
var defineProperty$1 = objectDefineProperty.f;
var forEach2 = arrayIteration.forEach;
var DESCRIPTORS$2 = descriptors;
var InternalStateModule$1 = internalState;
var setInternalState$1 = InternalStateModule$1.set;
var internalStateGetterFor$1 = InternalStateModule$1.getterFor;
var collection$2 = function(CONSTRUCTOR_NAME, wrapper2, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
  var ADDER = IS_MAP ? "set" : "add";
  var NativeConstructor = global$1[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var exported = {};
  var Constructor;
  if (!DESCRIPTORS$2 || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails$1(function() {
    new NativeConstructor().entries().next();
  }))) {
    Constructor = common.getConstructor(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.enable();
  } else {
    Constructor = wrapper2(function(target, iterable) {
      setInternalState$1(anInstance$1(target, Prototype), {
        type: CONSTRUCTOR_NAME,
        collection: new NativeConstructor()
      });
      if (iterable != void 0)
        iterate$1(iterable, target[ADDER], {
          that: target,
          AS_ENTRIES: IS_MAP
        });
    });
    var Prototype = Constructor.prototype;
    var getInternalState3 = internalStateGetterFor$1(CONSTRUCTOR_NAME);
    forEach2(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(KEY) {
      var IS_ADDER = KEY == "add" || KEY == "set";
      if (KEY in NativePrototype && !(IS_WEAK && KEY == "clear")) {
        createNonEnumerableProperty(Prototype, KEY, function(a, b) {
          var collection3 = getInternalState3(this).collection;
          if (!IS_ADDER && IS_WEAK && !isObject(a))
            return KEY == "get" ? void 0 : false;
          var result = collection3[KEY](a === 0 ? 0 : a, b);
          return IS_ADDER ? this : result;
        });
      }
    });
    IS_WEAK || defineProperty$1(Prototype, "size", {
      configurable: true,
      get: function() {
        return getInternalState3(this).collection.size;
      }
    });
  }
  setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
  exported[CONSTRUCTOR_NAME] = Constructor;
  $$2({
    global: true,
    forced: true
  }, exported);
  if (!IS_WEAK)
    common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
  return Constructor;
};
var redefine = redefine$4;
var redefineAll$1 = function(target, src, options2) {
  for (var key in src) {
    if (options2 && options2.unsafe && target[key])
      target[key] = src[key];
    else
      redefine(target, key, src[key], options2);
  }
  return target;
};
var getBuiltIn = getBuiltIn$9;
var definePropertyModule = objectDefineProperty;
var wellKnownSymbol = wellKnownSymbol$j;
var DESCRIPTORS$1 = descriptors;
var SPECIES = wellKnownSymbol("species");
var setSpecies$1 = function(CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty11 = definePropertyModule.f;
  if (DESCRIPTORS$1 && Constructor && !Constructor[SPECIES]) {
    defineProperty11(Constructor, SPECIES, {
      configurable: true,
      get: function() {
        return this;
      }
    });
  }
};
var defineProperty5 = objectDefineProperty.f;
var create4 = objectCreate;
var redefineAll = redefineAll$1;
var bind2 = functionBindContext;
var anInstance = anInstance$2;
var iterate = iterate$2;
var defineIterator = defineIterator$3;
var setSpecies = setSpecies$1;
var DESCRIPTORS = descriptors;
var fastKey = internalMetadata.exports.fastKey;
var InternalStateModule = internalState;
var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
var collectionStrong$2 = {
  getConstructor: function(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper2(function(that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create4(null),
        first: void 0,
        last: void 0,
        size: 0
      });
      if (!DESCRIPTORS)
        that.size = 0;
      if (iterable != void 0)
        iterate(iterable, that[ADDER], {
          that,
          AS_ENTRIES: IS_MAP
        });
    });
    var Prototype = Constructor.prototype;
    var getInternalState3 = internalStateGetterFor(CONSTRUCTOR_NAME);
    var define = function(that, key, value) {
      var state = getInternalState3(that);
      var entry = getEntry(that, key);
      var previous, index2;
      if (entry) {
        entry.value = value;
      } else {
        state.last = entry = {
          index: index2 = fastKey(key, true),
          key,
          value,
          previous: previous = state.last,
          next: void 0,
          removed: false
        };
        if (!state.first)
          state.first = entry;
        if (previous)
          previous.next = entry;
        if (DESCRIPTORS)
          state.size++;
        else
          that.size++;
        if (index2 !== "F")
          state.index[index2] = entry;
      }
      return that;
    };
    var getEntry = function(that, key) {
      var state = getInternalState3(that);
      var index2 = fastKey(key);
      var entry;
      if (index2 !== "F")
        return state.index[index2];
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key)
          return entry;
      }
    };
    redefineAll(Prototype, {
      clear: function clear() {
        var that = this;
        var state = getInternalState3(that);
        var data3 = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous)
            entry.previous = entry.previous.next = void 0;
          delete data3[entry.index];
          entry = entry.next;
        }
        state.first = state.last = void 0;
        if (DESCRIPTORS)
          state.size = 0;
        else
          that.size = 0;
      },
      "delete": function(key) {
        var that = this;
        var state = getInternalState3(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next4 = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev)
            prev.next = next4;
          if (next4)
            next4.previous = prev;
          if (state.first == entry)
            state.first = next4;
          if (state.last == entry)
            state.last = prev;
          if (DESCRIPTORS)
            state.size--;
          else
            that.size--;
        }
        return !!entry;
      },
      forEach: function forEach5(callbackfn) {
        var state = getInternalState3(this);
        var boundFunction = bind2(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          while (entry && entry.removed)
            entry = entry.previous;
        }
      },
      has: function has3(key) {
        return !!getEntry(this, key);
      }
    });
    redefineAll(Prototype, IS_MAP ? {
      get: function get3(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      set: function set3(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS)
      defineProperty5(Prototype, "size", {
        get: function() {
          return getInternalState3(this).size;
        }
      });
    return Constructor;
  },
  setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    defineIterator(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind,
        last: void 0
      });
    }, function() {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      while (entry && entry.removed)
        entry = entry.previous;
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        state.target = void 0;
        return {
          value: void 0,
          done: true
        };
      }
      if (kind == "keys")
        return {
          value: entry.key,
          done: false
        };
      if (kind == "values")
        return {
          value: entry.value,
          done: false
        };
      return {
        value: [entry.key, entry.value],
        done: false
      };
    }, IS_MAP ? "entries" : "values", !IS_MAP, true);
    setSpecies(CONSTRUCTOR_NAME);
  }
};
var collection$1 = collection$2;
var collectionStrong$1 = collectionStrong$2;
collection$1("Map", function(init) {
  return function Map() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
}, collectionStrong$1);
var path$1 = path$q;
var map$2 = path$1.Map;
var parent$9 = map$2;
var map$1 = parent$9;
var map2 = map$1;
var $$1 = _export;
var $some = arrayIteration.some;
var arrayMethodIsStrict$1 = arrayMethodIsStrict$5;
var STRICT_METHOD$1 = arrayMethodIsStrict$1("some");
$$1({
  target: "Array",
  proto: true,
  forced: !STRICT_METHOD$1
}, {
  some: function some(callbackfn) {
    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$4 = entryVirtual$k;
var some$3 = entryVirtual$4("Array").some;
var isPrototypeOf$4 = objectIsPrototypeOf;
var method$4 = some$3;
var ArrayPrototype$4 = Array.prototype;
var some$2 = function(it2) {
  var own = it2.some;
  return it2 === ArrayPrototype$4 || isPrototypeOf$4(ArrayPrototype$4, it2) && own === ArrayPrototype$4.some ? method$4 : own;
};
var parent$8 = some$2;
var some$1 = parent$8;
var some2 = some$1;
var entryVirtual$3 = entryVirtual$k;
var keys$3 = entryVirtual$3("Array").keys;
var parent$7 = keys$3;
var keys$2 = parent$7;
var classof$2 = classof$c;
var hasOwn$2 = hasOwnProperty_1;
var isPrototypeOf$3 = objectIsPrototypeOf;
var method$3 = keys$2;
var ArrayPrototype$3 = Array.prototype;
var DOMIterables$2 = {
  DOMTokenList: true,
  NodeList: true
};
var keys$1 = function(it2) {
  var own = it2.keys;
  return it2 === ArrayPrototype$3 || isPrototypeOf$3(ArrayPrototype$3, it2) && own === ArrayPrototype$3.keys || hasOwn$2(DOMIterables$2, classof$2(it2)) ? method$3 : own;
};
var keys3 = keys$1;
var arraySlice = arraySliceSimple;
var floor = Math.floor;
var mergeSort = function(array2, comparefn) {
  var length2 = array2.length;
  var middle = floor(length2 / 2);
  return length2 < 8 ? insertionSort(array2, comparefn) : merge(array2, mergeSort(arraySlice(array2, 0, middle), comparefn), mergeSort(arraySlice(array2, middle), comparefn), comparefn);
};
var insertionSort = function(array2, comparefn) {
  var length2 = array2.length;
  var i = 1;
  var element, j;
  while (i < length2) {
    j = i;
    element = array2[i];
    while (j && comparefn(array2[j - 1], element) > 0) {
      array2[j] = array2[--j];
    }
    if (j !== i++)
      array2[j] = element;
  }
  return array2;
};
var merge = function(array2, left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;
  while (lindex < llength || rindex < rlength) {
    array2[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
  }
  return array2;
};
var arraySort = mergeSort;
var userAgent$1 = engineUserAgent;
var firefox = userAgent$1.match(/firefox\/(\d+)/i);
var engineFfVersion = !!firefox && +firefox[1];
var UA = engineUserAgent;
var engineIsIeOrEdge = /MSIE|Trident/.test(UA);
var userAgent = engineUserAgent;
var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
var engineWebkitVersion = !!webkit && +webkit[1];
var $ = _export;
var uncurryThis = functionUncurryThis;
var aCallable = aCallable$7;
var toObject = toObject$e;
var lengthOfArrayLike = lengthOfArrayLike$d;
var toString2 = toString$7;
var fails = fails$r;
var internalSort = arraySort;
var arrayMethodIsStrict = arrayMethodIsStrict$5;
var FF = engineFfVersion;
var IE_OR_EDGE = engineIsIeOrEdge;
var V8 = engineV8Version;
var WEBKIT = engineWebkitVersion;
var test = [];
var un$Sort = uncurryThis(test.sort);
var push = uncurryThis(test.push);
var FAILS_ON_UNDEFINED = fails(function() {
  test.sort(void 0);
});
var FAILS_ON_NULL = fails(function() {
  test.sort(null);
});
var STRICT_METHOD = arrayMethodIsStrict("sort");
var STABLE_SORT = !fails(function() {
  if (V8)
    return V8 < 70;
  if (FF && FF > 3)
    return;
  if (IE_OR_EDGE)
    return true;
  if (WEBKIT)
    return WEBKIT < 603;
  var result = "";
  var code, chr, value, index2;
  for (code = 65; code < 76; code++) {
    chr = String.fromCharCode(code);
    switch (code) {
      case 66:
      case 69:
      case 70:
      case 72:
        value = 3;
        break;
      case 68:
      case 71:
        value = 4;
        break;
      default:
        value = 2;
    }
    for (index2 = 0; index2 < 47; index2++) {
      test.push({
        k: chr + index2,
        v: value
      });
    }
  }
  test.sort(function(a, b) {
    return b.v - a.v;
  });
  for (index2 = 0; index2 < test.length; index2++) {
    chr = test[index2].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr)
      result += chr;
  }
  return result !== "DGBEFHACIJK";
});
var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
var getSortCompare = function(comparefn) {
  return function(x, y) {
    if (y === void 0)
      return -1;
    if (x === void 0)
      return 1;
    if (comparefn !== void 0)
      return +comparefn(x, y) || 0;
    return toString2(x) > toString2(y) ? 1 : -1;
  };
};
$({
  target: "Array",
  proto: true,
  forced: FORCED
}, {
  sort: function sort(comparefn) {
    if (comparefn !== void 0)
      aCallable(comparefn);
    var array2 = toObject(this);
    if (STABLE_SORT)
      return comparefn === void 0 ? un$Sort(array2) : un$Sort(array2, comparefn);
    var items = [];
    var arrayLength = lengthOfArrayLike(array2);
    var itemsLength, index2;
    for (index2 = 0; index2 < arrayLength; index2++) {
      if (index2 in array2)
        push(items, array2[index2]);
    }
    internalSort(items, getSortCompare(comparefn));
    itemsLength = items.length;
    index2 = 0;
    while (index2 < itemsLength)
      array2[index2] = items[index2++];
    while (index2 < arrayLength)
      delete array2[index2++];
    return array2;
  }
});
var entryVirtual$2 = entryVirtual$k;
var sort$3 = entryVirtual$2("Array").sort;
var isPrototypeOf$2 = objectIsPrototypeOf;
var method$2 = sort$3;
var ArrayPrototype$2 = Array.prototype;
var sort$2 = function(it2) {
  var own = it2.sort;
  return it2 === ArrayPrototype$2 || isPrototypeOf$2(ArrayPrototype$2, it2) && own === ArrayPrototype$2.sort ? method$2 : own;
};
var parent$6 = sort$2;
var sort$1 = parent$6;
var sort2 = sort$1;
var entryVirtual$1 = entryVirtual$k;
var values$3 = entryVirtual$1("Array").values;
var parent$5 = values$3;
var values$2 = parent$5;
var classof$1 = classof$c;
var hasOwn$1 = hasOwnProperty_1;
var isPrototypeOf$1 = objectIsPrototypeOf;
var method$1 = values$2;
var ArrayPrototype$1 = Array.prototype;
var DOMIterables$1 = {
  DOMTokenList: true,
  NodeList: true
};
var values$1 = function(it2) {
  var own = it2.values;
  return it2 === ArrayPrototype$1 || isPrototypeOf$1(ArrayPrototype$1, it2) && own === ArrayPrototype$1.values || hasOwn$1(DOMIterables$1, classof$1(it2)) ? method$1 : own;
};
var values2 = values$1;
var iterator = iterator$4;
var entryVirtual = entryVirtual$k;
var entries$3 = entryVirtual("Array").entries;
var parent$4 = entries$3;
var entries$2 = parent$4;
var classof = classof$c;
var hasOwn2 = hasOwnProperty_1;
var isPrototypeOf = objectIsPrototypeOf;
var method = entries$2;
var ArrayPrototype = Array.prototype;
var DOMIterables = {
  DOMTokenList: true,
  NodeList: true
};
var entries$1 = function(it2) {
  var own = it2.entries;
  return it2 === ArrayPrototype || isPrototypeOf(ArrayPrototype, it2) && own === ArrayPrototype.entries || hasOwn2(DOMIterables, classof(it2)) ? method : own;
};
var entries = entries$1;
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function validate(uuid) {
  return typeof uuid === "string" && REGEX.test(uuid);
}
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
function stringify2(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
function v4(options2, buf, offset) {
  options2 = options2 || {};
  var rnds = options2.random || (options2.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify2(rnds);
}
function isId(value) {
  return typeof value === "string" || typeof value === "number";
}
var Queue = function() {
  function Queue2(options2) {
    _classCallCheck(this, Queue2);
    _defineProperty(this, "delay", void 0);
    _defineProperty(this, "max", void 0);
    _defineProperty(this, "_queue", []);
    _defineProperty(this, "_timeout", null);
    _defineProperty(this, "_extended", null);
    this.delay = null;
    this.max = Infinity;
    this.setOptions(options2);
  }
  _createClass(Queue2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      if (options2 && typeof options2.delay !== "undefined") {
        this.delay = options2.delay;
      }
      if (options2 && typeof options2.max !== "undefined") {
        this.max = options2.max;
      }
      this._flushIfNeeded();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.flush();
      if (this._extended) {
        var object2 = this._extended.object;
        var methods = this._extended.methods;
        for (var i = 0; i < methods.length; i++) {
          var method3 = methods[i];
          if (method3.original) {
            object2[method3.name] = method3.original;
          } else {
            delete object2[method3.name];
          }
        }
        this._extended = null;
      }
    }
  }, {
    key: "replace",
    value: function replace3(object2, method3) {
      var me = this;
      var original = object2[method3];
      if (!original) {
        throw new Error("Method " + method3 + " undefined");
      }
      object2[method3] = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        me.queue({
          args,
          fn: original,
          context: this
        });
      };
    }
  }, {
    key: "queue",
    value: function queue(entry) {
      if (typeof entry === "function") {
        this._queue.push({
          fn: entry
        });
      } else {
        this._queue.push(entry);
      }
      this._flushIfNeeded();
    }
  }, {
    key: "_flushIfNeeded",
    value: function _flushIfNeeded() {
      var _this = this;
      if (this._queue.length > this.max) {
        this.flush();
      }
      if (this._timeout != null) {
        clearTimeout(this._timeout);
        this._timeout = null;
      }
      if (this.queue.length > 0 && typeof this.delay === "number") {
        this._timeout = setTimeout$1(function() {
          _this.flush();
        }, this.delay);
      }
    }
  }, {
    key: "flush",
    value: function flush() {
      var _context, _context2;
      forEach$1(_context = splice2(_context2 = this._queue).call(_context2, 0)).call(_context, function(entry) {
        entry.fn.apply(entry.context || entry.fn, entry.args || []);
      });
    }
  }], [{
    key: "extend",
    value: function extend3(object2, options2) {
      var queue = new Queue2(options2);
      if (object2.flush !== void 0) {
        throw new Error("Target object already has a property flush");
      }
      object2.flush = function() {
        queue.flush();
      };
      var methods = [{
        name: "flush",
        original: void 0
      }];
      if (options2 && options2.replace) {
        for (var i = 0; i < options2.replace.length; i++) {
          var name = options2.replace[i];
          methods.push({
            name,
            original: object2[name]
          });
          queue.replace(object2, name);
        }
      }
      queue._extended = {
        object: object2,
        methods
      };
      return queue;
    }
  }]);
  return Queue2;
}();
var DataSetPart = function() {
  function DataSetPart2() {
    _classCallCheck(this, DataSetPart2);
    _defineProperty(this, "_subscribers", {
      "*": [],
      add: [],
      remove: [],
      update: []
    });
    _defineProperty(this, "subscribe", DataSetPart2.prototype.on);
    _defineProperty(this, "unsubscribe", DataSetPart2.prototype.off);
  }
  _createClass(DataSetPart2, [{
    key: "_trigger",
    value: function _trigger(event, payload, senderId) {
      var _context, _context2;
      if (event === "*") {
        throw new Error("Cannot trigger event *");
      }
      forEach$1(_context = concat$1(_context2 = []).call(_context2, _toConsumableArray(this._subscribers[event]), _toConsumableArray(this._subscribers["*"]))).call(_context, function(subscriber) {
        subscriber(event, payload, senderId != null ? senderId : null);
      });
    }
  }, {
    key: "on",
    value: function on(event, callback) {
      if (typeof callback === "function") {
        this._subscribers[event].push(callback);
      }
    }
  }, {
    key: "off",
    value: function off(event, callback) {
      var _context3;
      this._subscribers[event] = filter2(_context3 = this._subscribers[event]).call(_context3, function(subscriber) {
        return subscriber !== callback;
      });
    }
  }]);
  return DataSetPart2;
}();
var collection = collection$2;
var collectionStrong = collectionStrong$2;
collection("Set", function(init) {
  return function Set() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
}, collectionStrong);
var path = path$q;
var set$2 = path.Set;
var parent$3 = set$2;
var set$1 = parent$3;
var set = set$1;
var getIterator$4 = getIterator$7;
var getIterator_1 = getIterator$4;
var parent$2 = getIterator_1;
var getIterator$3 = parent$2;
var parent$1 = getIterator$3;
var getIterator$2 = parent$1;
var parent = getIterator$2;
var getIterator$1 = parent;
var getIterator = getIterator$1;
var _Symbol$iterator;
function _createForOfIteratorHelper$2(o, allowArrayLike) {
  var it2 = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$1(o) || (it2 = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$2(o, minLen) {
  var _context10;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$2(o, minLen);
  var n = slice2(_context10 = Object.prototype.toString.call(o)).call(_context10, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$3(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$2(o, minLen);
}
function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
_Symbol$iterator = iterator;
var DataStream = function() {
  function DataStream2(pairs) {
    _classCallCheck(this, DataStream2);
    _defineProperty(this, "_pairs", void 0);
    this._pairs = pairs;
  }
  _createClass(DataStream2, [{
    key: _Symbol$iterator,
    value: regenerator.mark(function value() {
      var _iterator, _step, _step$value, id3, item;
      return regenerator.wrap(function value$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iterator = _createForOfIteratorHelper$2(this._pairs);
              _context.prev = 1;
              _iterator.s();
            case 3:
              if ((_step = _iterator.n()).done) {
                _context.next = 9;
                break;
              }
              _step$value = _slicedToArray(_step.value, 2), id3 = _step$value[0], item = _step$value[1];
              _context.next = 7;
              return [id3, item];
            case 7:
              _context.next = 3;
              break;
            case 9:
              _context.next = 14;
              break;
            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](1);
              _iterator.e(_context.t0);
            case 14:
              _context.prev = 14;
              _iterator.f();
              return _context.finish(14);
            case 17:
            case "end":
              return _context.stop();
          }
        }
      }, value, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: "entries",
    value: regenerator.mark(function entries2() {
      var _iterator2, _step2, _step2$value, id3, item;
      return regenerator.wrap(function entries$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _iterator2 = _createForOfIteratorHelper$2(this._pairs);
              _context2.prev = 1;
              _iterator2.s();
            case 3:
              if ((_step2 = _iterator2.n()).done) {
                _context2.next = 9;
                break;
              }
              _step2$value = _slicedToArray(_step2.value, 2), id3 = _step2$value[0], item = _step2$value[1];
              _context2.next = 7;
              return [id3, item];
            case 7:
              _context2.next = 3;
              break;
            case 9:
              _context2.next = 14;
              break;
            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](1);
              _iterator2.e(_context2.t0);
            case 14:
              _context2.prev = 14;
              _iterator2.f();
              return _context2.finish(14);
            case 17:
            case "end":
              return _context2.stop();
          }
        }
      }, entries2, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: "keys",
    value: regenerator.mark(function keys7() {
      var _iterator3, _step3, _step3$value, id3;
      return regenerator.wrap(function keys$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _iterator3 = _createForOfIteratorHelper$2(this._pairs);
              _context3.prev = 1;
              _iterator3.s();
            case 3:
              if ((_step3 = _iterator3.n()).done) {
                _context3.next = 9;
                break;
              }
              _step3$value = _slicedToArray(_step3.value, 1), id3 = _step3$value[0];
              _context3.next = 7;
              return id3;
            case 7:
              _context3.next = 3;
              break;
            case 9:
              _context3.next = 14;
              break;
            case 11:
              _context3.prev = 11;
              _context3.t0 = _context3["catch"](1);
              _iterator3.e(_context3.t0);
            case 14:
              _context3.prev = 14;
              _iterator3.f();
              return _context3.finish(14);
            case 17:
            case "end":
              return _context3.stop();
          }
        }
      }, keys7, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: "values",
    value: regenerator.mark(function values5() {
      var _iterator4, _step4, _step4$value, item;
      return regenerator.wrap(function values$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _iterator4 = _createForOfIteratorHelper$2(this._pairs);
              _context4.prev = 1;
              _iterator4.s();
            case 3:
              if ((_step4 = _iterator4.n()).done) {
                _context4.next = 9;
                break;
              }
              _step4$value = _slicedToArray(_step4.value, 2), item = _step4$value[1];
              _context4.next = 7;
              return item;
            case 7:
              _context4.next = 3;
              break;
            case 9:
              _context4.next = 14;
              break;
            case 11:
              _context4.prev = 11;
              _context4.t0 = _context4["catch"](1);
              _iterator4.e(_context4.t0);
            case 14:
              _context4.prev = 14;
              _iterator4.f();
              return _context4.finish(14);
            case 17:
            case "end":
              return _context4.stop();
          }
        }
      }, values5, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: "toIdArray",
    value: function toIdArray() {
      var _context5;
      return map$3(_context5 = _toConsumableArray(this._pairs)).call(_context5, function(pair) {
        return pair[0];
      });
    }
  }, {
    key: "toItemArray",
    value: function toItemArray() {
      var _context6;
      return map$3(_context6 = _toConsumableArray(this._pairs)).call(_context6, function(pair) {
        return pair[1];
      });
    }
  }, {
    key: "toEntryArray",
    value: function toEntryArray() {
      return _toConsumableArray(this._pairs);
    }
  }, {
    key: "toObjectMap",
    value: function toObjectMap() {
      var map5 = create$5(null);
      var _iterator5 = _createForOfIteratorHelper$2(this._pairs), _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
          var _step5$value = _slicedToArray(_step5.value, 2), id3 = _step5$value[0], item = _step5$value[1];
          map5[id3] = item;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      return map5;
    }
  }, {
    key: "toMap",
    value: function toMap() {
      return new map2(this._pairs);
    }
  }, {
    key: "toIdSet",
    value: function toIdSet() {
      return new set(this.toIdArray());
    }
  }, {
    key: "toItemSet",
    value: function toItemSet() {
      return new set(this.toItemArray());
    }
  }, {
    key: "cache",
    value: function cache() {
      return new DataStream2(_toConsumableArray(this._pairs));
    }
  }, {
    key: "distinct",
    value: function distinct(callback) {
      var set$13 = new set();
      var _iterator6 = _createForOfIteratorHelper$2(this._pairs), _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
          var _step6$value = _slicedToArray(_step6.value, 2), id3 = _step6$value[0], item = _step6$value[1];
          set$13.add(callback(item, id3));
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return set$13;
    }
  }, {
    key: "filter",
    value: function filter5(callback) {
      var pairs = this._pairs;
      return new DataStream2(_defineProperty({}, iterator, regenerator.mark(function _callee() {
        var _iterator7, _step7, _step7$value, id3, item;
        return regenerator.wrap(function _callee$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _iterator7 = _createForOfIteratorHelper$2(pairs);
                _context7.prev = 1;
                _iterator7.s();
              case 3:
                if ((_step7 = _iterator7.n()).done) {
                  _context7.next = 10;
                  break;
                }
                _step7$value = _slicedToArray(_step7.value, 2), id3 = _step7$value[0], item = _step7$value[1];
                if (!callback(item, id3)) {
                  _context7.next = 8;
                  break;
                }
                _context7.next = 8;
                return [id3, item];
              case 8:
                _context7.next = 3;
                break;
              case 10:
                _context7.next = 15;
                break;
              case 12:
                _context7.prev = 12;
                _context7.t0 = _context7["catch"](1);
                _iterator7.e(_context7.t0);
              case 15:
                _context7.prev = 15;
                _iterator7.f();
                return _context7.finish(15);
              case 18:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee, null, [[1, 12, 15, 18]]);
      })));
    }
  }, {
    key: "forEach",
    value: function forEach5(callback) {
      var _iterator8 = _createForOfIteratorHelper$2(this._pairs), _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
          var _step8$value = _slicedToArray(_step8.value, 2), id3 = _step8$value[0], item = _step8$value[1];
          callback(item, id3);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
  }, {
    key: "map",
    value: function map5(callback) {
      var pairs = this._pairs;
      return new DataStream2(_defineProperty({}, iterator, regenerator.mark(function _callee2() {
        var _iterator9, _step9, _step9$value, id3, item;
        return regenerator.wrap(function _callee2$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _iterator9 = _createForOfIteratorHelper$2(pairs);
                _context8.prev = 1;
                _iterator9.s();
              case 3:
                if ((_step9 = _iterator9.n()).done) {
                  _context8.next = 9;
                  break;
                }
                _step9$value = _slicedToArray(_step9.value, 2), id3 = _step9$value[0], item = _step9$value[1];
                _context8.next = 7;
                return [id3, callback(item, id3)];
              case 7:
                _context8.next = 3;
                break;
              case 9:
                _context8.next = 14;
                break;
              case 11:
                _context8.prev = 11;
                _context8.t0 = _context8["catch"](1);
                _iterator9.e(_context8.t0);
              case 14:
                _context8.prev = 14;
                _iterator9.f();
                return _context8.finish(14);
              case 17:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee2, null, [[1, 11, 14, 17]]);
      })));
    }
  }, {
    key: "max",
    value: function max3(callback) {
      var iter = getIterator(this._pairs);
      var curr = iter.next();
      if (curr.done) {
        return null;
      }
      var maxItem = curr.value[1];
      var maxValue = callback(curr.value[1], curr.value[0]);
      while (!(curr = iter.next()).done) {
        var _curr$value = _slicedToArray(curr.value, 2), id3 = _curr$value[0], item = _curr$value[1];
        var _value = callback(item, id3);
        if (_value > maxValue) {
          maxValue = _value;
          maxItem = item;
        }
      }
      return maxItem;
    }
  }, {
    key: "min",
    value: function min3(callback) {
      var iter = getIterator(this._pairs);
      var curr = iter.next();
      if (curr.done) {
        return null;
      }
      var minItem = curr.value[1];
      var minValue = callback(curr.value[1], curr.value[0]);
      while (!(curr = iter.next()).done) {
        var _curr$value2 = _slicedToArray(curr.value, 2), id3 = _curr$value2[0], item = _curr$value2[1];
        var _value2 = callback(item, id3);
        if (_value2 < minValue) {
          minValue = _value2;
          minItem = item;
        }
      }
      return minItem;
    }
  }, {
    key: "reduce",
    value: function reduce5(callback, accumulator) {
      var _iterator10 = _createForOfIteratorHelper$2(this._pairs), _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
          var _step10$value = _slicedToArray(_step10.value, 2), id3 = _step10$value[0], item = _step10$value[1];
          accumulator = callback(accumulator, item, id3);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
      return accumulator;
    }
  }, {
    key: "sort",
    value: function sort$13(callback) {
      var _this = this;
      return new DataStream2(_defineProperty({}, iterator, function() {
        var _context9;
        return getIterator(sort2(_context9 = _toConsumableArray(_this._pairs)).call(_context9, function(_ref, _ref2) {
          var _ref3 = _slicedToArray(_ref, 2), idA = _ref3[0], itemA = _ref3[1];
          var _ref4 = _slicedToArray(_ref2, 2), idB = _ref4[0], itemB = _ref4[1];
          return callback(itemA, itemB, idA, idB);
        }));
      }));
    }
  }]);
  return DataStream2;
}();
function ownKeys2(object2, enumerableOnly) {
  var keys7 = keys$4(object2);
  if (getOwnPropertySymbols3) {
    var symbols = getOwnPropertySymbols3(object2);
    enumerableOnly && (symbols = filter2(symbols).call(symbols, function(sym) {
      return getOwnPropertyDescriptor5(object2, sym).enumerable;
    })), keys7.push.apply(keys7, symbols);
  }
  return keys7;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var _context10, _context11;
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? forEach$1(_context10 = ownKeys2(Object(source), true)).call(_context10, function(key) {
      _defineProperty(target, key, source[key]);
    }) : getOwnPropertyDescriptors2 ? defineProperties4(target, getOwnPropertyDescriptors2(source)) : forEach$1(_context11 = ownKeys2(Object(source))).call(_context11, function(key) {
      defineProperty$4(target, key, getOwnPropertyDescriptor5(source, key));
    });
  }
  return target;
}
function _createForOfIteratorHelper$1(o, allowArrayLike) {
  var it2 = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$1(o) || (it2 = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$1(o, minLen) {
  var _context9;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1(o, minLen);
  var n = slice2(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$3(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$1(o, minLen);
}
function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _createSuper$1(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = construct2(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct$1() {
  if (typeof Reflect === "undefined" || !construct2)
    return false;
  if (construct2.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct2(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function ensureFullItem(item, idProp) {
  if (item[idProp] == null) {
    item[idProp] = v4();
  }
  return item;
}
var DataSet = function(_DataSetPart) {
  _inherits(DataSet2, _DataSetPart);
  var _super = _createSuper$1(DataSet2);
  function DataSet2(data3, options2) {
    var _this;
    _classCallCheck(this, DataSet2);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "flush", void 0);
    _defineProperty(_assertThisInitialized(_this), "length", void 0);
    _defineProperty(_assertThisInitialized(_this), "_options", void 0);
    _defineProperty(_assertThisInitialized(_this), "_data", void 0);
    _defineProperty(_assertThisInitialized(_this), "_idProp", void 0);
    _defineProperty(_assertThisInitialized(_this), "_queue", null);
    if (data3 && !isArray$1(data3)) {
      options2 = data3;
      data3 = [];
    }
    _this._options = options2 || {};
    _this._data = new map2();
    _this.length = 0;
    _this._idProp = _this._options.fieldId || "id";
    if (data3 && data3.length) {
      _this.add(data3);
    }
    _this.setOptions(options2);
    return _this;
  }
  _createClass(DataSet2, [{
    key: "idProp",
    get: function get3() {
      return this._idProp;
    }
  }, {
    key: "setOptions",
    value: function setOptions(options2) {
      if (options2 && options2.queue !== void 0) {
        if (options2.queue === false) {
          if (this._queue) {
            this._queue.destroy();
            this._queue = null;
          }
        } else {
          if (!this._queue) {
            this._queue = Queue.extend(this, {
              replace: ["add", "update", "remove"]
            });
          }
          if (options2.queue && _typeof(options2.queue) === "object") {
            this._queue.setOptions(options2.queue);
          }
        }
      }
    }
  }, {
    key: "add",
    value: function add(data3, senderId) {
      var _this2 = this;
      var addedIds = [];
      var id3;
      if (isArray$1(data3)) {
        var idsToAdd = map$3(data3).call(data3, function(d) {
          return d[_this2._idProp];
        });
        if (some2(idsToAdd).call(idsToAdd, function(id4) {
          return _this2._data.has(id4);
        })) {
          throw new Error("A duplicate id was found in the parameter array.");
        }
        for (var i = 0, len = data3.length; i < len; i++) {
          id3 = this._addItem(data3[i]);
          addedIds.push(id3);
        }
      } else if (data3 && _typeof(data3) === "object") {
        id3 = this._addItem(data3);
        addedIds.push(id3);
      } else {
        throw new Error("Unknown dataType");
      }
      if (addedIds.length) {
        this._trigger("add", {
          items: addedIds
        }, senderId);
      }
      return addedIds;
    }
  }, {
    key: "update",
    value: function update(data3, senderId) {
      var _this3 = this;
      var addedIds = [];
      var updatedIds = [];
      var oldData = [];
      var updatedData = [];
      var idProp = this._idProp;
      var addOrUpdate = function addOrUpdate2(item) {
        var origId = item[idProp];
        if (origId != null && _this3._data.has(origId)) {
          var fullItem = item;
          var oldItem = assign$2({}, _this3._data.get(origId));
          var id3 = _this3._updateItem(fullItem);
          updatedIds.push(id3);
          updatedData.push(fullItem);
          oldData.push(oldItem);
        } else {
          var _id = _this3._addItem(item);
          addedIds.push(_id);
        }
      };
      if (isArray$1(data3)) {
        for (var i = 0, len = data3.length; i < len; i++) {
          if (data3[i] && _typeof(data3[i]) === "object") {
            addOrUpdate(data3[i]);
          } else {
            console.warn("Ignoring input item, which is not an object at index " + i);
          }
        }
      } else if (data3 && _typeof(data3) === "object") {
        addOrUpdate(data3);
      } else {
        throw new Error("Unknown dataType");
      }
      if (addedIds.length) {
        this._trigger("add", {
          items: addedIds
        }, senderId);
      }
      if (updatedIds.length) {
        var props = {
          items: updatedIds,
          oldData,
          data: updatedData
        };
        this._trigger("update", props, senderId);
      }
      return concat$1(addedIds).call(addedIds, updatedIds);
    }
  }, {
    key: "updateOnly",
    value: function updateOnly(data3, senderId) {
      var _context, _this4 = this;
      if (!isArray$1(data3)) {
        data3 = [data3];
      }
      var updateEventData = map$3(_context = map$3(data3).call(data3, function(update) {
        var oldData = _this4._data.get(update[_this4._idProp]);
        if (oldData == null) {
          throw new Error("Updating non-existent items is not allowed.");
        }
        return {
          oldData,
          update
        };
      })).call(_context, function(_ref) {
        var oldData = _ref.oldData, update = _ref.update;
        var id3 = oldData[_this4._idProp];
        var updatedData = pureDeepObjectAssign(oldData, update);
        _this4._data.set(id3, updatedData);
        return {
          id: id3,
          oldData,
          updatedData
        };
      });
      if (updateEventData.length) {
        var props = {
          items: map$3(updateEventData).call(updateEventData, function(value) {
            return value.id;
          }),
          oldData: map$3(updateEventData).call(updateEventData, function(value) {
            return value.oldData;
          }),
          data: map$3(updateEventData).call(updateEventData, function(value) {
            return value.updatedData;
          })
        };
        this._trigger("update", props, senderId);
        return props.items;
      } else {
        return [];
      }
    }
  }, {
    key: "get",
    value: function get3(first2, second) {
      var id3 = void 0;
      var ids = void 0;
      var options2 = void 0;
      if (isId(first2)) {
        id3 = first2;
        options2 = second;
      } else if (isArray$1(first2)) {
        ids = first2;
        options2 = second;
      } else {
        options2 = first2;
      }
      var returnType = options2 && options2.returnType === "Object" ? "Object" : "Array";
      var filter$13 = options2 && filter2(options2);
      var items = [];
      var item = void 0;
      var itemIds = void 0;
      var itemId = void 0;
      if (id3 != null) {
        item = this._data.get(id3);
        if (item && filter$13 && !filter$13(item)) {
          item = void 0;
        }
      } else if (ids != null) {
        for (var i = 0, len = ids.length; i < len; i++) {
          item = this._data.get(ids[i]);
          if (item != null && (!filter$13 || filter$13(item))) {
            items.push(item);
          }
        }
      } else {
        var _context2;
        itemIds = _toConsumableArray(keys3(_context2 = this._data).call(_context2));
        for (var _i = 0, _len = itemIds.length; _i < _len; _i++) {
          itemId = itemIds[_i];
          item = this._data.get(itemId);
          if (item != null && (!filter$13 || filter$13(item))) {
            items.push(item);
          }
        }
      }
      if (options2 && options2.order && id3 == void 0) {
        this._sort(items, options2.order);
      }
      if (options2 && options2.fields) {
        var fields = options2.fields;
        if (id3 != void 0 && item != null) {
          item = this._filterFields(item, fields);
        } else {
          for (var _i2 = 0, _len2 = items.length; _i2 < _len2; _i2++) {
            items[_i2] = this._filterFields(items[_i2], fields);
          }
        }
      }
      if (returnType == "Object") {
        var result = {};
        for (var _i3 = 0, _len3 = items.length; _i3 < _len3; _i3++) {
          var resultant = items[_i3];
          var _id2 = resultant[this._idProp];
          result[_id2] = resultant;
        }
        return result;
      } else {
        if (id3 != null) {
          var _item;
          return (_item = item) !== null && _item !== void 0 ? _item : null;
        } else {
          return items;
        }
      }
    }
  }, {
    key: "getIds",
    value: function getIds(options2) {
      var data3 = this._data;
      var filter$13 = options2 && filter2(options2);
      var order = options2 && options2.order;
      var itemIds = _toConsumableArray(keys3(data3).call(data3));
      var ids = [];
      if (filter$13) {
        if (order) {
          var items = [];
          for (var i = 0, len = itemIds.length; i < len; i++) {
            var id3 = itemIds[i];
            var item = this._data.get(id3);
            if (item != null && filter$13(item)) {
              items.push(item);
            }
          }
          this._sort(items, order);
          for (var _i4 = 0, _len4 = items.length; _i4 < _len4; _i4++) {
            ids.push(items[_i4][this._idProp]);
          }
        } else {
          for (var _i5 = 0, _len5 = itemIds.length; _i5 < _len5; _i5++) {
            var _id3 = itemIds[_i5];
            var _item2 = this._data.get(_id3);
            if (_item2 != null && filter$13(_item2)) {
              ids.push(_item2[this._idProp]);
            }
          }
        }
      } else {
        if (order) {
          var _items = [];
          for (var _i6 = 0, _len6 = itemIds.length; _i6 < _len6; _i6++) {
            var _id4 = itemIds[_i6];
            _items.push(data3.get(_id4));
          }
          this._sort(_items, order);
          for (var _i7 = 0, _len7 = _items.length; _i7 < _len7; _i7++) {
            ids.push(_items[_i7][this._idProp]);
          }
        } else {
          for (var _i8 = 0, _len8 = itemIds.length; _i8 < _len8; _i8++) {
            var _id5 = itemIds[_i8];
            var _item3 = data3.get(_id5);
            if (_item3 != null) {
              ids.push(_item3[this._idProp]);
            }
          }
        }
      }
      return ids;
    }
  }, {
    key: "getDataSet",
    value: function getDataSet() {
      return this;
    }
  }, {
    key: "forEach",
    value: function forEach5(callback, options2) {
      var filter$13 = options2 && filter2(options2);
      var data3 = this._data;
      var itemIds = _toConsumableArray(keys3(data3).call(data3));
      if (options2 && options2.order) {
        var items = this.get(options2);
        for (var i = 0, len = items.length; i < len; i++) {
          var item = items[i];
          var id3 = item[this._idProp];
          callback(item, id3);
        }
      } else {
        for (var _i9 = 0, _len9 = itemIds.length; _i9 < _len9; _i9++) {
          var _id6 = itemIds[_i9];
          var _item4 = this._data.get(_id6);
          if (_item4 != null && (!filter$13 || filter$13(_item4))) {
            callback(_item4, _id6);
          }
        }
      }
    }
  }, {
    key: "map",
    value: function map5(callback, options2) {
      var filter$13 = options2 && filter2(options2);
      var mappedItems = [];
      var data3 = this._data;
      var itemIds = _toConsumableArray(keys3(data3).call(data3));
      for (var i = 0, len = itemIds.length; i < len; i++) {
        var id3 = itemIds[i];
        var item = this._data.get(id3);
        if (item != null && (!filter$13 || filter$13(item))) {
          mappedItems.push(callback(item, id3));
        }
      }
      if (options2 && options2.order) {
        this._sort(mappedItems, options2.order);
      }
      return mappedItems;
    }
  }, {
    key: "_filterFields",
    value: function _filterFields(item, fields) {
      var _context3;
      if (!item) {
        return item;
      }
      return reduce2(_context3 = isArray$1(fields) ? fields : keys$4(fields)).call(_context3, function(filteredItem, field) {
        filteredItem[field] = item[field];
        return filteredItem;
      }, {});
    }
  }, {
    key: "_sort",
    value: function _sort(items, order) {
      if (typeof order === "string") {
        var name = order;
        sort2(items).call(items, function(a, b) {
          var av = a[name];
          var bv = b[name];
          return av > bv ? 1 : av < bv ? -1 : 0;
        });
      } else if (typeof order === "function") {
        sort2(items).call(items, order);
      } else {
        throw new TypeError("Order must be a function or a string");
      }
    }
  }, {
    key: "remove",
    value: function remove(id3, senderId) {
      var removedIds = [];
      var removedItems = [];
      var ids = isArray$1(id3) ? id3 : [id3];
      for (var i = 0, len = ids.length; i < len; i++) {
        var item = this._remove(ids[i]);
        if (item) {
          var itemId = item[this._idProp];
          if (itemId != null) {
            removedIds.push(itemId);
            removedItems.push(item);
          }
        }
      }
      if (removedIds.length) {
        this._trigger("remove", {
          items: removedIds,
          oldData: removedItems
        }, senderId);
      }
      return removedIds;
    }
  }, {
    key: "_remove",
    value: function _remove(id3) {
      var ident;
      if (isId(id3)) {
        ident = id3;
      } else if (id3 && _typeof(id3) === "object") {
        ident = id3[this._idProp];
      }
      if (ident != null && this._data.has(ident)) {
        var item = this._data.get(ident) || null;
        this._data.delete(ident);
        --this.length;
        return item;
      }
      return null;
    }
  }, {
    key: "clear",
    value: function clear(senderId) {
      var _context4;
      var ids = _toConsumableArray(keys3(_context4 = this._data).call(_context4));
      var items = [];
      for (var i = 0, len = ids.length; i < len; i++) {
        items.push(this._data.get(ids[i]));
      }
      this._data.clear();
      this.length = 0;
      this._trigger("remove", {
        items: ids,
        oldData: items
      }, senderId);
      return ids;
    }
  }, {
    key: "max",
    value: function max3(field) {
      var _context5;
      var max4 = null;
      var maxField = null;
      var _iterator = _createForOfIteratorHelper$1(values2(_context5 = this._data).call(_context5)), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var item = _step.value;
          var itemField = item[field];
          if (typeof itemField === "number" && (maxField == null || itemField > maxField)) {
            max4 = item;
            maxField = itemField;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return max4 || null;
    }
  }, {
    key: "min",
    value: function min3(field) {
      var _context6;
      var min4 = null;
      var minField = null;
      var _iterator2 = _createForOfIteratorHelper$1(values2(_context6 = this._data).call(_context6)), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var item = _step2.value;
          var itemField = item[field];
          if (typeof itemField === "number" && (minField == null || itemField < minField)) {
            min4 = item;
            minField = itemField;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return min4 || null;
    }
  }, {
    key: "distinct",
    value: function distinct(prop) {
      var data3 = this._data;
      var itemIds = _toConsumableArray(keys3(data3).call(data3));
      var values5 = [];
      var count = 0;
      for (var i = 0, len = itemIds.length; i < len; i++) {
        var id3 = itemIds[i];
        var item = data3.get(id3);
        var value = item[prop];
        var exists = false;
        for (var j = 0; j < count; j++) {
          if (values5[j] == value) {
            exists = true;
            break;
          }
        }
        if (!exists && value !== void 0) {
          values5[count] = value;
          count++;
        }
      }
      return values5;
    }
  }, {
    key: "_addItem",
    value: function _addItem(item) {
      var fullItem = ensureFullItem(item, this._idProp);
      var id3 = fullItem[this._idProp];
      if (this._data.has(id3)) {
        throw new Error("Cannot add item: item with id " + id3 + " already exists");
      }
      this._data.set(id3, fullItem);
      ++this.length;
      return id3;
    }
  }, {
    key: "_updateItem",
    value: function _updateItem(update) {
      var id3 = update[this._idProp];
      if (id3 == null) {
        throw new Error("Cannot update item: item has no id (item: " + stringify$1(update) + ")");
      }
      var item = this._data.get(id3);
      if (!item) {
        throw new Error("Cannot update item: no item with id " + id3 + " found");
      }
      this._data.set(id3, _objectSpread(_objectSpread({}, item), update));
      return id3;
    }
  }, {
    key: "stream",
    value: function stream(ids) {
      if (ids) {
        var data3 = this._data;
        return new DataStream(_defineProperty({}, iterator, regenerator.mark(function _callee() {
          var _iterator3, _step3, id3, item;
          return regenerator.wrap(function _callee$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _iterator3 = _createForOfIteratorHelper$1(ids);
                  _context7.prev = 1;
                  _iterator3.s();
                case 3:
                  if ((_step3 = _iterator3.n()).done) {
                    _context7.next = 11;
                    break;
                  }
                  id3 = _step3.value;
                  item = data3.get(id3);
                  if (!(item != null)) {
                    _context7.next = 9;
                    break;
                  }
                  _context7.next = 9;
                  return [id3, item];
                case 9:
                  _context7.next = 3;
                  break;
                case 11:
                  _context7.next = 16;
                  break;
                case 13:
                  _context7.prev = 13;
                  _context7.t0 = _context7["catch"](1);
                  _iterator3.e(_context7.t0);
                case 16:
                  _context7.prev = 16;
                  _iterator3.f();
                  return _context7.finish(16);
                case 19:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee, null, [[1, 13, 16, 19]]);
        })));
      } else {
        var _context8;
        return new DataStream(_defineProperty({}, iterator, bind$6(_context8 = entries(this._data)).call(_context8, this._data)));
      }
    }
  }]);
  return DataSet2;
}(DataSetPart);
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it2 = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$1(o) || (it2 = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray(o, minLen) {
  var _context5;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = slice2(_context5 = Object.prototype.toString.call(o)).call(_context5, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$3(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = construct2(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !construct2)
    return false;
  if (construct2.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct2(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var DataView = function(_DataSetPart) {
  _inherits(DataView2, _DataSetPart);
  var _super = _createSuper(DataView2);
  function DataView2(data3, options2) {
    var _context;
    var _this;
    _classCallCheck(this, DataView2);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "length", 0);
    _defineProperty(_assertThisInitialized(_this), "_listener", void 0);
    _defineProperty(_assertThisInitialized(_this), "_data", void 0);
    _defineProperty(_assertThisInitialized(_this), "_ids", new set());
    _defineProperty(_assertThisInitialized(_this), "_options", void 0);
    _this._options = options2 || {};
    _this._listener = bind$6(_context = _this._onEvent).call(_context, _assertThisInitialized(_this));
    _this.setData(data3);
    return _this;
  }
  _createClass(DataView2, [{
    key: "idProp",
    get: function get3() {
      return this.getDataSet().idProp;
    }
  }, {
    key: "setData",
    value: function setData(data3) {
      if (this._data) {
        if (this._data.off) {
          this._data.off("*", this._listener);
        }
        var ids = this._data.getIds({
          filter: filter2(this._options)
        });
        var items = this._data.get(ids);
        this._ids.clear();
        this.length = 0;
        this._trigger("remove", {
          items: ids,
          oldData: items
        });
      }
      if (data3 != null) {
        this._data = data3;
        var _ids = this._data.getIds({
          filter: filter2(this._options)
        });
        for (var i = 0, len = _ids.length; i < len; i++) {
          var id3 = _ids[i];
          this._ids.add(id3);
        }
        this.length = _ids.length;
        this._trigger("add", {
          items: _ids
        });
      } else {
        this._data = new DataSet();
      }
      if (this._data.on) {
        this._data.on("*", this._listener);
      }
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var ids = this._data.getIds({
        filter: filter2(this._options)
      });
      var oldIds = _toConsumableArray(this._ids);
      var newIds = {};
      var addedIds = [];
      var removedIds = [];
      var removedItems = [];
      for (var i = 0, len = ids.length; i < len; i++) {
        var id3 = ids[i];
        newIds[id3] = true;
        if (!this._ids.has(id3)) {
          addedIds.push(id3);
          this._ids.add(id3);
        }
      }
      for (var _i = 0, _len = oldIds.length; _i < _len; _i++) {
        var _id = oldIds[_i];
        var item = this._data.get(_id);
        if (item == null) {
          console.error("If you see this, report it please.");
        } else if (!newIds[_id]) {
          removedIds.push(_id);
          removedItems.push(item);
          this._ids.delete(_id);
        }
      }
      this.length += addedIds.length - removedIds.length;
      if (addedIds.length) {
        this._trigger("add", {
          items: addedIds
        });
      }
      if (removedIds.length) {
        this._trigger("remove", {
          items: removedIds,
          oldData: removedItems
        });
      }
    }
  }, {
    key: "get",
    value: function get3(first2, second) {
      if (this._data == null) {
        return null;
      }
      var ids = null;
      var options2;
      if (isId(first2) || isArray$1(first2)) {
        ids = first2;
        options2 = second;
      } else {
        options2 = first2;
      }
      var viewOptions = assign$2({}, this._options, options2);
      var thisFilter = filter2(this._options);
      var optionsFilter = options2 && filter2(options2);
      if (thisFilter && optionsFilter) {
        viewOptions.filter = function(item) {
          return thisFilter(item) && optionsFilter(item);
        };
      }
      if (ids == null) {
        return this._data.get(viewOptions);
      } else {
        return this._data.get(ids, viewOptions);
      }
    }
  }, {
    key: "getIds",
    value: function getIds(options2) {
      if (this._data.length) {
        var defaultFilter = filter2(this._options);
        var optionsFilter = options2 != null ? filter2(options2) : null;
        var filter$13;
        if (optionsFilter) {
          if (defaultFilter) {
            filter$13 = function filter5(item) {
              return defaultFilter(item) && optionsFilter(item);
            };
          } else {
            filter$13 = optionsFilter;
          }
        } else {
          filter$13 = defaultFilter;
        }
        return this._data.getIds({
          filter: filter$13,
          order: options2 && options2.order
        });
      } else {
        return [];
      }
    }
  }, {
    key: "forEach",
    value: function forEach5(callback, options2) {
      if (this._data) {
        var _context2;
        var defaultFilter = filter2(this._options);
        var optionsFilter = options2 && filter2(options2);
        var filter$13;
        if (optionsFilter) {
          if (defaultFilter) {
            filter$13 = function filter5(item) {
              return defaultFilter(item) && optionsFilter(item);
            };
          } else {
            filter$13 = optionsFilter;
          }
        } else {
          filter$13 = defaultFilter;
        }
        forEach$1(_context2 = this._data).call(_context2, callback, {
          filter: filter$13,
          order: options2 && options2.order
        });
      }
    }
  }, {
    key: "map",
    value: function map5(callback, options2) {
      if (this._data) {
        var _context3;
        var defaultFilter = filter2(this._options);
        var optionsFilter = options2 && filter2(options2);
        var filter$13;
        if (optionsFilter) {
          if (defaultFilter) {
            filter$13 = function filter5(item) {
              return defaultFilter(item) && optionsFilter(item);
            };
          } else {
            filter$13 = optionsFilter;
          }
        } else {
          filter$13 = defaultFilter;
        }
        return map$3(_context3 = this._data).call(_context3, callback, {
          filter: filter$13,
          order: options2 && options2.order
        });
      } else {
        return [];
      }
    }
  }, {
    key: "getDataSet",
    value: function getDataSet() {
      return this._data.getDataSet();
    }
  }, {
    key: "stream",
    value: function stream(ids) {
      var _context4;
      return this._data.stream(ids || _defineProperty({}, iterator, bind$6(_context4 = keys3(this._ids)).call(_context4, this._ids)));
    }
  }, {
    key: "dispose",
    value: function dispose() {
      var _this$_data;
      if ((_this$_data = this._data) !== null && _this$_data !== void 0 && _this$_data.off) {
        this._data.off("*", this._listener);
      }
      var message = "This data view has already been disposed of.";
      var replacement3 = {
        get: function get3() {
          throw new Error(message);
        },
        set: function set3() {
          throw new Error(message);
        },
        configurable: false
      };
      var _iterator = _createForOfIteratorHelper(ownKeys$1(DataView2.prototype)), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var key = _step.value;
          defineProperty$4(this, key, replacement3);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "_onEvent",
    value: function _onEvent(event, params, senderId) {
      if (!params || !params.items || !this._data) {
        return;
      }
      var ids = params.items;
      var addedIds = [];
      var updatedIds = [];
      var removedIds = [];
      var oldItems = [];
      var updatedItems = [];
      var removedItems = [];
      switch (event) {
        case "add":
          for (var i = 0, len = ids.length; i < len; i++) {
            var id3 = ids[i];
            var item = this.get(id3);
            if (item) {
              this._ids.add(id3);
              addedIds.push(id3);
            }
          }
          break;
        case "update":
          for (var _i2 = 0, _len2 = ids.length; _i2 < _len2; _i2++) {
            var _id2 = ids[_i2];
            var _item = this.get(_id2);
            if (_item) {
              if (this._ids.has(_id2)) {
                updatedIds.push(_id2);
                updatedItems.push(params.data[_i2]);
                oldItems.push(params.oldData[_i2]);
              } else {
                this._ids.add(_id2);
                addedIds.push(_id2);
              }
            } else {
              if (this._ids.has(_id2)) {
                this._ids.delete(_id2);
                removedIds.push(_id2);
                removedItems.push(params.oldData[_i2]);
              }
            }
          }
          break;
        case "remove":
          for (var _i3 = 0, _len3 = ids.length; _i3 < _len3; _i3++) {
            var _id3 = ids[_i3];
            if (this._ids.has(_id3)) {
              this._ids.delete(_id3);
              removedIds.push(_id3);
              removedItems.push(params.oldData[_i3]);
            }
          }
          break;
      }
      this.length += addedIds.length - removedIds.length;
      if (addedIds.length) {
        this._trigger("add", {
          items: addedIds
        }, senderId);
      }
      if (updatedIds.length) {
        this._trigger("update", {
          items: updatedIds,
          oldData: oldItems,
          data: updatedItems
        }, senderId);
      }
      if (removedIds.length) {
        this._trigger("remove", {
          items: removedIds,
          oldData: removedItems
        }, senderId);
      }
    }
  }]);
  return DataView2;
}(DataSetPart);
function isDataSetLike(idProp, v) {
  return _typeof(v) === "object" && v !== null && idProp === v.idProp && typeof v.add === "function" && typeof v.clear === "function" && typeof v.distinct === "function" && typeof forEach$1(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof map$3(v) === "function" && typeof v.max === "function" && typeof v.min === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.remove === "function" && typeof v.setOptions === "function" && typeof v.stream === "function" && typeof v.update === "function" && typeof v.updateOnly === "function";
}
function isDataViewLike(idProp, v) {
  return _typeof(v) === "object" && v !== null && idProp === v.idProp && typeof forEach$1(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof map$3(v) === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.stream === "function" && isDataSetLike(idProp, v.getDataSet());
}

// node_modules/vis-network/peer/esm/vis-network.js
var commonjsGlobal2 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var check2 = function(it2) {
  return it2 && it2.Math == Math && it2;
};
var global$O = check2(typeof globalThis == "object" && globalThis) || check2(typeof window == "object" && window) || check2(typeof self == "object" && self) || check2(typeof commonjsGlobal2 == "object" && commonjsGlobal2) || function() {
  return this;
}() || Function("return this")();
var fails$t = function(exec3) {
  try {
    return !!exec3();
  } catch (error) {
    return true;
  }
};
var fails$s = fails$t;
var functionBindNative2 = !fails$s(function() {
  var test3 = function() {
  }.bind();
  return typeof test3 != "function" || test3.hasOwnProperty("prototype");
});
var NATIVE_BIND$42 = functionBindNative2;
var FunctionPrototype$32 = Function.prototype;
var apply$62 = FunctionPrototype$32.apply;
var call$d = FunctionPrototype$32.call;
var functionApply2 = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND$42 ? call$d.bind(apply$62) : function() {
  return call$d.apply(apply$62, arguments);
});
var NATIVE_BIND$32 = functionBindNative2;
var FunctionPrototype$22 = Function.prototype;
var bind$c2 = FunctionPrototype$22.bind;
var call$c2 = FunctionPrototype$22.call;
var uncurryThis$w = NATIVE_BIND$32 && bind$c2.bind(call$c2, call$c2);
var functionUncurryThis2 = NATIVE_BIND$32 ? function(fn) {
  return fn && uncurryThis$w(fn);
} : function(fn) {
  return fn && function() {
    return call$c2.apply(fn, arguments);
  };
};
var isCallable$h2 = function(argument) {
  return typeof argument == "function";
};
var objectGetOwnPropertyDescriptor2 = {};
var fails$r2 = fails$t;
var descriptors2 = !fails$r2(function() {
  return Object.defineProperty({}, 1, {
    get: function() {
      return 7;
    }
  })[1] != 7;
});
var NATIVE_BIND$22 = functionBindNative2;
var call$b2 = Function.prototype.call;
var functionCall2 = NATIVE_BIND$22 ? call$b2.bind(call$b2) : function() {
  return call$b2.apply(call$b2, arguments);
};
var objectPropertyIsEnumerable2 = {};
var $propertyIsEnumerable$22 = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor$8 = Object.getOwnPropertyDescriptor;
var NASHORN_BUG2 = getOwnPropertyDescriptor$8 && !$propertyIsEnumerable$22.call({
  1: 2
}, 1);
objectPropertyIsEnumerable2.f = NASHORN_BUG2 ? function propertyIsEnumerable4(V) {
  var descriptor = getOwnPropertyDescriptor$8(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable$22;
var createPropertyDescriptor$52 = function(bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value
  };
};
var uncurryThis$v = functionUncurryThis2;
var toString$a = uncurryThis$v({}.toString);
var stringSlice$12 = uncurryThis$v("".slice);
var classofRaw$12 = function(it2) {
  return stringSlice$12(toString$a(it2), 8, -1);
};
var global$N = global$O;
var uncurryThis$u = functionUncurryThis2;
var fails$q2 = fails$t;
var classof$d2 = classofRaw$12;
var Object$a = global$N.Object;
var split2 = uncurryThis$u("".split);
var indexedObject2 = fails$q2(function() {
  return !Object$a("z").propertyIsEnumerable(0);
}) ? function(it2) {
  return classof$d2(it2) == "String" ? split2(it2, "") : Object$a(it2);
} : Object$a;
var global$M2 = global$O;
var TypeError$i2 = global$M2.TypeError;
var requireObjectCoercible$52 = function(it2) {
  if (it2 == void 0)
    throw TypeError$i2("Can't call method on " + it2);
  return it2;
};
var IndexedObject$32 = indexedObject2;
var requireObjectCoercible$42 = requireObjectCoercible$52;
var toIndexedObject$b2 = function(it2) {
  return IndexedObject$32(requireObjectCoercible$42(it2));
};
var isCallable$g2 = isCallable$h2;
var isObject$j = function(it2) {
  return typeof it2 == "object" ? it2 !== null : isCallable$g2(it2);
};
var path$y = {};
var path$x = path$y;
var global$L2 = global$O;
var isCallable$f2 = isCallable$h2;
var aFunction2 = function(variable) {
  return isCallable$f2(variable) ? variable : void 0;
};
var getBuiltIn$92 = function(namespace, method3) {
  return arguments.length < 2 ? aFunction2(path$x[namespace]) || aFunction2(global$L2[namespace]) : path$x[namespace] && path$x[namespace][method3] || global$L2[namespace] && global$L2[namespace][method3];
};
var uncurryThis$t2 = functionUncurryThis2;
var objectIsPrototypeOf2 = uncurryThis$t2({}.isPrototypeOf);
var getBuiltIn$82 = getBuiltIn$92;
var engineUserAgent2 = getBuiltIn$82("navigator", "userAgent") || "";
var global$K2 = global$O;
var userAgent$32 = engineUserAgent2;
var process2 = global$K2.process;
var Deno2 = global$K2.Deno;
var versions2 = process2 && process2.versions || Deno2 && Deno2.version;
var v82 = versions2 && versions2.v8;
var match2;
var version2;
if (v82) {
  match2 = v82.split(".");
  version2 = match2[0] > 0 && match2[0] < 4 ? 1 : +(match2[0] + match2[1]);
}
if (!version2 && userAgent$32) {
  match2 = userAgent$32.match(/Edge\/(\d+)/);
  if (!match2 || match2[1] >= 74) {
    match2 = userAgent$32.match(/Chrome\/(\d+)/);
    if (match2)
      version2 = +match2[1];
  }
}
var engineV8Version2 = version2;
var V8_VERSION$22 = engineV8Version2;
var fails$p2 = fails$t;
var nativeSymbol2 = !!Object.getOwnPropertySymbols && !fails$p2(function() {
  var symbol3 = Symbol();
  return !String(symbol3) || !(Object(symbol3) instanceof Symbol) || !Symbol.sham && V8_VERSION$22 && V8_VERSION$22 < 41;
});
var NATIVE_SYMBOL$22 = nativeSymbol2;
var useSymbolAsUid2 = NATIVE_SYMBOL$22 && !Symbol.sham && typeof Symbol.iterator == "symbol";
var global$J2 = global$O;
var getBuiltIn$72 = getBuiltIn$92;
var isCallable$e2 = isCallable$h2;
var isPrototypeOf$j = objectIsPrototypeOf2;
var USE_SYMBOL_AS_UID$12 = useSymbolAsUid2;
var Object$92 = global$J2.Object;
var isSymbol$32 = USE_SYMBOL_AS_UID$12 ? function(it2) {
  return typeof it2 == "symbol";
} : function(it2) {
  var $Symbol3 = getBuiltIn$72("Symbol");
  return isCallable$e2($Symbol3) && isPrototypeOf$j($Symbol3.prototype, Object$92(it2));
};
var global$I2 = global$O;
var String$42 = global$I2.String;
var tryToString$42 = function(argument) {
  try {
    return String$42(argument);
  } catch (error) {
    return "Object";
  }
};
var global$H2 = global$O;
var isCallable$d2 = isCallable$h2;
var tryToString$32 = tryToString$42;
var TypeError$h2 = global$H2.TypeError;
var aCallable$62 = function(argument) {
  if (isCallable$d2(argument))
    return argument;
  throw TypeError$h2(tryToString$32(argument) + " is not a function");
};
var aCallable$52 = aCallable$62;
var getMethod$32 = function(V, P) {
  var func = V[P];
  return func == null ? void 0 : aCallable$52(func);
};
var global$G2 = global$O;
var call$a2 = functionCall2;
var isCallable$c2 = isCallable$h2;
var isObject$i = isObject$j;
var TypeError$g2 = global$G2.TypeError;
var ordinaryToPrimitive$12 = function(input, pref) {
  var fn, val;
  if (pref === "string" && isCallable$c2(fn = input.toString) && !isObject$i(val = call$a2(fn, input)))
    return val;
  if (isCallable$c2(fn = input.valueOf) && !isObject$i(val = call$a2(fn, input)))
    return val;
  if (pref !== "string" && isCallable$c2(fn = input.toString) && !isObject$i(val = call$a2(fn, input)))
    return val;
  throw TypeError$g2("Can't convert object to primitive value");
};
var shared$42 = { exports: {} };
var global$F2 = global$O;
var defineProperty$e2 = Object.defineProperty;
var setGlobal$12 = function(key, value) {
  try {
    defineProperty$e2(global$F2, key, {
      value,
      configurable: true,
      writable: true
    });
  } catch (error) {
    global$F2[key] = value;
  }
  return value;
};
var global$E2 = global$O;
var setGlobal2 = setGlobal$12;
var SHARED2 = "__core-js_shared__";
var store$32 = global$E2[SHARED2] || setGlobal2(SHARED2, {});
var sharedStore2 = store$32;
var store$22 = sharedStore2;
(shared$42.exports = function(key, value) {
  return store$22[key] || (store$22[key] = value !== void 0 ? value : {});
})("versions", []).push({
  version: "3.21.1",
  mode: "pure",
  copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
  license: "https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",
  source: "https://github.com/zloirock/core-js"
});
var global$D2 = global$O;
var requireObjectCoercible$32 = requireObjectCoercible$52;
var Object$82 = global$D2.Object;
var toObject$d2 = function(argument) {
  return Object$82(requireObjectCoercible$32(argument));
};
var uncurryThis$s2 = functionUncurryThis2;
var toObject$c2 = toObject$d2;
var hasOwnProperty2 = uncurryThis$s2({}.hasOwnProperty);
var hasOwnProperty_12 = Object.hasOwn || function hasOwn3(it2, key) {
  return hasOwnProperty2(toObject$c2(it2), key);
};
var uncurryThis$r2 = functionUncurryThis2;
var id$2 = 0;
var postfix2 = Math.random();
var toString$92 = uncurryThis$r2(1 .toString);
var uid$42 = function(key) {
  return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString$92(++id$2 + postfix2, 36);
};
var global$C2 = global$O;
var shared$32 = shared$42.exports;
var hasOwn$f2 = hasOwnProperty_12;
var uid$32 = uid$42;
var NATIVE_SYMBOL$12 = nativeSymbol2;
var USE_SYMBOL_AS_UID2 = useSymbolAsUid2;
var WellKnownSymbolsStore$12 = shared$32("wks");
var Symbol$3 = global$C2.Symbol;
var symbolFor2 = Symbol$3 && Symbol$3["for"];
var createWellKnownSymbol2 = USE_SYMBOL_AS_UID2 ? Symbol$3 : Symbol$3 && Symbol$3.withoutSetter || uid$32;
var wellKnownSymbol$j2 = function(name) {
  if (!hasOwn$f2(WellKnownSymbolsStore$12, name) || !(NATIVE_SYMBOL$12 || typeof WellKnownSymbolsStore$12[name] == "string")) {
    var description = "Symbol." + name;
    if (NATIVE_SYMBOL$12 && hasOwn$f2(Symbol$3, name)) {
      WellKnownSymbolsStore$12[name] = Symbol$3[name];
    } else if (USE_SYMBOL_AS_UID2 && symbolFor2) {
      WellKnownSymbolsStore$12[name] = symbolFor2(description);
    } else {
      WellKnownSymbolsStore$12[name] = createWellKnownSymbol2(description);
    }
  }
  return WellKnownSymbolsStore$12[name];
};
var global$B2 = global$O;
var call$92 = functionCall2;
var isObject$h = isObject$j;
var isSymbol$22 = isSymbol$32;
var getMethod$22 = getMethod$32;
var ordinaryToPrimitive2 = ordinaryToPrimitive$12;
var wellKnownSymbol$i2 = wellKnownSymbol$j2;
var TypeError$f2 = global$B2.TypeError;
var TO_PRIMITIVE$12 = wellKnownSymbol$i2("toPrimitive");
var toPrimitive$12 = function(input, pref) {
  if (!isObject$h(input) || isSymbol$22(input))
    return input;
  var exoticToPrim = getMethod$22(input, TO_PRIMITIVE$12);
  var result;
  if (exoticToPrim) {
    if (pref === void 0)
      pref = "default";
    result = call$92(exoticToPrim, input, pref);
    if (!isObject$h(result) || isSymbol$22(result))
      return result;
    throw TypeError$f2("Can't convert object to primitive value");
  }
  if (pref === void 0)
    pref = "number";
  return ordinaryToPrimitive2(input, pref);
};
var toPrimitive2 = toPrimitive$12;
var isSymbol$12 = isSymbol$32;
var toPropertyKey$42 = function(argument) {
  var key = toPrimitive2(argument, "string");
  return isSymbol$12(key) ? key : key + "";
};
var global$A2 = global$O;
var isObject$g = isObject$j;
var document$12 = global$A2.document;
var EXISTS$12 = isObject$g(document$12) && isObject$g(document$12.createElement);
var documentCreateElement$12 = function(it2) {
  return EXISTS$12 ? document$12.createElement(it2) : {};
};
var DESCRIPTORS$h2 = descriptors2;
var fails$o2 = fails$t;
var createElement2 = documentCreateElement$12;
var ie8DomDefine2 = !DESCRIPTORS$h2 && !fails$o2(function() {
  return Object.defineProperty(createElement2("div"), "a", {
    get: function() {
      return 7;
    }
  }).a != 7;
});
var DESCRIPTORS$g2 = descriptors2;
var call$82 = functionCall2;
var propertyIsEnumerableModule$22 = objectPropertyIsEnumerable2;
var createPropertyDescriptor$42 = createPropertyDescriptor$52;
var toIndexedObject$a2 = toIndexedObject$b2;
var toPropertyKey$32 = toPropertyKey$42;
var hasOwn$e2 = hasOwnProperty_12;
var IE8_DOM_DEFINE$12 = ie8DomDefine2;
var $getOwnPropertyDescriptor$22 = Object.getOwnPropertyDescriptor;
objectGetOwnPropertyDescriptor2.f = DESCRIPTORS$g2 ? $getOwnPropertyDescriptor$22 : function getOwnPropertyDescriptor6(O, P) {
  O = toIndexedObject$a2(O);
  P = toPropertyKey$32(P);
  if (IE8_DOM_DEFINE$12)
    try {
      return $getOwnPropertyDescriptor$22(O, P);
    } catch (error) {
    }
  if (hasOwn$e2(O, P))
    return createPropertyDescriptor$42(!call$82(propertyIsEnumerableModule$22.f, O, P), O[P]);
};
var fails$n2 = fails$t;
var isCallable$b2 = isCallable$h2;
var replacement2 = /#|\.prototype\./;
var isForced$12 = function(feature, detection) {
  var value = data2[normalize2(feature)];
  return value == POLYFILL2 ? true : value == NATIVE2 ? false : isCallable$b2(detection) ? fails$n2(detection) : !!detection;
};
var normalize2 = isForced$12.normalize = function(string2) {
  return String(string2).replace(replacement2, ".").toLowerCase();
};
var data2 = isForced$12.data = {};
var NATIVE2 = isForced$12.NATIVE = "N";
var POLYFILL2 = isForced$12.POLYFILL = "P";
var isForced_12 = isForced$12;
var uncurryThis$q2 = functionUncurryThis2;
var aCallable$42 = aCallable$62;
var NATIVE_BIND$12 = functionBindNative2;
var bind$b2 = uncurryThis$q2(uncurryThis$q2.bind);
var functionBindContext2 = function(fn, that) {
  aCallable$42(fn);
  return that === void 0 ? fn : NATIVE_BIND$12 ? bind$b2(fn, that) : function() {
    return fn.apply(that, arguments);
  };
};
var objectDefineProperty2 = {};
var DESCRIPTORS$f2 = descriptors2;
var fails$m2 = fails$t;
var v8PrototypeDefineBug2 = DESCRIPTORS$f2 && fails$m2(function() {
  return Object.defineProperty(function() {
  }, "prototype", {
    value: 42,
    writable: false
  }).prototype != 42;
});
var global$z2 = global$O;
var isObject$f2 = isObject$j;
var String$32 = global$z2.String;
var TypeError$e2 = global$z2.TypeError;
var anObject$d = function(argument) {
  if (isObject$f2(argument))
    return argument;
  throw TypeError$e2(String$32(argument) + " is not an object");
};
var global$y2 = global$O;
var DESCRIPTORS$e2 = descriptors2;
var IE8_DOM_DEFINE2 = ie8DomDefine2;
var V8_PROTOTYPE_DEFINE_BUG$12 = v8PrototypeDefineBug2;
var anObject$c = anObject$d;
var toPropertyKey$22 = toPropertyKey$42;
var TypeError$d2 = global$y2.TypeError;
var $defineProperty$12 = Object.defineProperty;
var $getOwnPropertyDescriptor$12 = Object.getOwnPropertyDescriptor;
var ENUMERABLE2 = "enumerable";
var CONFIGURABLE$12 = "configurable";
var WRITABLE2 = "writable";
objectDefineProperty2.f = DESCRIPTORS$e2 ? V8_PROTOTYPE_DEFINE_BUG$12 ? function defineProperty6(O, P, Attributes) {
  anObject$c(O);
  P = toPropertyKey$22(P);
  anObject$c(Attributes);
  if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE2 in Attributes && !Attributes[WRITABLE2]) {
    var current = $getOwnPropertyDescriptor$12(O, P);
    if (current && current[WRITABLE2]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE$12 in Attributes ? Attributes[CONFIGURABLE$12] : current[CONFIGURABLE$12],
        enumerable: ENUMERABLE2 in Attributes ? Attributes[ENUMERABLE2] : current[ENUMERABLE2],
        writable: false
      };
    }
  }
  return $defineProperty$12(O, P, Attributes);
} : $defineProperty$12 : function defineProperty7(O, P, Attributes) {
  anObject$c(O);
  P = toPropertyKey$22(P);
  anObject$c(Attributes);
  if (IE8_DOM_DEFINE2)
    try {
      return $defineProperty$12(O, P, Attributes);
    } catch (error) {
    }
  if ("get" in Attributes || "set" in Attributes)
    throw TypeError$d2("Accessors not supported");
  if ("value" in Attributes)
    O[P] = Attributes.value;
  return O;
};
var DESCRIPTORS$d2 = descriptors2;
var definePropertyModule$42 = objectDefineProperty2;
var createPropertyDescriptor$32 = createPropertyDescriptor$52;
var createNonEnumerableProperty$62 = DESCRIPTORS$d2 ? function(object2, key, value) {
  return definePropertyModule$42.f(object2, key, createPropertyDescriptor$32(1, value));
} : function(object2, key, value) {
  object2[key] = value;
  return object2;
};
var global$x2 = global$O;
var apply$52 = functionApply2;
var uncurryThis$p2 = functionUncurryThis2;
var isCallable$a2 = isCallable$h2;
var getOwnPropertyDescriptor$7 = objectGetOwnPropertyDescriptor2.f;
var isForced2 = isForced_12;
var path$w = path$y;
var bind$a2 = functionBindContext2;
var createNonEnumerableProperty$52 = createNonEnumerableProperty$62;
var hasOwn$d2 = hasOwnProperty_12;
var wrapConstructor2 = function(NativeConstructor) {
  var Wrapper = function(a, b, c2) {
    if (this instanceof Wrapper) {
      switch (arguments.length) {
        case 0:
          return new NativeConstructor();
        case 1:
          return new NativeConstructor(a);
        case 2:
          return new NativeConstructor(a, b);
      }
      return new NativeConstructor(a, b, c2);
    }
    return apply$52(NativeConstructor, this, arguments);
  };
  Wrapper.prototype = NativeConstructor.prototype;
  return Wrapper;
};
var _export2 = function(options2, source) {
  var TARGET = options2.target;
  var GLOBAL = options2.global;
  var STATIC = options2.stat;
  var PROTO = options2.proto;
  var nativeSource = GLOBAL ? global$x2 : STATIC ? global$x2[TARGET] : (global$x2[TARGET] || {}).prototype;
  var target = GLOBAL ? path$w : path$w[TARGET] || createNonEnumerableProperty$52(path$w, TARGET, {})[TARGET];
  var targetPrototype = target.prototype;
  var FORCED3, USE_NATIVE, VIRTUAL_PROTOTYPE;
  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
  for (key in source) {
    FORCED3 = isForced2(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options2.forced);
    USE_NATIVE = !FORCED3 && nativeSource && hasOwn$d2(nativeSource, key);
    targetProperty = target[key];
    if (USE_NATIVE)
      if (options2.noTargetGet) {
        descriptor = getOwnPropertyDescriptor$7(nativeSource, key);
        nativeProperty = descriptor && descriptor.value;
      } else
        nativeProperty = nativeSource[key];
    sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
    if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
      continue;
    if (options2.bind && USE_NATIVE)
      resultProperty = bind$a2(sourceProperty, global$x2);
    else if (options2.wrap && USE_NATIVE)
      resultProperty = wrapConstructor2(sourceProperty);
    else if (PROTO && isCallable$a2(sourceProperty))
      resultProperty = uncurryThis$p2(sourceProperty);
    else
      resultProperty = sourceProperty;
    if (options2.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
      createNonEnumerableProperty$52(resultProperty, "sham", true);
    }
    createNonEnumerableProperty$52(target, key, resultProperty);
    if (PROTO) {
      VIRTUAL_PROTOTYPE = TARGET + "Prototype";
      if (!hasOwn$d2(path$w, VIRTUAL_PROTOTYPE)) {
        createNonEnumerableProperty$52(path$w, VIRTUAL_PROTOTYPE, {});
      }
      createNonEnumerableProperty$52(path$w[VIRTUAL_PROTOTYPE], key, sourceProperty);
      if (options2.real && targetPrototype && !targetPrototype[key]) {
        createNonEnumerableProperty$52(targetPrototype, key, sourceProperty);
      }
    }
  }
};
var ceil2 = Math.ceil;
var floor$12 = Math.floor;
var toIntegerOrInfinity$42 = function(argument) {
  var number2 = +argument;
  return number2 !== number2 || number2 === 0 ? 0 : (number2 > 0 ? floor$12 : ceil2)(number2);
};
var toIntegerOrInfinity$32 = toIntegerOrInfinity$42;
var max$32 = Math.max;
var min$22 = Math.min;
var toAbsoluteIndex$52 = function(index2, length2) {
  var integer = toIntegerOrInfinity$32(index2);
  return integer < 0 ? max$32(integer + length2, 0) : min$22(integer, length2);
};
var toIntegerOrInfinity$22 = toIntegerOrInfinity$42;
var min$12 = Math.min;
var toLength$12 = function(argument) {
  return argument > 0 ? min$12(toIntegerOrInfinity$22(argument), 9007199254740991) : 0;
};
var toLength2 = toLength$12;
var lengthOfArrayLike$b2 = function(obj) {
  return toLength2(obj.length);
};
var toIndexedObject$92 = toIndexedObject$b2;
var toAbsoluteIndex$42 = toAbsoluteIndex$52;
var lengthOfArrayLike$a2 = lengthOfArrayLike$b2;
var createMethod$52 = function(IS_INCLUDES) {
  return function($this, el, fromIndex) {
    var O = toIndexedObject$92($this);
    var length2 = lengthOfArrayLike$a2(O);
    var index2 = toAbsoluteIndex$42(fromIndex, length2);
    var value;
    if (IS_INCLUDES && el != el)
      while (length2 > index2) {
        value = O[index2++];
        if (value != value)
          return true;
      }
    else
      for (; length2 > index2; index2++) {
        if ((IS_INCLUDES || index2 in O) && O[index2] === el)
          return IS_INCLUDES || index2 || 0;
      }
    return !IS_INCLUDES && -1;
  };
};
var arrayIncludes2 = {
  includes: createMethod$52(true),
  indexOf: createMethod$52(false)
};
var hiddenKeys$62 = {};
var uncurryThis$o2 = functionUncurryThis2;
var hasOwn$c2 = hasOwnProperty_12;
var toIndexedObject$82 = toIndexedObject$b2;
var indexOf$4 = arrayIncludes2.indexOf;
var hiddenKeys$52 = hiddenKeys$62;
var push$52 = uncurryThis$o2([].push);
var objectKeysInternal2 = function(object2, names) {
  var O = toIndexedObject$82(object2);
  var i = 0;
  var result = [];
  var key;
  for (key in O)
    !hasOwn$c2(hiddenKeys$52, key) && hasOwn$c2(O, key) && push$52(result, key);
  while (names.length > i)
    if (hasOwn$c2(O, key = names[i++])) {
      ~indexOf$4(result, key) || push$52(result, key);
    }
  return result;
};
var enumBugKeys$32 = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
var internalObjectKeys$12 = objectKeysInternal2;
var enumBugKeys$22 = enumBugKeys$32;
var objectKeys$42 = Object.keys || function keys4(O) {
  return internalObjectKeys$12(O, enumBugKeys$22);
};
var objectGetOwnPropertySymbols2 = {};
objectGetOwnPropertySymbols2.f = Object.getOwnPropertySymbols;
var DESCRIPTORS$c2 = descriptors2;
var uncurryThis$n2 = functionUncurryThis2;
var call$72 = functionCall2;
var fails$l2 = fails$t;
var objectKeys$32 = objectKeys$42;
var getOwnPropertySymbolsModule$22 = objectGetOwnPropertySymbols2;
var propertyIsEnumerableModule$12 = objectPropertyIsEnumerable2;
var toObject$b2 = toObject$d2;
var IndexedObject$22 = indexedObject2;
var $assign2 = Object.assign;
var defineProperty$d2 = Object.defineProperty;
var concat$62 = uncurryThis$n2([].concat);
var objectAssign2 = !$assign2 || fails$l2(function() {
  if (DESCRIPTORS$c2 && $assign2({
    b: 1
  }, $assign2(defineProperty$d2({}, "a", {
    enumerable: true,
    get: function() {
      defineProperty$d2(this, "b", {
        value: 3,
        enumerable: false
      });
    }
  }), {
    b: 2
  })).b !== 1)
    return true;
  var A = {};
  var B = {};
  var symbol3 = Symbol();
  var alphabet = "abcdefghijklmnopqrst";
  A[symbol3] = 7;
  alphabet.split("").forEach(function(chr) {
    B[chr] = chr;
  });
  return $assign2({}, A)[symbol3] != 7 || objectKeys$32($assign2({}, B)).join("") != alphabet;
}) ? function assign3(target, source) {
  var T = toObject$b2(target);
  var argumentsLength = arguments.length;
  var index2 = 1;
  var getOwnPropertySymbols7 = getOwnPropertySymbolsModule$22.f;
  var propertyIsEnumerable7 = propertyIsEnumerableModule$12.f;
  while (argumentsLength > index2) {
    var S = IndexedObject$22(arguments[index2++]);
    var keys7 = getOwnPropertySymbols7 ? concat$62(objectKeys$32(S), getOwnPropertySymbols7(S)) : objectKeys$32(S);
    var length2 = keys7.length;
    var j = 0;
    var key;
    while (length2 > j) {
      key = keys7[j++];
      if (!DESCRIPTORS$c2 || call$72(propertyIsEnumerable7, S, key))
        T[key] = S[key];
    }
  }
  return T;
} : $assign2;
var $$I = _export2;
var assign$52 = objectAssign2;
$$I({
  target: "Object",
  stat: true,
  forced: Object.assign !== assign$52
}, {
  assign: assign$52
});
var path$v = path$y;
var assign$42 = path$v.Object.assign;
var parent$13 = assign$42;
var assign$32 = parent$13;
var assign$22 = assign$32;
var uncurryThis$m2 = functionUncurryThis2;
var arraySlice$52 = uncurryThis$m2([].slice);
var global$w2 = global$O;
var uncurryThis$l2 = functionUncurryThis2;
var aCallable$32 = aCallable$62;
var isObject$e2 = isObject$j;
var hasOwn$b2 = hasOwnProperty_12;
var arraySlice$42 = arraySlice$52;
var NATIVE_BIND2 = functionBindNative2;
var Function$22 = global$w2.Function;
var concat$52 = uncurryThis$l2([].concat);
var join2 = uncurryThis$l2([].join);
var factories2 = {};
var construct$42 = function(C, argsLength, args) {
  if (!hasOwn$b2(factories2, argsLength)) {
    for (var list = [], i = 0; i < argsLength; i++)
      list[i] = "a[" + i + "]";
    factories2[argsLength] = Function$22("C,a", "return new C(" + join2(list, ",") + ")");
  }
  return factories2[argsLength](C, args);
};
var functionBind2 = NATIVE_BIND2 ? Function$22.bind : function bind3(that) {
  var F = aCallable$32(this);
  var Prototype = F.prototype;
  var partArgs = arraySlice$42(arguments, 1);
  var boundFunction = function bound() {
    var args = concat$52(partArgs, arraySlice$42(arguments));
    return this instanceof boundFunction ? construct$42(F, args.length, args) : F.apply(that, args);
  };
  if (isObject$e2(Prototype))
    boundFunction.prototype = Prototype;
  return boundFunction;
};
var $$H = _export2;
var bind$92 = functionBind2;
$$H({
  target: "Function",
  proto: true,
  forced: Function.bind !== bind$92
}, {
  bind: bind$92
});
var path$u = path$y;
var entryVirtual$i2 = function(CONSTRUCTOR) {
  return path$u[CONSTRUCTOR + "Prototype"];
};
var entryVirtual$h2 = entryVirtual$i2;
var bind$82 = entryVirtual$h2("Function").bind;
var isPrototypeOf$i2 = objectIsPrototypeOf2;
var method$e2 = bind$82;
var FunctionPrototype$12 = Function.prototype;
var bind$72 = function(it2) {
  var own = it2.bind;
  return it2 === FunctionPrototype$12 || isPrototypeOf$i2(FunctionPrototype$12, it2) && own === FunctionPrototype$12.bind ? method$e2 : own;
};
var parent$12 = bind$72;
var bind$62 = parent$12;
var bind$52 = bind$62;
function drawCircle(ctx, x, y, r) {
  ctx.beginPath();
  ctx.arc(x, y, r, 0, 2 * Math.PI, false);
  ctx.closePath();
}
function drawSquare(ctx, x, y, r) {
  ctx.beginPath();
  ctx.rect(x - r, y - r, r * 2, r * 2);
  ctx.closePath();
}
function drawTriangle(ctx, x, y, r) {
  ctx.beginPath();
  r *= 1.15;
  y += 0.275 * r;
  var s = r * 2;
  var s2 = s / 2;
  var ir = Math.sqrt(3) / 6 * s;
  var h = Math.sqrt(s * s - s2 * s2);
  ctx.moveTo(x, y - (h - ir));
  ctx.lineTo(x + s2, y + ir);
  ctx.lineTo(x - s2, y + ir);
  ctx.lineTo(x, y - (h - ir));
  ctx.closePath();
}
function drawTriangleDown(ctx, x, y, r) {
  ctx.beginPath();
  r *= 1.15;
  y -= 0.275 * r;
  var s = r * 2;
  var s2 = s / 2;
  var ir = Math.sqrt(3) / 6 * s;
  var h = Math.sqrt(s * s - s2 * s2);
  ctx.moveTo(x, y + (h - ir));
  ctx.lineTo(x + s2, y - ir);
  ctx.lineTo(x - s2, y - ir);
  ctx.lineTo(x, y + (h - ir));
  ctx.closePath();
}
function drawStar(ctx, x, y, r) {
  ctx.beginPath();
  r *= 0.82;
  y += 0.1 * r;
  for (var n = 0; n < 10; n++) {
    var radius = n % 2 === 0 ? r * 1.3 : r * 0.5;
    ctx.lineTo(x + radius * Math.sin(n * 2 * Math.PI / 10), y - radius * Math.cos(n * 2 * Math.PI / 10));
  }
  ctx.closePath();
}
function drawDiamond(ctx, x, y, r) {
  ctx.beginPath();
  ctx.lineTo(x, y + r);
  ctx.lineTo(x + r, y);
  ctx.lineTo(x, y - r);
  ctx.lineTo(x - r, y);
  ctx.closePath();
}
function drawRoundRect(ctx, x, y, w, h, r) {
  var r2d = Math.PI / 180;
  if (w - 2 * r < 0) {
    r = w / 2;
  }
  if (h - 2 * r < 0) {
    r = h / 2;
  }
  ctx.beginPath();
  ctx.moveTo(x + r, y);
  ctx.lineTo(x + w - r, y);
  ctx.arc(x + w - r, y + r, r, r2d * 270, r2d * 360, false);
  ctx.lineTo(x + w, y + h - r);
  ctx.arc(x + w - r, y + h - r, r, 0, r2d * 90, false);
  ctx.lineTo(x + r, y + h);
  ctx.arc(x + r, y + h - r, r, r2d * 90, r2d * 180, false);
  ctx.lineTo(x, y + r);
  ctx.arc(x + r, y + r, r, r2d * 180, r2d * 270, false);
  ctx.closePath();
}
function drawEllipse(ctx, x, y, w, h) {
  var kappa = 0.5522848, ox = w / 2 * kappa, oy = h / 2 * kappa, xe = x + w, ye = y + h, xm = x + w / 2, ym = y + h / 2;
  ctx.beginPath();
  ctx.moveTo(x, ym);
  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
  ctx.closePath();
}
function drawDatabase(ctx, x, y, w, h) {
  var f = 1 / 3;
  var wEllipse = w;
  var hEllipse = h * f;
  var kappa = 0.5522848, ox = wEllipse / 2 * kappa, oy = hEllipse / 2 * kappa, xe = x + wEllipse, ye = y + hEllipse, xm = x + wEllipse / 2, ym = y + hEllipse / 2, ymb = y + (h - hEllipse / 2), yeb = y + h;
  ctx.beginPath();
  ctx.moveTo(xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
  ctx.lineTo(xe, ymb);
  ctx.bezierCurveTo(xe, ymb + oy, xm + ox, yeb, xm, yeb);
  ctx.bezierCurveTo(xm - ox, yeb, x, ymb + oy, x, ymb);
  ctx.lineTo(x, ym);
}
function drawDashedLine(ctx, x, y, x2, y2, pattern) {
  ctx.beginPath();
  ctx.moveTo(x, y);
  var patternLength = pattern.length;
  var dx = x2 - x;
  var dy = y2 - y;
  var slope = dy / dx;
  var distRemaining = Math.sqrt(dx * dx + dy * dy);
  var patternIndex = 0;
  var draw = true;
  var xStep = 0;
  var dashLength = +pattern[0];
  while (distRemaining >= 0.1) {
    dashLength = +pattern[patternIndex++ % patternLength];
    if (dashLength > distRemaining) {
      dashLength = distRemaining;
    }
    xStep = Math.sqrt(dashLength * dashLength / (1 + slope * slope));
    xStep = dx < 0 ? -xStep : xStep;
    x += xStep;
    y += slope * xStep;
    if (draw === true) {
      ctx.lineTo(x, y);
    } else {
      ctx.moveTo(x, y);
    }
    distRemaining -= dashLength;
    draw = !draw;
  }
}
function drawHexagon(ctx, x, y, r) {
  ctx.beginPath();
  var sides = 6;
  var a = Math.PI * 2 / sides;
  ctx.moveTo(x + r, y);
  for (var i = 1; i < sides; i++) {
    ctx.lineTo(x + r * Math.cos(a * i), y + r * Math.sin(a * i));
  }
  ctx.closePath();
}
var shapeMap = {
  circle: drawCircle,
  dashedLine: drawDashedLine,
  database: drawDatabase,
  diamond: drawDiamond,
  ellipse: drawEllipse,
  ellipse_vis: drawEllipse,
  hexagon: drawHexagon,
  roundRect: drawRoundRect,
  square: drawSquare,
  star: drawStar,
  triangle: drawTriangle,
  triangleDown: drawTriangleDown
};
function getShape(name) {
  if (Object.prototype.hasOwnProperty.call(shapeMap, name)) {
    return shapeMap[name];
  } else {
    return function(ctx) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      CanvasRenderingContext2D.prototype[name].call(ctx, args);
    };
  }
}
var componentEmitter2 = { exports: {} };
(function(module) {
  {
    module.exports = Emitter3;
  }
  function Emitter3(obj) {
    if (obj)
      return mixin(obj);
  }
  function mixin(obj) {
    for (var key in Emitter3.prototype) {
      obj[key] = Emitter3.prototype[key];
    }
    return obj;
  }
  Emitter3.prototype.on = Emitter3.prototype.addEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
    return this;
  };
  Emitter3.prototype.once = function(event, fn) {
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }
    on.fn = fn;
    this.on(event, on);
    return this;
  };
  Emitter3.prototype.off = Emitter3.prototype.removeListener = Emitter3.prototype.removeAllListeners = Emitter3.prototype.removeEventListener = function(event, fn) {
    this._callbacks = this._callbacks || {};
    if (arguments.length == 0) {
      this._callbacks = {};
      return this;
    }
    var callbacks = this._callbacks["$" + event];
    if (!callbacks)
      return this;
    if (arguments.length == 1) {
      delete this._callbacks["$" + event];
      return this;
    }
    var cb;
    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }
    if (callbacks.length === 0) {
      delete this._callbacks["$" + event];
    }
    return this;
  };
  Emitter3.prototype.emit = function(event) {
    this._callbacks = this._callbacks || {};
    var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }
    return this;
  };
  Emitter3.prototype.listeners = function(event) {
    this._callbacks = this._callbacks || {};
    return this._callbacks["$" + event] || [];
  };
  Emitter3.prototype.hasListeners = function(event) {
    return !!this.listeners(event).length;
  };
})(componentEmitter2);
var Emitter2 = componentEmitter2.exports;
var wellKnownSymbol$h2 = wellKnownSymbol$j2;
var TO_STRING_TAG$32 = wellKnownSymbol$h2("toStringTag");
var test$22 = {};
test$22[TO_STRING_TAG$32] = "z";
var toStringTagSupport2 = String(test$22) === "[object z]";
var global$v2 = global$O;
var TO_STRING_TAG_SUPPORT$22 = toStringTagSupport2;
var isCallable$92 = isCallable$h2;
var classofRaw2 = classofRaw$12;
var wellKnownSymbol$g2 = wellKnownSymbol$j2;
var TO_STRING_TAG$22 = wellKnownSymbol$g2("toStringTag");
var Object$72 = global$v2.Object;
var CORRECT_ARGUMENTS2 = classofRaw2(function() {
  return arguments;
}()) == "Arguments";
var tryGet2 = function(it2, key) {
  try {
    return it2[key];
  } catch (error) {
  }
};
var classof$c2 = TO_STRING_TAG_SUPPORT$22 ? classofRaw2 : function(it2) {
  var O, tag, result;
  return it2 === void 0 ? "Undefined" : it2 === null ? "Null" : typeof (tag = tryGet2(O = Object$72(it2), TO_STRING_TAG$22)) == "string" ? tag : CORRECT_ARGUMENTS2 ? classofRaw2(O) : (result = classofRaw2(O)) == "Object" && isCallable$92(O.callee) ? "Arguments" : result;
};
var global$u2 = global$O;
var classof$b2 = classof$c2;
var String$22 = global$u2.String;
var toString$82 = function(argument) {
  if (classof$b2(argument) === "Symbol")
    throw TypeError("Cannot convert a Symbol value to a string");
  return String$22(argument);
};
var uncurryThis$k2 = functionUncurryThis2;
var toIntegerOrInfinity$12 = toIntegerOrInfinity$42;
var toString$72 = toString$82;
var requireObjectCoercible$22 = requireObjectCoercible$52;
var charAt$3 = uncurryThis$k2("".charAt);
var charCodeAt$12 = uncurryThis$k2("".charCodeAt);
var stringSlice2 = uncurryThis$k2("".slice);
var createMethod$42 = function(CONVERT_TO_STRING) {
  return function($this, pos) {
    var S = toString$72(requireObjectCoercible$22($this));
    var position = toIntegerOrInfinity$12(pos);
    var size = S.length;
    var first2, second;
    if (position < 0 || position >= size)
      return CONVERT_TO_STRING ? "" : void 0;
    first2 = charCodeAt$12(S, position);
    return first2 < 55296 || first2 > 56319 || position + 1 === size || (second = charCodeAt$12(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt$3(S, position) : first2 : CONVERT_TO_STRING ? stringSlice2(S, position, position + 2) : (first2 - 55296 << 10) + (second - 56320) + 65536;
  };
};
var stringMultibyte2 = {
  codeAt: createMethod$42(false),
  charAt: createMethod$42(true)
};
var uncurryThis$j2 = functionUncurryThis2;
var isCallable$82 = isCallable$h2;
var store$12 = sharedStore2;
var functionToString2 = uncurryThis$j2(Function.toString);
if (!isCallable$82(store$12.inspectSource)) {
  store$12.inspectSource = function(it2) {
    return functionToString2(it2);
  };
}
var inspectSource$22 = store$12.inspectSource;
var global$t2 = global$O;
var isCallable$72 = isCallable$h2;
var inspectSource$12 = inspectSource$22;
var WeakMap$12 = global$t2.WeakMap;
var nativeWeakMap2 = isCallable$72(WeakMap$12) && /native code/.test(inspectSource$12(WeakMap$12));
var shared$22 = shared$42.exports;
var uid$22 = uid$42;
var keys$32 = shared$22("keys");
var sharedKey$42 = function(key) {
  return keys$32[key] || (keys$32[key] = uid$22(key));
};
var NATIVE_WEAK_MAP$1 = nativeWeakMap2;
var global$s2 = global$O;
var uncurryThis$i2 = functionUncurryThis2;
var isObject$d2 = isObject$j;
var createNonEnumerableProperty$42 = createNonEnumerableProperty$62;
var hasOwn$a2 = hasOwnProperty_12;
var shared$12 = sharedStore2;
var sharedKey$32 = sharedKey$42;
var hiddenKeys$42 = hiddenKeys$62;
var OBJECT_ALREADY_INITIALIZED2 = "Object already initialized";
var TypeError$c2 = global$s2.TypeError;
var WeakMap2 = global$s2.WeakMap;
var set$32;
var get$6;
var has2;
var enforce2 = function(it2) {
  return has2(it2) ? get$6(it2) : set$32(it2, {});
};
var getterFor2 = function(TYPE) {
  return function(it2) {
    var state;
    if (!isObject$d2(it2) || (state = get$6(it2)).type !== TYPE) {
      throw TypeError$c2("Incompatible receiver, " + TYPE + " required");
    }
    return state;
  };
};
if (NATIVE_WEAK_MAP$1 || shared$12.state) {
  store = shared$12.state || (shared$12.state = new WeakMap2());
  wmget = uncurryThis$i2(store.get);
  wmhas = uncurryThis$i2(store.has);
  wmset = uncurryThis$i2(store.set);
  set$32 = function(it2, metadata) {
    if (wmhas(store, it2))
      throw new TypeError$c2(OBJECT_ALREADY_INITIALIZED2);
    metadata.facade = it2;
    wmset(store, it2, metadata);
    return metadata;
  };
  get$6 = function(it2) {
    return wmget(store, it2) || {};
  };
  has2 = function(it2) {
    return wmhas(store, it2);
  };
} else {
  STATE = sharedKey$32("state");
  hiddenKeys$42[STATE] = true;
  set$32 = function(it2, metadata) {
    if (hasOwn$a2(it2, STATE))
      throw new TypeError$c2(OBJECT_ALREADY_INITIALIZED2);
    metadata.facade = it2;
    createNonEnumerableProperty$42(it2, STATE, metadata);
    return metadata;
  };
  get$6 = function(it2) {
    return hasOwn$a2(it2, STATE) ? it2[STATE] : {};
  };
  has2 = function(it2) {
    return hasOwn$a2(it2, STATE);
  };
}
var store;
var wmget;
var wmhas;
var wmset;
var STATE;
var internalState2 = {
  set: set$32,
  get: get$6,
  has: has2,
  enforce: enforce2,
  getterFor: getterFor2
};
var DESCRIPTORS$b2 = descriptors2;
var hasOwn$92 = hasOwnProperty_12;
var FunctionPrototype2 = Function.prototype;
var getDescriptor2 = DESCRIPTORS$b2 && Object.getOwnPropertyDescriptor;
var EXISTS2 = hasOwn$92(FunctionPrototype2, "name");
var PROPER2 = EXISTS2 && function something2() {
}.name === "something";
var CONFIGURABLE2 = EXISTS2 && (!DESCRIPTORS$b2 || DESCRIPTORS$b2 && getDescriptor2(FunctionPrototype2, "name").configurable);
var functionName2 = {
  EXISTS: EXISTS2,
  PROPER: PROPER2,
  CONFIGURABLE: CONFIGURABLE2
};
var objectDefineProperties2 = {};
var DESCRIPTORS$a2 = descriptors2;
var V8_PROTOTYPE_DEFINE_BUG2 = v8PrototypeDefineBug2;
var definePropertyModule$32 = objectDefineProperty2;
var anObject$b2 = anObject$d;
var toIndexedObject$72 = toIndexedObject$b2;
var objectKeys$22 = objectKeys$42;
objectDefineProperties2.f = DESCRIPTORS$a2 && !V8_PROTOTYPE_DEFINE_BUG2 ? Object.defineProperties : function defineProperties5(O, Properties) {
  anObject$b2(O);
  var props = toIndexedObject$72(Properties);
  var keys7 = objectKeys$22(Properties);
  var length2 = keys7.length;
  var index2 = 0;
  var key;
  while (length2 > index2)
    definePropertyModule$32.f(O, key = keys7[index2++], props[key]);
  return O;
};
var getBuiltIn$62 = getBuiltIn$92;
var html$12 = getBuiltIn$62("document", "documentElement");
var anObject$a2 = anObject$d;
var definePropertiesModule$12 = objectDefineProperties2;
var enumBugKeys$12 = enumBugKeys$32;
var hiddenKeys$32 = hiddenKeys$62;
var html2 = html$12;
var documentCreateElement2 = documentCreateElement$12;
var sharedKey$22 = sharedKey$42;
var GT2 = ">";
var LT2 = "<";
var PROTOTYPE$12 = "prototype";
var SCRIPT2 = "script";
var IE_PROTO$12 = sharedKey$22("IE_PROTO");
var EmptyConstructor2 = function() {
};
var scriptTag2 = function(content) {
  return LT2 + SCRIPT2 + GT2 + content + LT2 + "/" + SCRIPT2 + GT2;
};
var NullProtoObjectViaActiveX2 = function(activeXDocument3) {
  activeXDocument3.write(scriptTag2(""));
  activeXDocument3.close();
  var temp = activeXDocument3.parentWindow.Object;
  activeXDocument3 = null;
  return temp;
};
var NullProtoObjectViaIFrame2 = function() {
  var iframe = documentCreateElement2("iframe");
  var JS = "java" + SCRIPT2 + ":";
  var iframeDocument;
  iframe.style.display = "none";
  html2.appendChild(iframe);
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag2("document.F=Object"));
  iframeDocument.close();
  return iframeDocument.F;
};
var activeXDocument2;
var NullProtoObject2 = function() {
  try {
    activeXDocument2 = new ActiveXObject("htmlfile");
  } catch (error) {
  }
  NullProtoObject2 = typeof document != "undefined" ? document.domain && activeXDocument2 ? NullProtoObjectViaActiveX2(activeXDocument2) : NullProtoObjectViaIFrame2() : NullProtoObjectViaActiveX2(activeXDocument2);
  var length2 = enumBugKeys$12.length;
  while (length2--)
    delete NullProtoObject2[PROTOTYPE$12][enumBugKeys$12[length2]];
  return NullProtoObject2();
};
hiddenKeys$32[IE_PROTO$12] = true;
var objectCreate2 = Object.create || function create5(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor2[PROTOTYPE$12] = anObject$a2(O);
    result = new EmptyConstructor2();
    EmptyConstructor2[PROTOTYPE$12] = null;
    result[IE_PROTO$12] = O;
  } else
    result = NullProtoObject2();
  return Properties === void 0 ? result : definePropertiesModule$12.f(result, Properties);
};
var fails$k2 = fails$t;
var correctPrototypeGetter2 = !fails$k2(function() {
  function F() {
  }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});
var global$r2 = global$O;
var hasOwn$82 = hasOwnProperty_12;
var isCallable$62 = isCallable$h2;
var toObject$a2 = toObject$d2;
var sharedKey$12 = sharedKey$42;
var CORRECT_PROTOTYPE_GETTER$12 = correctPrototypeGetter2;
var IE_PROTO2 = sharedKey$12("IE_PROTO");
var Object$62 = global$r2.Object;
var ObjectPrototype$22 = Object$62.prototype;
var objectGetPrototypeOf2 = CORRECT_PROTOTYPE_GETTER$12 ? Object$62.getPrototypeOf : function(O) {
  var object2 = toObject$a2(O);
  if (hasOwn$82(object2, IE_PROTO2))
    return object2[IE_PROTO2];
  var constructor = object2.constructor;
  if (isCallable$62(constructor) && object2 instanceof constructor) {
    return constructor.prototype;
  }
  return object2 instanceof Object$62 ? ObjectPrototype$22 : null;
};
var createNonEnumerableProperty$32 = createNonEnumerableProperty$62;
var redefine$42 = function(target, key, value, options2) {
  if (options2 && options2.enumerable)
    target[key] = value;
  else
    createNonEnumerableProperty$32(target, key, value);
};
var fails$j2 = fails$t;
var isCallable$52 = isCallable$h2;
var create$a2 = objectCreate2;
var getPrototypeOf$8 = objectGetPrototypeOf2;
var redefine$32 = redefine$42;
var wellKnownSymbol$f2 = wellKnownSymbol$j2;
var ITERATOR$6 = wellKnownSymbol$f2("iterator");
var BUGGY_SAFARI_ITERATORS$12 = false;
var IteratorPrototype$12;
var PrototypeOfArrayIteratorPrototype2;
var arrayIterator2;
if ([].keys) {
  arrayIterator2 = [].keys();
  if (!("next" in arrayIterator2))
    BUGGY_SAFARI_ITERATORS$12 = true;
  else {
    PrototypeOfArrayIteratorPrototype2 = getPrototypeOf$8(getPrototypeOf$8(arrayIterator2));
    if (PrototypeOfArrayIteratorPrototype2 !== Object.prototype)
      IteratorPrototype$12 = PrototypeOfArrayIteratorPrototype2;
  }
}
var NEW_ITERATOR_PROTOTYPE2 = IteratorPrototype$12 == void 0 || fails$j2(function() {
  var test3 = {};
  return IteratorPrototype$12[ITERATOR$6].call(test3) !== test3;
});
if (NEW_ITERATOR_PROTOTYPE2)
  IteratorPrototype$12 = {};
else
  IteratorPrototype$12 = create$a2(IteratorPrototype$12);
if (!isCallable$52(IteratorPrototype$12[ITERATOR$6])) {
  redefine$32(IteratorPrototype$12, ITERATOR$6, function() {
    return this;
  });
}
var iteratorsCore2 = {
  IteratorPrototype: IteratorPrototype$12,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$12
};
var TO_STRING_TAG_SUPPORT$12 = toStringTagSupport2;
var classof$a2 = classof$c2;
var objectToString2 = TO_STRING_TAG_SUPPORT$12 ? {}.toString : function toString3() {
  return "[object " + classof$a2(this) + "]";
};
var TO_STRING_TAG_SUPPORT2 = toStringTagSupport2;
var defineProperty$c2 = objectDefineProperty2.f;
var createNonEnumerableProperty$22 = createNonEnumerableProperty$62;
var hasOwn$72 = hasOwnProperty_12;
var toString$62 = objectToString2;
var wellKnownSymbol$e2 = wellKnownSymbol$j2;
var TO_STRING_TAG$12 = wellKnownSymbol$e2("toStringTag");
var setToStringTag$52 = function(it2, TAG, STATIC, SET_METHOD) {
  if (it2) {
    var target = STATIC ? it2 : it2.prototype;
    if (!hasOwn$72(target, TO_STRING_TAG$12)) {
      defineProperty$c2(target, TO_STRING_TAG$12, {
        configurable: true,
        value: TAG
      });
    }
    if (SET_METHOD && !TO_STRING_TAG_SUPPORT2) {
      createNonEnumerableProperty$22(target, "toString", toString$62);
    }
  }
};
var iterators2 = {};
var IteratorPrototype2 = iteratorsCore2.IteratorPrototype;
var create$92 = objectCreate2;
var createPropertyDescriptor$22 = createPropertyDescriptor$52;
var setToStringTag$42 = setToStringTag$52;
var Iterators$52 = iterators2;
var returnThis$12 = function() {
  return this;
};
var createIteratorConstructor$12 = function(IteratorConstructor, NAME, next4, ENUMERABLE_NEXT) {
  var TO_STRING_TAG3 = NAME + " Iterator";
  IteratorConstructor.prototype = create$92(IteratorPrototype2, {
    next: createPropertyDescriptor$22(+!ENUMERABLE_NEXT, next4)
  });
  setToStringTag$42(IteratorConstructor, TO_STRING_TAG3, false, true);
  Iterators$52[TO_STRING_TAG3] = returnThis$12;
  return IteratorConstructor;
};
var global$q2 = global$O;
var isCallable$42 = isCallable$h2;
var String$12 = global$q2.String;
var TypeError$b2 = global$q2.TypeError;
var aPossiblePrototype$12 = function(argument) {
  if (typeof argument == "object" || isCallable$42(argument))
    return argument;
  throw TypeError$b2("Can't set " + String$12(argument) + " as a prototype");
};
var uncurryThis$h2 = functionUncurryThis2;
var anObject$92 = anObject$d;
var aPossiblePrototype2 = aPossiblePrototype$12;
var objectSetPrototypeOf2 = Object.setPrototypeOf || ("__proto__" in {} ? function() {
  var CORRECT_SETTER = false;
  var test3 = {};
  var setter;
  try {
    setter = uncurryThis$h2(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
    setter(test3, []);
    CORRECT_SETTER = test3 instanceof Array;
  } catch (error) {
  }
  return function setPrototypeOf3(O, proto) {
    anObject$92(O);
    aPossiblePrototype2(proto);
    if (CORRECT_SETTER)
      setter(O, proto);
    else
      O.__proto__ = proto;
    return O;
  };
}() : void 0);
var $$G = _export2;
var call$62 = functionCall2;
var FunctionName2 = functionName2;
var createIteratorConstructor2 = createIteratorConstructor$12;
var getPrototypeOf$7 = objectGetPrototypeOf2;
var setToStringTag$32 = setToStringTag$52;
var redefine$22 = redefine$42;
var wellKnownSymbol$d2 = wellKnownSymbol$j2;
var Iterators$42 = iterators2;
var IteratorsCore2 = iteratorsCore2;
var PROPER_FUNCTION_NAME$12 = FunctionName2.PROPER;
var BUGGY_SAFARI_ITERATORS2 = IteratorsCore2.BUGGY_SAFARI_ITERATORS;
var ITERATOR$52 = wellKnownSymbol$d2("iterator");
var KEYS2 = "keys";
var VALUES2 = "values";
var ENTRIES2 = "entries";
var returnThis2 = function() {
  return this;
};
var defineIterator$32 = function(Iterable, NAME, IteratorConstructor, next4, DEFAULT, IS_SET, FORCED3) {
  createIteratorConstructor2(IteratorConstructor, NAME, next4);
  var getIterationMethod = function(KIND) {
    if (KIND === DEFAULT && defaultIterator)
      return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS2 && KIND in IterablePrototype)
      return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS2:
        return function keys7() {
          return new IteratorConstructor(this, KIND);
        };
      case VALUES2:
        return function values5() {
          return new IteratorConstructor(this, KIND);
        };
      case ENTRIES2:
        return function entries2() {
          return new IteratorConstructor(this, KIND);
        };
    }
    return function() {
      return new IteratorConstructor(this);
    };
  };
  var TO_STRING_TAG3 = NAME + " Iterator";
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR$52] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS2 && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf$7(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      setToStringTag$32(CurrentIteratorPrototype, TO_STRING_TAG3, true, true);
      Iterators$42[TO_STRING_TAG3] = returnThis2;
    }
  }
  if (PROPER_FUNCTION_NAME$12 && DEFAULT == VALUES2 && nativeIterator && nativeIterator.name !== VALUES2) {
    {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values5() {
        return call$62(nativeIterator, this);
      };
    }
  }
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES2),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS2),
      entries: getIterationMethod(ENTRIES2)
    };
    if (FORCED3)
      for (KEY in methods) {
        if (BUGGY_SAFARI_ITERATORS2 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
          redefine$22(IterablePrototype, KEY, methods[KEY]);
        }
      }
    else
      $$G({
        target: NAME,
        proto: true,
        forced: BUGGY_SAFARI_ITERATORS2 || INCORRECT_VALUES_NAME
      }, methods);
  }
  if (FORCED3 && IterablePrototype[ITERATOR$52] !== defaultIterator) {
    redefine$22(IterablePrototype, ITERATOR$52, defaultIterator, {
      name: DEFAULT
    });
  }
  Iterators$42[NAME] = defaultIterator;
  return methods;
};
var charAt$22 = stringMultibyte2.charAt;
var toString$52 = toString$82;
var InternalStateModule$5 = internalState2;
var defineIterator$22 = defineIterator$32;
var STRING_ITERATOR2 = "String Iterator";
var setInternalState$5 = InternalStateModule$5.set;
var getInternalState$22 = InternalStateModule$5.getterFor(STRING_ITERATOR2);
defineIterator$22(String, "String", function(iterated) {
  setInternalState$5(this, {
    type: STRING_ITERATOR2,
    string: toString$52(iterated),
    index: 0
  });
}, function next2() {
  var state = getInternalState$22(this);
  var string2 = state.string;
  var index2 = state.index;
  var point;
  if (index2 >= string2.length)
    return {
      value: void 0,
      done: true
    };
  point = charAt$22(string2, index2);
  state.index += point.length;
  return {
    value: point,
    done: false
  };
});
var call$52 = functionCall2;
var anObject$82 = anObject$d;
var getMethod$12 = getMethod$32;
var iteratorClose$22 = function(iterator3, kind, value) {
  var innerResult, innerError;
  anObject$82(iterator3);
  try {
    innerResult = getMethod$12(iterator3, "return");
    if (!innerResult) {
      if (kind === "throw")
        throw value;
      return value;
    }
    innerResult = call$52(innerResult, iterator3);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === "throw")
    throw value;
  if (innerError)
    throw innerResult;
  anObject$82(innerResult);
  return value;
};
var anObject$72 = anObject$d;
var iteratorClose$12 = iteratorClose$22;
var callWithSafeIterationClosing$12 = function(iterator3, fn, value, ENTRIES3) {
  try {
    return ENTRIES3 ? fn(anObject$72(value)[0], value[1]) : fn(value);
  } catch (error) {
    iteratorClose$12(iterator3, "throw", error);
  }
};
var wellKnownSymbol$c2 = wellKnownSymbol$j2;
var Iterators$32 = iterators2;
var ITERATOR$42 = wellKnownSymbol$c2("iterator");
var ArrayPrototype$f = Array.prototype;
var isArrayIteratorMethod$22 = function(it2) {
  return it2 !== void 0 && (Iterators$32.Array === it2 || ArrayPrototype$f[ITERATOR$42] === it2);
};
var uncurryThis$g2 = functionUncurryThis2;
var fails$i2 = fails$t;
var isCallable$32 = isCallable$h2;
var classof$92 = classof$c2;
var getBuiltIn$52 = getBuiltIn$92;
var inspectSource2 = inspectSource$22;
var noop2 = function() {
};
var empty2 = [];
var construct$32 = getBuiltIn$52("Reflect", "construct");
var constructorRegExp2 = /^\s*(?:class|function)\b/;
var exec$22 = uncurryThis$g2(constructorRegExp2.exec);
var INCORRECT_TO_STRING2 = !constructorRegExp2.exec(noop2);
var isConstructorModern2 = function isConstructor4(argument) {
  if (!isCallable$32(argument))
    return false;
  try {
    construct$32(noop2, empty2, argument);
    return true;
  } catch (error) {
    return false;
  }
};
var isConstructorLegacy2 = function isConstructor5(argument) {
  if (!isCallable$32(argument))
    return false;
  switch (classof$92(argument)) {
    case "AsyncFunction":
    case "GeneratorFunction":
    case "AsyncGeneratorFunction":
      return false;
  }
  try {
    return INCORRECT_TO_STRING2 || !!exec$22(constructorRegExp2, inspectSource2(argument));
  } catch (error) {
    return true;
  }
};
isConstructorLegacy2.sham = true;
var isConstructor$42 = !construct$32 || fails$i2(function() {
  var called;
  return isConstructorModern2(isConstructorModern2.call) || !isConstructorModern2(Object) || !isConstructorModern2(function() {
    called = true;
  }) || called;
}) ? isConstructorLegacy2 : isConstructorModern2;
var toPropertyKey$12 = toPropertyKey$42;
var definePropertyModule$22 = objectDefineProperty2;
var createPropertyDescriptor$12 = createPropertyDescriptor$52;
var createProperty$62 = function(object2, key, value) {
  var propertyKey = toPropertyKey$12(key);
  if (propertyKey in object2)
    definePropertyModule$22.f(object2, propertyKey, createPropertyDescriptor$12(0, value));
  else
    object2[propertyKey] = value;
};
var classof$82 = classof$c2;
var getMethod2 = getMethod$32;
var Iterators$22 = iterators2;
var wellKnownSymbol$b2 = wellKnownSymbol$j2;
var ITERATOR$32 = wellKnownSymbol$b2("iterator");
var getIteratorMethod$82 = function(it2) {
  if (it2 != void 0)
    return getMethod2(it2, ITERATOR$32) || getMethod2(it2, "@@iterator") || Iterators$22[classof$82(it2)];
};
var global$p2 = global$O;
var call$42 = functionCall2;
var aCallable$22 = aCallable$62;
var anObject$62 = anObject$d;
var tryToString$22 = tryToString$42;
var getIteratorMethod$72 = getIteratorMethod$82;
var TypeError$a2 = global$p2.TypeError;
var getIterator$22 = function(argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$72(argument) : usingIterator;
  if (aCallable$22(iteratorMethod))
    return anObject$62(call$42(iteratorMethod, argument));
  throw TypeError$a2(tryToString$22(argument) + " is not iterable");
};
var global$o2 = global$O;
var bind$42 = functionBindContext2;
var call$32 = functionCall2;
var toObject$92 = toObject$d2;
var callWithSafeIterationClosing2 = callWithSafeIterationClosing$12;
var isArrayIteratorMethod$12 = isArrayIteratorMethod$22;
var isConstructor$32 = isConstructor$42;
var lengthOfArrayLike$92 = lengthOfArrayLike$b2;
var createProperty$52 = createProperty$62;
var getIterator$12 = getIterator$22;
var getIteratorMethod$62 = getIteratorMethod$82;
var Array$52 = global$o2.Array;
var arrayFrom2 = function from3(arrayLike) {
  var O = toObject$92(arrayLike);
  var IS_CONSTRUCTOR = isConstructor$32(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
  var mapping = mapfn !== void 0;
  if (mapping)
    mapfn = bind$42(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
  var iteratorMethod = getIteratorMethod$62(O);
  var index2 = 0;
  var length2, result, step, iterator3, next4, value;
  if (iteratorMethod && !(this == Array$52 && isArrayIteratorMethod$12(iteratorMethod))) {
    iterator3 = getIterator$12(O, iteratorMethod);
    next4 = iterator3.next;
    result = IS_CONSTRUCTOR ? new this() : [];
    for (; !(step = call$32(next4, iterator3)).done; index2++) {
      value = mapping ? callWithSafeIterationClosing2(iterator3, mapfn, [step.value, index2], true) : step.value;
      createProperty$52(result, index2, value);
    }
  } else {
    length2 = lengthOfArrayLike$92(O);
    result = IS_CONSTRUCTOR ? new this(length2) : Array$52(length2);
    for (; length2 > index2; index2++) {
      value = mapping ? mapfn(O[index2], index2) : O[index2];
      createProperty$52(result, index2, value);
    }
  }
  result.length = index2;
  return result;
};
var wellKnownSymbol$a2 = wellKnownSymbol$j2;
var ITERATOR$22 = wellKnownSymbol$a2("iterator");
var SAFE_CLOSING2 = false;
try {
  called = 0;
  iteratorWithReturn = {
    next: function() {
      return {
        done: !!called++
      };
    },
    "return": function() {
      SAFE_CLOSING2 = true;
    }
  };
  iteratorWithReturn[ITERATOR$22] = function() {
    return this;
  };
  Array.from(iteratorWithReturn, function() {
    throw 2;
  });
} catch (error) {
}
var called;
var iteratorWithReturn;
var checkCorrectnessOfIteration$12 = function(exec3, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING2)
    return false;
  var ITERATION_SUPPORT = false;
  try {
    var object2 = {};
    object2[ITERATOR$22] = function() {
      return {
        next: function() {
          return {
            done: ITERATION_SUPPORT = true
          };
        }
      };
    };
    exec3(object2);
  } catch (error) {
  }
  return ITERATION_SUPPORT;
};
var $$F = _export2;
var from$62 = arrayFrom2;
var checkCorrectnessOfIteration2 = checkCorrectnessOfIteration$12;
var INCORRECT_ITERATION2 = !checkCorrectnessOfIteration2(function(iterable) {
  Array.from(iterable);
});
$$F({
  target: "Array",
  stat: true,
  forced: INCORRECT_ITERATION2
}, {
  from: from$62
});
var path$t = path$y;
var from$52 = path$t.Array.from;
var parent$11 = from$52;
var from$42 = parent$11;
var from$32 = from$42;
var toIndexedObject$62 = toIndexedObject$b2;
var Iterators$12 = iterators2;
var InternalStateModule$42 = internalState2;
objectDefineProperty2.f;
var defineIterator$12 = defineIterator$32;
var ARRAY_ITERATOR2 = "Array Iterator";
var setInternalState$42 = InternalStateModule$42.set;
var getInternalState$12 = InternalStateModule$42.getterFor(ARRAY_ITERATOR2);
defineIterator$12(Array, "Array", function(iterated, kind) {
  setInternalState$42(this, {
    type: ARRAY_ITERATOR2,
    target: toIndexedObject$62(iterated),
    index: 0,
    kind
  });
}, function() {
  var state = getInternalState$12(this);
  var target = state.target;
  var kind = state.kind;
  var index2 = state.index++;
  if (!target || index2 >= target.length) {
    state.target = void 0;
    return {
      value: void 0,
      done: true
    };
  }
  if (kind == "keys")
    return {
      value: index2,
      done: false
    };
  if (kind == "values")
    return {
      value: target[index2],
      done: false
    };
  return {
    value: [index2, target[index2]],
    done: false
  };
}, "values");
Iterators$12.Arguments = Iterators$12.Array;
var getIteratorMethod$52 = getIteratorMethod$82;
var getIteratorMethod_12 = getIteratorMethod$52;
var domIterables2 = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};
var DOMIterables$22 = domIterables2;
var global$n2 = global$O;
var classof$72 = classof$c2;
var createNonEnumerableProperty$12 = createNonEnumerableProperty$62;
var Iterators2 = iterators2;
var wellKnownSymbol$92 = wellKnownSymbol$j2;
var TO_STRING_TAG2 = wellKnownSymbol$92("toStringTag");
for (var COLLECTION_NAME in DOMIterables$22) {
  Collection = global$n2[COLLECTION_NAME];
  CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype && classof$72(CollectionPrototype) !== TO_STRING_TAG2) {
    createNonEnumerableProperty$12(CollectionPrototype, TO_STRING_TAG2, COLLECTION_NAME);
  }
  Iterators2[COLLECTION_NAME] = Iterators2.Array;
}
var Collection;
var CollectionPrototype;
var parent$10 = getIteratorMethod_12;
var getIteratorMethod$42 = parent$10;
var parent$$ = getIteratorMethod$42;
var getIteratorMethod$32 = parent$$;
var parent$_ = getIteratorMethod$32;
var getIteratorMethod$22 = parent$_;
var getIteratorMethod$12 = getIteratorMethod$22;
var classof$62 = classofRaw$12;
var isArray$c2 = Array.isArray || function isArray3(argument) {
  return classof$62(argument) == "Array";
};
var objectGetOwnPropertyNames2 = {};
var internalObjectKeys2 = objectKeysInternal2;
var enumBugKeys2 = enumBugKeys$32;
var hiddenKeys$22 = enumBugKeys2.concat("length", "prototype");
objectGetOwnPropertyNames2.f = Object.getOwnPropertyNames || function getOwnPropertyNames4(O) {
  return internalObjectKeys2(O, hiddenKeys$22);
};
var objectGetOwnPropertyNamesExternal2 = {};
var global$m2 = global$O;
var toAbsoluteIndex$32 = toAbsoluteIndex$52;
var lengthOfArrayLike$82 = lengthOfArrayLike$b2;
var createProperty$42 = createProperty$62;
var Array$42 = global$m2.Array;
var max$22 = Math.max;
var arraySliceSimple2 = function(O, start, end) {
  var length2 = lengthOfArrayLike$82(O);
  var k = toAbsoluteIndex$32(start, length2);
  var fin = toAbsoluteIndex$32(end === void 0 ? length2 : end, length2);
  var result = Array$42(max$22(fin - k, 0));
  for (var n = 0; k < fin; k++, n++)
    createProperty$42(result, n, O[k]);
  result.length = n;
  return result;
};
var classof$52 = classofRaw$12;
var toIndexedObject$52 = toIndexedObject$b2;
var $getOwnPropertyNames$12 = objectGetOwnPropertyNames2.f;
var arraySlice$32 = arraySliceSimple2;
var windowNames2 = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames2 = function(it2) {
  try {
    return $getOwnPropertyNames$12(it2);
  } catch (error) {
    return arraySlice$32(windowNames2);
  }
};
objectGetOwnPropertyNamesExternal2.f = function getOwnPropertyNames5(it2) {
  return windowNames2 && classof$52(it2) == "Window" ? getWindowNames2(it2) : $getOwnPropertyNames$12(toIndexedObject$52(it2));
};
var wellKnownSymbolWrapped2 = {};
var wellKnownSymbol$82 = wellKnownSymbol$j2;
wellKnownSymbolWrapped2.f = wellKnownSymbol$82;
var path$s = path$y;
var hasOwn$62 = hasOwnProperty_12;
var wrappedWellKnownSymbolModule$12 = wellKnownSymbolWrapped2;
var defineProperty$b2 = objectDefineProperty2.f;
var defineWellKnownSymbol$l2 = function(NAME) {
  var Symbol2 = path$s.Symbol || (path$s.Symbol = {});
  if (!hasOwn$62(Symbol2, NAME))
    defineProperty$b2(Symbol2, NAME, {
      value: wrappedWellKnownSymbolModule$12.f(NAME)
    });
};
var global$l2 = global$O;
var isArray$b2 = isArray$c2;
var isConstructor$22 = isConstructor$42;
var isObject$c2 = isObject$j;
var wellKnownSymbol$72 = wellKnownSymbol$j2;
var SPECIES$32 = wellKnownSymbol$72("species");
var Array$32 = global$l2.Array;
var arraySpeciesConstructor$12 = function(originalArray) {
  var C;
  if (isArray$b2(originalArray)) {
    C = originalArray.constructor;
    if (isConstructor$22(C) && (C === Array$32 || isArray$b2(C.prototype)))
      C = void 0;
    else if (isObject$c2(C)) {
      C = C[SPECIES$32];
      if (C === null)
        C = void 0;
    }
  }
  return C === void 0 ? Array$32 : C;
};
var arraySpeciesConstructor2 = arraySpeciesConstructor$12;
var arraySpeciesCreate$32 = function(originalArray, length2) {
  return new (arraySpeciesConstructor2(originalArray))(length2 === 0 ? 0 : length2);
};
var bind$32 = functionBindContext2;
var uncurryThis$f2 = functionUncurryThis2;
var IndexedObject$12 = indexedObject2;
var toObject$82 = toObject$d2;
var lengthOfArrayLike$72 = lengthOfArrayLike$b2;
var arraySpeciesCreate$22 = arraySpeciesCreate$32;
var push$42 = uncurryThis$f2([].push);
var createMethod$32 = function(TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function($this, callbackfn, that, specificCreate) {
    var O = toObject$82($this);
    var self2 = IndexedObject$12(O);
    var boundFunction = bind$32(callbackfn, that);
    var length2 = lengthOfArrayLike$72(self2);
    var index2 = 0;
    var create9 = specificCreate || arraySpeciesCreate$22;
    var target = IS_MAP ? create9($this, length2) : IS_FILTER || IS_FILTER_REJECT ? create9($this, 0) : void 0;
    var value, result;
    for (; length2 > index2; index2++)
      if (NO_HOLES || index2 in self2) {
        value = self2[index2];
        result = boundFunction(value, index2, O);
        if (TYPE) {
          if (IS_MAP)
            target[index2] = result;
          else if (result)
            switch (TYPE) {
              case 3:
                return true;
              case 5:
                return value;
              case 6:
                return index2;
              case 2:
                push$42(target, value);
            }
          else
            switch (TYPE) {
              case 4:
                return false;
              case 7:
                push$42(target, value);
            }
        }
      }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};
var arrayIteration2 = {
  forEach: createMethod$32(0),
  map: createMethod$32(1),
  filter: createMethod$32(2),
  some: createMethod$32(3),
  every: createMethod$32(4),
  find: createMethod$32(5),
  findIndex: createMethod$32(6),
  filterReject: createMethod$32(7)
};
var $$E = _export2;
var global$k2 = global$O;
var getBuiltIn$42 = getBuiltIn$92;
var apply$42 = functionApply2;
var call$22 = functionCall2;
var uncurryThis$e2 = functionUncurryThis2;
var DESCRIPTORS$92 = descriptors2;
var NATIVE_SYMBOL2 = nativeSymbol2;
var fails$h2 = fails$t;
var hasOwn$52 = hasOwnProperty_12;
var isArray$a2 = isArray$c2;
var isCallable$22 = isCallable$h2;
var isObject$b2 = isObject$j;
var isPrototypeOf$h2 = objectIsPrototypeOf2;
var isSymbol2 = isSymbol$32;
var anObject$52 = anObject$d;
var toObject$72 = toObject$d2;
var toIndexedObject$42 = toIndexedObject$b2;
var toPropertyKey2 = toPropertyKey$42;
var $toString2 = toString$82;
var createPropertyDescriptor2 = createPropertyDescriptor$52;
var nativeObjectCreate2 = objectCreate2;
var objectKeys$12 = objectKeys$42;
var getOwnPropertyNamesModule$22 = objectGetOwnPropertyNames2;
var getOwnPropertyNamesExternal2 = objectGetOwnPropertyNamesExternal2;
var getOwnPropertySymbolsModule$12 = objectGetOwnPropertySymbols2;
var getOwnPropertyDescriptorModule$2 = objectGetOwnPropertyDescriptor2;
var definePropertyModule$12 = objectDefineProperty2;
var definePropertiesModule2 = objectDefineProperties2;
var propertyIsEnumerableModule2 = objectPropertyIsEnumerable2;
var arraySlice$22 = arraySlice$52;
var redefine$12 = redefine$42;
var shared2 = shared$42.exports;
var sharedKey2 = sharedKey$42;
var hiddenKeys$12 = hiddenKeys$62;
var uid$12 = uid$42;
var wellKnownSymbol$62 = wellKnownSymbol$j2;
var wrappedWellKnownSymbolModule2 = wellKnownSymbolWrapped2;
var defineWellKnownSymbol$k2 = defineWellKnownSymbol$l2;
var setToStringTag$22 = setToStringTag$52;
var InternalStateModule$32 = internalState2;
var $forEach$12 = arrayIteration2.forEach;
var HIDDEN2 = sharedKey2("hidden");
var SYMBOL2 = "Symbol";
var PROTOTYPE2 = "prototype";
var TO_PRIMITIVE2 = wellKnownSymbol$62("toPrimitive");
var setInternalState$32 = InternalStateModule$32.set;
var getInternalState2 = InternalStateModule$32.getterFor(SYMBOL2);
var ObjectPrototype$12 = Object[PROTOTYPE2];
var $Symbol2 = global$k2.Symbol;
var SymbolPrototype2 = $Symbol2 && $Symbol2[PROTOTYPE2];
var TypeError$92 = global$k2.TypeError;
var QObject2 = global$k2.QObject;
var $stringify$12 = getBuiltIn$42("JSON", "stringify");
var nativeGetOwnPropertyDescriptor$12 = getOwnPropertyDescriptorModule$2.f;
var nativeDefineProperty2 = definePropertyModule$12.f;
var nativeGetOwnPropertyNames2 = getOwnPropertyNamesExternal2.f;
var nativePropertyIsEnumerable2 = propertyIsEnumerableModule2.f;
var push$32 = uncurryThis$e2([].push);
var AllSymbols2 = shared2("symbols");
var ObjectPrototypeSymbols2 = shared2("op-symbols");
var StringToSymbolRegistry2 = shared2("string-to-symbol-registry");
var SymbolToStringRegistry2 = shared2("symbol-to-string-registry");
var WellKnownSymbolsStore2 = shared2("wks");
var USE_SETTER2 = !QObject2 || !QObject2[PROTOTYPE2] || !QObject2[PROTOTYPE2].findChild;
var setSymbolDescriptor2 = DESCRIPTORS$92 && fails$h2(function() {
  return nativeObjectCreate2(nativeDefineProperty2({}, "a", {
    get: function() {
      return nativeDefineProperty2(this, "a", {
        value: 7
      }).a;
    }
  })).a != 7;
}) ? function(O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$12(ObjectPrototype$12, P);
  if (ObjectPrototypeDescriptor)
    delete ObjectPrototype$12[P];
  nativeDefineProperty2(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$12) {
    nativeDefineProperty2(ObjectPrototype$12, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty2;
var wrap$12 = function(tag, description) {
  var symbol3 = AllSymbols2[tag] = nativeObjectCreate2(SymbolPrototype2);
  setInternalState$32(symbol3, {
    type: SYMBOL2,
    tag,
    description
  });
  if (!DESCRIPTORS$92)
    symbol3.description = description;
  return symbol3;
};
var $defineProperty2 = function defineProperty8(O, P, Attributes) {
  if (O === ObjectPrototype$12)
    $defineProperty2(ObjectPrototypeSymbols2, P, Attributes);
  anObject$52(O);
  var key = toPropertyKey2(P);
  anObject$52(Attributes);
  if (hasOwn$52(AllSymbols2, key)) {
    if (!Attributes.enumerable) {
      if (!hasOwn$52(O, HIDDEN2))
        nativeDefineProperty2(O, HIDDEN2, createPropertyDescriptor2(1, {}));
      O[HIDDEN2][key] = true;
    } else {
      if (hasOwn$52(O, HIDDEN2) && O[HIDDEN2][key])
        O[HIDDEN2][key] = false;
      Attributes = nativeObjectCreate2(Attributes, {
        enumerable: createPropertyDescriptor2(0, false)
      });
    }
    return setSymbolDescriptor2(O, key, Attributes);
  }
  return nativeDefineProperty2(O, key, Attributes);
};
var $defineProperties2 = function defineProperties6(O, Properties) {
  anObject$52(O);
  var properties = toIndexedObject$42(Properties);
  var keys7 = objectKeys$12(properties).concat($getOwnPropertySymbols2(properties));
  $forEach$12(keys7, function(key) {
    if (!DESCRIPTORS$92 || call$22($propertyIsEnumerable$12, properties, key))
      $defineProperty2(O, key, properties[key]);
  });
  return O;
};
var $create2 = function create6(O, Properties) {
  return Properties === void 0 ? nativeObjectCreate2(O) : $defineProperties2(nativeObjectCreate2(O), Properties);
};
var $propertyIsEnumerable$12 = function propertyIsEnumerable5(V) {
  var P = toPropertyKey2(V);
  var enumerable = call$22(nativePropertyIsEnumerable2, this, P);
  if (this === ObjectPrototype$12 && hasOwn$52(AllSymbols2, P) && !hasOwn$52(ObjectPrototypeSymbols2, P))
    return false;
  return enumerable || !hasOwn$52(this, P) || !hasOwn$52(AllSymbols2, P) || hasOwn$52(this, HIDDEN2) && this[HIDDEN2][P] ? enumerable : true;
};
var $getOwnPropertyDescriptor2 = function getOwnPropertyDescriptor7(O, P) {
  var it2 = toIndexedObject$42(O);
  var key = toPropertyKey2(P);
  if (it2 === ObjectPrototype$12 && hasOwn$52(AllSymbols2, key) && !hasOwn$52(ObjectPrototypeSymbols2, key))
    return;
  var descriptor = nativeGetOwnPropertyDescriptor$12(it2, key);
  if (descriptor && hasOwn$52(AllSymbols2, key) && !(hasOwn$52(it2, HIDDEN2) && it2[HIDDEN2][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};
var $getOwnPropertyNames2 = function getOwnPropertyNames6(O) {
  var names = nativeGetOwnPropertyNames2(toIndexedObject$42(O));
  var result = [];
  $forEach$12(names, function(key) {
    if (!hasOwn$52(AllSymbols2, key) && !hasOwn$52(hiddenKeys$12, key))
      push$32(result, key);
  });
  return result;
};
var $getOwnPropertySymbols2 = function getOwnPropertySymbols4(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$12;
  var names = nativeGetOwnPropertyNames2(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols2 : toIndexedObject$42(O));
  var result = [];
  $forEach$12(names, function(key) {
    if (hasOwn$52(AllSymbols2, key) && (!IS_OBJECT_PROTOTYPE || hasOwn$52(ObjectPrototype$12, key))) {
      push$32(result, AllSymbols2[key]);
    }
  });
  return result;
};
if (!NATIVE_SYMBOL2) {
  $Symbol2 = function Symbol2() {
    if (isPrototypeOf$h2(SymbolPrototype2, this))
      throw TypeError$92("Symbol is not a constructor");
    var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString2(arguments[0]);
    var tag = uid$12(description);
    var setter = function(value) {
      if (this === ObjectPrototype$12)
        call$22(setter, ObjectPrototypeSymbols2, value);
      if (hasOwn$52(this, HIDDEN2) && hasOwn$52(this[HIDDEN2], tag))
        this[HIDDEN2][tag] = false;
      setSymbolDescriptor2(this, tag, createPropertyDescriptor2(1, value));
    };
    if (DESCRIPTORS$92 && USE_SETTER2)
      setSymbolDescriptor2(ObjectPrototype$12, tag, {
        configurable: true,
        set: setter
      });
    return wrap$12(tag, description);
  };
  SymbolPrototype2 = $Symbol2[PROTOTYPE2];
  redefine$12(SymbolPrototype2, "toString", function toString5() {
    return getInternalState2(this).tag;
  });
  redefine$12($Symbol2, "withoutSetter", function(description) {
    return wrap$12(uid$12(description), description);
  });
  propertyIsEnumerableModule2.f = $propertyIsEnumerable$12;
  definePropertyModule$12.f = $defineProperty2;
  definePropertiesModule2.f = $defineProperties2;
  getOwnPropertyDescriptorModule$2.f = $getOwnPropertyDescriptor2;
  getOwnPropertyNamesModule$22.f = getOwnPropertyNamesExternal2.f = $getOwnPropertyNames2;
  getOwnPropertySymbolsModule$12.f = $getOwnPropertySymbols2;
  wrappedWellKnownSymbolModule2.f = function(name) {
    return wrap$12(wellKnownSymbol$62(name), name);
  };
  if (DESCRIPTORS$92) {
    nativeDefineProperty2(SymbolPrototype2, "description", {
      configurable: true,
      get: function description() {
        return getInternalState2(this).description;
      }
    });
  }
}
$$E({
  global: true,
  wrap: true,
  forced: !NATIVE_SYMBOL2,
  sham: !NATIVE_SYMBOL2
}, {
  Symbol: $Symbol2
});
$forEach$12(objectKeys$12(WellKnownSymbolsStore2), function(name) {
  defineWellKnownSymbol$k2(name);
});
$$E({
  target: SYMBOL2,
  stat: true,
  forced: !NATIVE_SYMBOL2
}, {
  "for": function(key) {
    var string2 = $toString2(key);
    if (hasOwn$52(StringToSymbolRegistry2, string2))
      return StringToSymbolRegistry2[string2];
    var symbol3 = $Symbol2(string2);
    StringToSymbolRegistry2[string2] = symbol3;
    SymbolToStringRegistry2[symbol3] = string2;
    return symbol3;
  },
  keyFor: function keyFor2(sym) {
    if (!isSymbol2(sym))
      throw TypeError$92(sym + " is not a symbol");
    if (hasOwn$52(SymbolToStringRegistry2, sym))
      return SymbolToStringRegistry2[sym];
  },
  useSetter: function() {
    USE_SETTER2 = true;
  },
  useSimple: function() {
    USE_SETTER2 = false;
  }
});
$$E({
  target: "Object",
  stat: true,
  forced: !NATIVE_SYMBOL2,
  sham: !DESCRIPTORS$92
}, {
  create: $create2,
  defineProperty: $defineProperty2,
  defineProperties: $defineProperties2,
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor2
});
$$E({
  target: "Object",
  stat: true,
  forced: !NATIVE_SYMBOL2
}, {
  getOwnPropertyNames: $getOwnPropertyNames2,
  getOwnPropertySymbols: $getOwnPropertySymbols2
});
$$E({
  target: "Object",
  stat: true,
  forced: fails$h2(function() {
    getOwnPropertySymbolsModule$12.f(1);
  })
}, {
  getOwnPropertySymbols: function getOwnPropertySymbols5(it2) {
    return getOwnPropertySymbolsModule$12.f(toObject$72(it2));
  }
});
if ($stringify$12) {
  FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL2 || fails$h2(function() {
    var symbol3 = $Symbol2();
    return $stringify$12([symbol3]) != "[null]" || $stringify$12({
      a: symbol3
    }) != "{}" || $stringify$12(Object(symbol3)) != "{}";
  });
  $$E({
    target: "JSON",
    stat: true,
    forced: FORCED_JSON_STRINGIFY
  }, {
    stringify: function stringify5(it2, replacer, space) {
      var args = arraySlice$22(arguments);
      var $replacer = replacer;
      if (!isObject$b2(replacer) && it2 === void 0 || isSymbol2(it2))
        return;
      if (!isArray$a2(replacer))
        replacer = function(key, value) {
          if (isCallable$22($replacer))
            value = call$22($replacer, this, key, value);
          if (!isSymbol2(value))
            return value;
        };
      args[1] = replacer;
      return apply$42($stringify$12, null, args);
    }
  });
}
var FORCED_JSON_STRINGIFY;
if (!SymbolPrototype2[TO_PRIMITIVE2]) {
  valueOf = SymbolPrototype2.valueOf;
  redefine$12(SymbolPrototype2, TO_PRIMITIVE2, function(hint) {
    return call$22(valueOf, this);
  });
}
var valueOf;
setToStringTag$22($Symbol2, SYMBOL2);
hiddenKeys$12[HIDDEN2] = true;
var path$r = path$y;
var getOwnPropertySymbols$22 = path$r.Object.getOwnPropertySymbols;
var parent$Z = getOwnPropertySymbols$22;
var getOwnPropertySymbols$12 = parent$Z;
var getOwnPropertySymbols6 = getOwnPropertySymbols$12;
var getOwnPropertyDescriptor$6 = { exports: {} };
var $$D = _export2;
var fails$g2 = fails$t;
var toIndexedObject$32 = toIndexedObject$b2;
var nativeGetOwnPropertyDescriptor2 = objectGetOwnPropertyDescriptor2.f;
var DESCRIPTORS$82 = descriptors2;
var FAILS_ON_PRIMITIVES$4 = fails$g2(function() {
  nativeGetOwnPropertyDescriptor2(1);
});
var FORCED$6 = !DESCRIPTORS$82 || FAILS_ON_PRIMITIVES$4;
$$D({
  target: "Object",
  stat: true,
  forced: FORCED$6,
  sham: !DESCRIPTORS$82
}, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor8(it2, key) {
    return nativeGetOwnPropertyDescriptor2(toIndexedObject$32(it2), key);
  }
});
var path$q2 = path$y;
var Object$52 = path$q2.Object;
var getOwnPropertyDescriptor$52 = getOwnPropertyDescriptor$6.exports = function getOwnPropertyDescriptor9(it2, key) {
  return Object$52.getOwnPropertyDescriptor(it2, key);
};
if (Object$52.getOwnPropertyDescriptor.sham)
  getOwnPropertyDescriptor$52.sham = true;
var parent$Y = getOwnPropertyDescriptor$6.exports;
var getOwnPropertyDescriptor$42 = parent$Y;
var getOwnPropertyDescriptor$32 = getOwnPropertyDescriptor$42;
var getBuiltIn$32 = getBuiltIn$92;
var uncurryThis$d2 = functionUncurryThis2;
var getOwnPropertyNamesModule$12 = objectGetOwnPropertyNames2;
var getOwnPropertySymbolsModule2 = objectGetOwnPropertySymbols2;
var anObject$42 = anObject$d;
var concat$42 = uncurryThis$d2([].concat);
var ownKeys$62 = getBuiltIn$32("Reflect", "ownKeys") || function ownKeys3(it2) {
  var keys7 = getOwnPropertyNamesModule$12.f(anObject$42(it2));
  var getOwnPropertySymbols7 = getOwnPropertySymbolsModule2.f;
  return getOwnPropertySymbols7 ? concat$42(keys7, getOwnPropertySymbols7(it2)) : keys7;
};
var $$C2 = _export2;
var DESCRIPTORS$72 = descriptors2;
var ownKeys$52 = ownKeys$62;
var toIndexedObject$22 = toIndexedObject$b2;
var getOwnPropertyDescriptorModule$12 = objectGetOwnPropertyDescriptor2;
var createProperty$32 = createProperty$62;
$$C2({
  target: "Object",
  stat: true,
  sham: !DESCRIPTORS$72
}, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors3(object2) {
    var O = toIndexedObject$22(object2);
    var getOwnPropertyDescriptor11 = getOwnPropertyDescriptorModule$12.f;
    var keys7 = ownKeys$52(O);
    var result = {};
    var index2 = 0;
    var key, descriptor;
    while (keys7.length > index2) {
      descriptor = getOwnPropertyDescriptor11(O, key = keys7[index2++]);
      if (descriptor !== void 0)
        createProperty$32(result, key, descriptor);
    }
    return result;
  }
});
var path$p2 = path$y;
var getOwnPropertyDescriptors$22 = path$p2.Object.getOwnPropertyDescriptors;
var parent$X = getOwnPropertyDescriptors$22;
var getOwnPropertyDescriptors$12 = parent$X;
var getOwnPropertyDescriptors4 = getOwnPropertyDescriptors$12;
var defineProperties$42 = { exports: {} };
var $$B2 = _export2;
var DESCRIPTORS$62 = descriptors2;
var defineProperties$32 = objectDefineProperties2.f;
$$B2({
  target: "Object",
  stat: true,
  forced: Object.defineProperties !== defineProperties$32,
  sham: !DESCRIPTORS$62
}, {
  defineProperties: defineProperties$32
});
var path$o2 = path$y;
var Object$42 = path$o2.Object;
var defineProperties$22 = defineProperties$42.exports = function defineProperties7(T, D) {
  return Object$42.defineProperties(T, D);
};
if (Object$42.defineProperties.sham)
  defineProperties$22.sham = true;
var parent$W = defineProperties$42.exports;
var defineProperties$12 = parent$W;
var defineProperties8 = defineProperties$12;
var defineProperty$a2 = { exports: {} };
var $$A2 = _export2;
var DESCRIPTORS$52 = descriptors2;
var defineProperty$92 = objectDefineProperty2.f;
$$A2({
  target: "Object",
  stat: true,
  forced: Object.defineProperty !== defineProperty$92,
  sham: !DESCRIPTORS$52
}, {
  defineProperty: defineProperty$92
});
var path$n2 = path$y;
var Object$32 = path$n2.Object;
var defineProperty$82 = defineProperty$a2.exports = function defineProperty9(it2, key, desc) {
  return Object$32.defineProperty(it2, key, desc);
};
if (Object$32.defineProperty.sham)
  defineProperty$82.sham = true;
var parent$V2 = defineProperty$a2.exports;
var defineProperty$72 = parent$V2;
var defineProperty$62 = defineProperty$72;
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var parent$U2 = defineProperty$72;
var defineProperty$52 = parent$U2;
var parent$T2 = defineProperty$52;
var defineProperty$42 = parent$T2;
var defineProperty$32 = defineProperty$42;
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    defineProperty$32(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  defineProperty$32(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    defineProperty$32(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var $$z2 = _export2;
var isArray$92 = isArray$c2;
$$z2({
  target: "Array",
  stat: true
}, {
  isArray: isArray$92
});
var path$m2 = path$y;
var isArray$82 = path$m2.Array.isArray;
var parent$S2 = isArray$82;
var isArray$72 = parent$S2;
var parent$R2 = isArray$72;
var isArray$62 = parent$R2;
var parent$Q2 = isArray$62;
var isArray$52 = parent$Q2;
var isArray$42 = isArray$52;
function _arrayWithHoles2(arr) {
  if (isArray$42(arr))
    return arr;
}
var fails$f2 = fails$t;
var wellKnownSymbol$52 = wellKnownSymbol$j2;
var V8_VERSION$12 = engineV8Version2;
var SPECIES$22 = wellKnownSymbol$52("species");
var arrayMethodHasSpeciesSupport$52 = function(METHOD_NAME) {
  return V8_VERSION$12 >= 51 || !fails$f2(function() {
    var array2 = [];
    var constructor = array2.constructor = {};
    constructor[SPECIES$22] = function() {
      return {
        foo: 1
      };
    };
    return array2[METHOD_NAME](Boolean).foo !== 1;
  });
};
var $$y2 = _export2;
var global$j2 = global$O;
var fails$e2 = fails$t;
var isArray$32 = isArray$c2;
var isObject$a2 = isObject$j;
var toObject$62 = toObject$d2;
var lengthOfArrayLike$62 = lengthOfArrayLike$b2;
var createProperty$22 = createProperty$62;
var arraySpeciesCreate$12 = arraySpeciesCreate$32;
var arrayMethodHasSpeciesSupport$42 = arrayMethodHasSpeciesSupport$52;
var wellKnownSymbol$42 = wellKnownSymbol$j2;
var V8_VERSION2 = engineV8Version2;
var IS_CONCAT_SPREADABLE2 = wellKnownSymbol$42("isConcatSpreadable");
var MAX_SAFE_INTEGER$12 = 9007199254740991;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED2 = "Maximum allowed index exceeded";
var TypeError$82 = global$j2.TypeError;
var IS_CONCAT_SPREADABLE_SUPPORT2 = V8_VERSION2 >= 51 || !fails$e2(function() {
  var array2 = [];
  array2[IS_CONCAT_SPREADABLE2] = false;
  return array2.concat()[0] !== array2;
});
var SPECIES_SUPPORT2 = arrayMethodHasSpeciesSupport$42("concat");
var isConcatSpreadable2 = function(O) {
  if (!isObject$a2(O))
    return false;
  var spreadable = O[IS_CONCAT_SPREADABLE2];
  return spreadable !== void 0 ? !!spreadable : isArray$32(O);
};
var FORCED$52 = !IS_CONCAT_SPREADABLE_SUPPORT2 || !SPECIES_SUPPORT2;
$$y2({
  target: "Array",
  proto: true,
  forced: FORCED$52
}, {
  concat: function concat3(arg) {
    var O = toObject$62(this);
    var A = arraySpeciesCreate$12(O, 0);
    var n = 0;
    var i, k, length2, len, E;
    for (i = -1, length2 = arguments.length; i < length2; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable2(E)) {
        len = lengthOfArrayLike$62(E);
        if (n + len > MAX_SAFE_INTEGER$12)
          throw TypeError$82(MAXIMUM_ALLOWED_INDEX_EXCEEDED2);
        for (k = 0; k < len; k++, n++)
          if (k in E)
            createProperty$22(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER$12)
          throw TypeError$82(MAXIMUM_ALLOWED_INDEX_EXCEEDED2);
        createProperty$22(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});
var defineWellKnownSymbol$j2 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$j2("asyncIterator");
var defineWellKnownSymbol$i2 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$i2("hasInstance");
var defineWellKnownSymbol$h2 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$h2("isConcatSpreadable");
var defineWellKnownSymbol$g2 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$g2("iterator");
var defineWellKnownSymbol$f2 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$f2("match");
var defineWellKnownSymbol$e2 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$e2("matchAll");
var defineWellKnownSymbol$d2 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$d2("replace");
var defineWellKnownSymbol$c2 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$c2("search");
var defineWellKnownSymbol$b2 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$b2("species");
var defineWellKnownSymbol$a2 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$a2("split");
var defineWellKnownSymbol$92 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$92("toPrimitive");
var defineWellKnownSymbol$82 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$82("toStringTag");
var defineWellKnownSymbol$72 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$72("unscopables");
var global$i2 = global$O;
var setToStringTag$12 = setToStringTag$52;
setToStringTag$12(global$i2.JSON, "JSON", true);
var path$l2 = path$y;
var symbol$52 = path$l2.Symbol;
var parent$P2 = symbol$52;
var symbol$42 = parent$P2;
var parent$O2 = symbol$42;
var symbol$32 = parent$O2;
var defineWellKnownSymbol$62 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$62("asyncDispose");
var defineWellKnownSymbol$52 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$52("dispose");
var defineWellKnownSymbol$42 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$42("matcher");
var defineWellKnownSymbol$32 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$32("metadata");
var defineWellKnownSymbol$22 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$22("observable");
var defineWellKnownSymbol$12 = defineWellKnownSymbol$l2;
defineWellKnownSymbol$12("patternMatch");
var defineWellKnownSymbol2 = defineWellKnownSymbol$l2;
defineWellKnownSymbol2("replaceAll");
var parent$N2 = symbol$32;
var symbol$22 = parent$N2;
var symbol$12 = symbol$22;
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof symbol$12 !== "undefined" && getIteratorMethod$12(arr) || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
var $$x2 = _export2;
var global$h2 = global$O;
var isArray$22 = isArray$c2;
var isConstructor$12 = isConstructor$42;
var isObject$92 = isObject$j;
var toAbsoluteIndex$22 = toAbsoluteIndex$52;
var lengthOfArrayLike$52 = lengthOfArrayLike$b2;
var toIndexedObject$12 = toIndexedObject$b2;
var createProperty$12 = createProperty$62;
var wellKnownSymbol$32 = wellKnownSymbol$j2;
var arrayMethodHasSpeciesSupport$32 = arrayMethodHasSpeciesSupport$52;
var un$Slice2 = arraySlice$52;
var HAS_SPECIES_SUPPORT$32 = arrayMethodHasSpeciesSupport$32("slice");
var SPECIES$12 = wellKnownSymbol$32("species");
var Array$22 = global$h2.Array;
var max$12 = Math.max;
$$x2({
  target: "Array",
  proto: true,
  forced: !HAS_SPECIES_SUPPORT$32
}, {
  slice: function slice3(start, end) {
    var O = toIndexedObject$12(this);
    var length2 = lengthOfArrayLike$52(O);
    var k = toAbsoluteIndex$22(start, length2);
    var fin = toAbsoluteIndex$22(end === void 0 ? length2 : end, length2);
    var Constructor, result, n;
    if (isArray$22(O)) {
      Constructor = O.constructor;
      if (isConstructor$12(Constructor) && (Constructor === Array$22 || isArray$22(Constructor.prototype))) {
        Constructor = void 0;
      } else if (isObject$92(Constructor)) {
        Constructor = Constructor[SPECIES$12];
        if (Constructor === null)
          Constructor = void 0;
      }
      if (Constructor === Array$22 || Constructor === void 0) {
        return un$Slice2(O, k, fin);
      }
    }
    result = new (Constructor === void 0 ? Array$22 : Constructor)(max$12(fin - k, 0));
    for (n = 0; k < fin; k++, n++)
      if (k in O)
        createProperty$12(result, n, O[k]);
    result.length = n;
    return result;
  }
});
var entryVirtual$g2 = entryVirtual$i2;
var slice$62 = entryVirtual$g2("Array").slice;
var isPrototypeOf$g2 = objectIsPrototypeOf2;
var method$d2 = slice$62;
var ArrayPrototype$e2 = Array.prototype;
var slice$52 = function(it2) {
  var own = it2.slice;
  return it2 === ArrayPrototype$e2 || isPrototypeOf$g2(ArrayPrototype$e2, it2) && own === ArrayPrototype$e2.slice ? method$d2 : own;
};
var parent$M2 = slice$52;
var slice$42 = parent$M2;
var parent$L2 = slice$42;
var slice$32 = parent$L2;
var parent$K2 = slice$32;
var slice$22 = parent$K2;
var slice$12 = slice$22;
var parent$J2 = from$42;
var from$22 = parent$J2;
var parent$I2 = from$22;
var from$12 = parent$I2;
var from4 = from$12;
function _arrayLikeToArray$8(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _unsupportedIterableToArray$8(o, minLen) {
  var _context;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$8(o, minLen);
  var n = slice$12(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from4(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$8(o, minLen);
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray$8(arr, i) || _nonIterableRest2();
}
var WrappedWellKnownSymbolModule2 = wellKnownSymbolWrapped2;
var iterator$42 = WrappedWellKnownSymbolModule2.f("iterator");
var parent$H2 = iterator$42;
var iterator$32 = parent$H2;
var parent$G2 = iterator$32;
var iterator$22 = parent$G2;
var parent$F2 = iterator$22;
var iterator$12 = parent$F2;
var iterator2 = iterator$12;
function _typeof2(obj) {
  "@babel/helpers - typeof";
  return _typeof2 = typeof symbol$12 == "function" && typeof iterator2 == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof symbol$12 == "function" && obj2.constructor === symbol$12 && obj2 !== symbol$12.prototype ? "symbol" : typeof obj2;
  }, _typeof2(obj);
}
function _arrayWithoutHoles2(arr) {
  if (isArray$42(arr))
    return _arrayLikeToArray$8(arr);
}
function _iterableToArray2(iter) {
  if (typeof symbol$12 !== "undefined" && getIteratorMethod$12(iter) != null || iter["@@iterator"] != null)
    return from4(iter);
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray$8(arr) || _nonIterableSpread2();
}
var symbol2 = symbol$42;
var entryVirtual$f2 = entryVirtual$i2;
var concat$32 = entryVirtual$f2("Array").concat;
var isPrototypeOf$f2 = objectIsPrototypeOf2;
var method$c2 = concat$32;
var ArrayPrototype$d2 = Array.prototype;
var concat$22 = function(it2) {
  var own = it2.concat;
  return it2 === ArrayPrototype$d2 || isPrototypeOf$f2(ArrayPrototype$d2, it2) && own === ArrayPrototype$d2.concat ? method$c2 : own;
};
var parent$E2 = concat$22;
var concat$12 = parent$E2;
var concat4 = concat$12;
var slice4 = slice$42;
var $$w2 = _export2;
var ownKeys$42 = ownKeys$62;
$$w2({
  target: "Reflect",
  stat: true
}, {
  ownKeys: ownKeys$42
});
var path$k2 = path$y;
path$k2.Reflect.ownKeys;
var isArray$12 = isArray$72;
var $$v2 = _export2;
var $map2 = arrayIteration2.map;
var arrayMethodHasSpeciesSupport$22 = arrayMethodHasSpeciesSupport$52;
var HAS_SPECIES_SUPPORT$22 = arrayMethodHasSpeciesSupport$22("map");
$$v2({
  target: "Array",
  proto: true,
  forced: !HAS_SPECIES_SUPPORT$22
}, {
  map: function map3(callbackfn) {
    return $map2(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$e2 = entryVirtual$i2;
var map$62 = entryVirtual$e2("Array").map;
var isPrototypeOf$e2 = objectIsPrototypeOf2;
var method$b2 = map$62;
var ArrayPrototype$c2 = Array.prototype;
var map$52 = function(it2) {
  var own = it2.map;
  return it2 === ArrayPrototype$c2 || isPrototypeOf$e2(ArrayPrototype$c2, it2) && own === ArrayPrototype$c2.map ? method$b2 : own;
};
var parent$D2 = map$52;
var map$42 = parent$D2;
var map$32 = map$42;
var $$u2 = _export2;
var toObject$52 = toObject$d2;
var nativeKeys2 = objectKeys$42;
var fails$d2 = fails$t;
var FAILS_ON_PRIMITIVES$32 = fails$d2(function() {
  nativeKeys2(1);
});
$$u2({
  target: "Object",
  stat: true,
  forced: FAILS_ON_PRIMITIVES$32
}, {
  keys: function keys5(it2) {
    return nativeKeys2(toObject$52(it2));
  }
});
var path$j2 = path$y;
var keys$22 = path$j2.Object.keys;
var parent$C2 = keys$22;
var keys$12 = parent$C2;
var keys6 = keys$12;
var $$t2 = _export2;
var global$g2 = global$O;
var uncurryThis$c2 = functionUncurryThis2;
var Date$12 = global$g2.Date;
var getTime2 = uncurryThis$c2(Date$12.prototype.getTime);
$$t2({
  target: "Date",
  stat: true
}, {
  now: function now3() {
    return getTime2(new Date$12());
  }
});
var path$i2 = path$y;
var now$3 = path$i2.Date.now;
var parent$B2 = now$3;
var now$2 = parent$B2;
var now$1 = now$2;
var fails$c2 = fails$t;
var arrayMethodIsStrict$6 = function(METHOD_NAME, argument) {
  var method3 = [][METHOD_NAME];
  return !!method3 && fails$c2(function() {
    method3.call(null, argument || function() {
      return 1;
    }, 1);
  });
};
var $forEach2 = arrayIteration2.forEach;
var arrayMethodIsStrict$52 = arrayMethodIsStrict$6;
var STRICT_METHOD$5 = arrayMethodIsStrict$52("forEach");
var arrayForEach2 = !STRICT_METHOD$5 ? function forEach3(callbackfn) {
  return $forEach2(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
} : [].forEach;
var $$s2 = _export2;
var forEach$6 = arrayForEach2;
$$s2({
  target: "Array",
  proto: true,
  forced: [].forEach != forEach$6
}, {
  forEach: forEach$6
});
var entryVirtual$d2 = entryVirtual$i2;
var forEach$52 = entryVirtual$d2("Array").forEach;
var parent$A2 = forEach$52;
var forEach$42 = parent$A2;
var classof$42 = classof$c2;
var hasOwn$42 = hasOwnProperty_12;
var isPrototypeOf$d2 = objectIsPrototypeOf2;
var method$a2 = forEach$42;
var ArrayPrototype$b2 = Array.prototype;
var DOMIterables$12 = {
  DOMTokenList: true,
  NodeList: true
};
var forEach$32 = function(it2) {
  var own = it2.forEach;
  return it2 === ArrayPrototype$b2 || isPrototypeOf$d2(ArrayPrototype$b2, it2) && own === ArrayPrototype$b2.forEach || hasOwn$42(DOMIterables$12, classof$42(it2)) ? method$a2 : own;
};
var forEach$22 = forEach$32;
var $$r2 = _export2;
var uncurryThis$b2 = functionUncurryThis2;
var isArray4 = isArray$c2;
var un$Reverse2 = uncurryThis$b2([].reverse);
var test$12 = [1, 2];
$$r2({
  target: "Array",
  proto: true,
  forced: String(test$12) === String(test$12.reverse())
}, {
  reverse: function reverse3() {
    if (isArray4(this))
      this.length = this.length;
    return un$Reverse2(this);
  }
});
var entryVirtual$c2 = entryVirtual$i2;
var reverse$32 = entryVirtual$c2("Array").reverse;
var isPrototypeOf$c2 = objectIsPrototypeOf2;
var method$92 = reverse$32;
var ArrayPrototype$a2 = Array.prototype;
var reverse$22 = function(it2) {
  var own = it2.reverse;
  return it2 === ArrayPrototype$a2 || isPrototypeOf$c2(ArrayPrototype$a2, it2) && own === ArrayPrototype$a2.reverse ? method$92 : own;
};
var parent$z2 = reverse$22;
var reverse$12 = parent$z2;
var reverse4 = reverse$12;
var $$q2 = _export2;
var global$f2 = global$O;
var toAbsoluteIndex$12 = toAbsoluteIndex$52;
var toIntegerOrInfinity2 = toIntegerOrInfinity$42;
var lengthOfArrayLike$42 = lengthOfArrayLike$b2;
var toObject$42 = toObject$d2;
var arraySpeciesCreate2 = arraySpeciesCreate$32;
var createProperty2 = createProperty$62;
var arrayMethodHasSpeciesSupport$12 = arrayMethodHasSpeciesSupport$52;
var HAS_SPECIES_SUPPORT$12 = arrayMethodHasSpeciesSupport$12("splice");
var TypeError$72 = global$f2.TypeError;
var max2 = Math.max;
var min2 = Math.min;
var MAX_SAFE_INTEGER2 = 9007199254740991;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED2 = "Maximum allowed length exceeded";
$$q2({
  target: "Array",
  proto: true,
  forced: !HAS_SPECIES_SUPPORT$12
}, {
  splice: function splice3(start, deleteCount) {
    var O = toObject$42(this);
    var len = lengthOfArrayLike$42(O);
    var actualStart = toAbsoluteIndex$12(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from5, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min2(max2(toIntegerOrInfinity2(deleteCount), 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER2) {
      throw TypeError$72(MAXIMUM_ALLOWED_LENGTH_EXCEEDED2);
    }
    A = arraySpeciesCreate2(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from5 = actualStart + k;
      if (from5 in O)
        createProperty2(A, k, O[from5]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from5 = k + actualDeleteCount;
        to = k + insertCount;
        if (from5 in O)
          O[to] = O[from5];
        else
          delete O[to];
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--)
        delete O[k - 1];
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from5 = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from5 in O)
          O[to] = O[from5];
        else
          delete O[to];
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});
var entryVirtual$b2 = entryVirtual$i2;
var splice$4 = entryVirtual$b2("Array").splice;
var isPrototypeOf$b2 = objectIsPrototypeOf2;
var method$82 = splice$4;
var ArrayPrototype$92 = Array.prototype;
var splice$32 = function(it2) {
  var own = it2.splice;
  return it2 === ArrayPrototype$92 || isPrototypeOf$b2(ArrayPrototype$92, it2) && own === ArrayPrototype$92.splice ? method$82 : own;
};
var parent$y2 = splice$32;
var splice$22 = parent$y2;
var splice$12 = splice$22;
var $$p2 = _export2;
var $includes2 = arrayIncludes2.includes;
$$p2({
  target: "Array",
  proto: true
}, {
  includes: function includes3(el) {
    return $includes2(this, el, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$a2 = entryVirtual$i2;
var includes$4 = entryVirtual$a2("Array").includes;
var isObject$82 = isObject$j;
var classof$32 = classofRaw$12;
var wellKnownSymbol$22 = wellKnownSymbol$j2;
var MATCH$12 = wellKnownSymbol$22("match");
var isRegexp2 = function(it2) {
  var isRegExp3;
  return isObject$82(it2) && ((isRegExp3 = it2[MATCH$12]) !== void 0 ? !!isRegExp3 : classof$32(it2) == "RegExp");
};
var global$e2 = global$O;
var isRegExp2 = isRegexp2;
var TypeError$62 = global$e2.TypeError;
var notARegexp2 = function(it2) {
  if (isRegExp2(it2)) {
    throw TypeError$62("The method doesn't accept regular expressions");
  }
  return it2;
};
var wellKnownSymbol$12 = wellKnownSymbol$j2;
var MATCH2 = wellKnownSymbol$12("match");
var correctIsRegexpLogic2 = function(METHOD_NAME) {
  var regexp = /./;
  try {
    "/./"[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH2] = false;
      return "/./"[METHOD_NAME](regexp);
    } catch (error2) {
    }
  }
  return false;
};
var $$o2 = _export2;
var uncurryThis$a2 = functionUncurryThis2;
var notARegExp2 = notARegexp2;
var requireObjectCoercible$12 = requireObjectCoercible$52;
var toString$42 = toString$82;
var correctIsRegExpLogic2 = correctIsRegexpLogic2;
var stringIndexOf2 = uncurryThis$a2("".indexOf);
$$o2({
  target: "String",
  proto: true,
  forced: !correctIsRegExpLogic2("includes")
}, {
  includes: function includes4(searchString) {
    return !!~stringIndexOf2(toString$42(requireObjectCoercible$12(this)), toString$42(notARegExp2(searchString)), arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$92 = entryVirtual$i2;
var includes$3 = entryVirtual$92("String").includes;
var isPrototypeOf$a2 = objectIsPrototypeOf2;
var arrayMethod = includes$4;
var stringMethod = includes$3;
var ArrayPrototype$82 = Array.prototype;
var StringPrototype = String.prototype;
var includes$2 = function(it2) {
  var own = it2.includes;
  if (it2 === ArrayPrototype$82 || isPrototypeOf$a2(ArrayPrototype$82, it2) && own === ArrayPrototype$82.includes)
    return arrayMethod;
  if (typeof it2 == "string" || it2 === StringPrototype || isPrototypeOf$a2(StringPrototype, it2) && own === StringPrototype.includes) {
    return stringMethod;
  }
  return own;
};
var parent$x2 = includes$2;
var includes$1 = parent$x2;
var includes5 = includes$1;
var $$n2 = _export2;
var fails$b2 = fails$t;
var toObject$32 = toObject$d2;
var nativeGetPrototypeOf2 = objectGetPrototypeOf2;
var CORRECT_PROTOTYPE_GETTER2 = correctPrototypeGetter2;
var FAILS_ON_PRIMITIVES$22 = fails$b2(function() {
  nativeGetPrototypeOf2(1);
});
$$n2({
  target: "Object",
  stat: true,
  forced: FAILS_ON_PRIMITIVES$22,
  sham: !CORRECT_PROTOTYPE_GETTER2
}, {
  getPrototypeOf: function getPrototypeOf3(it2) {
    return nativeGetPrototypeOf2(toObject$32(it2));
  }
});
var path$h2 = path$y;
var getPrototypeOf$62 = path$h2.Object.getPrototypeOf;
var parent$w2 = getPrototypeOf$62;
var getPrototypeOf$52 = parent$w2;
var getPrototypeOf$42 = getPrototypeOf$52;
var $$m2 = _export2;
var $filter2 = arrayIteration2.filter;
var arrayMethodHasSpeciesSupport2 = arrayMethodHasSpeciesSupport$52;
var HAS_SPECIES_SUPPORT2 = arrayMethodHasSpeciesSupport2("filter");
$$m2({
  target: "Array",
  proto: true,
  forced: !HAS_SPECIES_SUPPORT2
}, {
  filter: function filter3(callbackfn) {
    return $filter2(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$82 = entryVirtual$i2;
var filter$32 = entryVirtual$82("Array").filter;
var isPrototypeOf$92 = objectIsPrototypeOf2;
var method$72 = filter$32;
var ArrayPrototype$72 = Array.prototype;
var filter$22 = function(it2) {
  var own = it2.filter;
  return it2 === ArrayPrototype$72 || isPrototypeOf$92(ArrayPrototype$72, it2) && own === ArrayPrototype$72.filter ? method$72 : own;
};
var parent$v2 = filter$22;
var filter$12 = parent$v2;
var filter4 = filter$12;
var DESCRIPTORS$42 = descriptors2;
var uncurryThis$92 = functionUncurryThis2;
var objectKeys2 = objectKeys$42;
var toIndexedObject2 = toIndexedObject$b2;
var $propertyIsEnumerable2 = objectPropertyIsEnumerable2.f;
var propertyIsEnumerable6 = uncurryThis$92($propertyIsEnumerable2);
var push$22 = uncurryThis$92([].push);
var createMethod$22 = function(TO_ENTRIES) {
  return function(it2) {
    var O = toIndexedObject2(it2);
    var keys7 = objectKeys2(O);
    var length2 = keys7.length;
    var i = 0;
    var result = [];
    var key;
    while (length2 > i) {
      key = keys7[i++];
      if (!DESCRIPTORS$42 || propertyIsEnumerable6(O, key)) {
        push$22(result, TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};
var objectToArray2 = {
  entries: createMethod$22(true),
  values: createMethod$22(false)
};
var $$l2 = _export2;
var $values2 = objectToArray2.values;
$$l2({
  target: "Object",
  stat: true
}, {
  values: function values3(O) {
    return $values2(O);
  }
});
var path$g2 = path$y;
path$g2.Object.values;
var whitespaces$4 = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
var uncurryThis$82 = functionUncurryThis2;
var requireObjectCoercible2 = requireObjectCoercible$52;
var toString$32 = toString$82;
var whitespaces$32 = whitespaces$4;
var replace$12 = uncurryThis$82("".replace);
var whitespace2 = "[" + whitespaces$32 + "]";
var ltrim2 = RegExp("^" + whitespace2 + whitespace2 + "*");
var rtrim2 = RegExp(whitespace2 + whitespace2 + "*$");
var createMethod$12 = function(TYPE) {
  return function($this) {
    var string2 = toString$32(requireObjectCoercible2($this));
    if (TYPE & 1)
      string2 = replace$12(string2, ltrim2, "");
    if (TYPE & 2)
      string2 = replace$12(string2, rtrim2, "");
    return string2;
  };
};
var stringTrim2 = {
  start: createMethod$12(1),
  end: createMethod$12(2),
  trim: createMethod$12(3)
};
var global$d2 = global$O;
var fails$a2 = fails$t;
var uncurryThis$72 = functionUncurryThis2;
var toString$22 = toString$82;
var trim$1 = stringTrim2.trim;
var whitespaces$22 = whitespaces$4;
var $parseInt$12 = global$d2.parseInt;
var Symbol$22 = global$d2.Symbol;
var ITERATOR$12 = Symbol$22 && Symbol$22.iterator;
var hex2 = /^[+-]?0x/i;
var exec$12 = uncurryThis$72(hex2.exec);
var FORCED$42 = $parseInt$12(whitespaces$22 + "08") !== 8 || $parseInt$12(whitespaces$22 + "0x16") !== 22 || ITERATOR$12 && !fails$a2(function() {
  $parseInt$12(Object(ITERATOR$12));
});
var numberParseInt2 = FORCED$42 ? function parseInt3(string2, radix) {
  var S = trim$1(toString$22(string2));
  return $parseInt$12(S, radix >>> 0 || (exec$12(hex2, S) ? 16 : 10));
} : $parseInt$12;
var $$k2 = _export2;
var $parseInt2 = numberParseInt2;
$$k2({
  global: true,
  forced: parseInt != $parseInt2
}, {
  parseInt: $parseInt2
});
var path$f2 = path$y;
var _parseInt$2 = path$f2.parseInt;
var parent$u2 = _parseInt$2;
var _parseInt$1 = parent$u2;
var _parseInt = _parseInt$1;
var $$j2 = _export2;
var uncurryThis$62 = functionUncurryThis2;
var $IndexOf2 = arrayIncludes2.indexOf;
var arrayMethodIsStrict$42 = arrayMethodIsStrict$6;
var un$IndexOf2 = uncurryThis$62([].indexOf);
var NEGATIVE_ZERO2 = !!un$IndexOf2 && 1 / un$IndexOf2([1], 1, -0) < 0;
var STRICT_METHOD$42 = arrayMethodIsStrict$42("indexOf");
$$j2({
  target: "Array",
  proto: true,
  forced: NEGATIVE_ZERO2 || !STRICT_METHOD$42
}, {
  indexOf: function indexOf3(searchElement) {
    var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
    return NEGATIVE_ZERO2 ? un$IndexOf2(this, searchElement, fromIndex) || 0 : $IndexOf2(this, searchElement, fromIndex);
  }
});
var entryVirtual$72 = entryVirtual$i2;
var indexOf$3 = entryVirtual$72("Array").indexOf;
var isPrototypeOf$82 = objectIsPrototypeOf2;
var method$62 = indexOf$3;
var ArrayPrototype$62 = Array.prototype;
var indexOf$2 = function(it2) {
  var own = it2.indexOf;
  return it2 === ArrayPrototype$62 || isPrototypeOf$82(ArrayPrototype$62, it2) && own === ArrayPrototype$62.indexOf ? method$62 : own;
};
var parent$t2 = indexOf$2;
var indexOf$1 = parent$t2;
var indexOf4 = indexOf$1;
var PROPER_FUNCTION_NAME2 = functionName2.PROPER;
var fails$92 = fails$t;
var whitespaces$12 = whitespaces$4;
var non2 = "\u200B\x85\u180E";
var stringTrimForced2 = function(METHOD_NAME) {
  return fails$92(function() {
    return !!whitespaces$12[METHOD_NAME]() || non2[METHOD_NAME]() !== non2 || PROPER_FUNCTION_NAME2 && whitespaces$12[METHOD_NAME].name !== METHOD_NAME;
  });
};
var $$i2 = _export2;
var $trim2 = stringTrim2.trim;
var forcedStringTrimMethod2 = stringTrimForced2;
$$i2({
  target: "String",
  proto: true,
  forced: forcedStringTrimMethod2("trim")
}, {
  trim: function trim3() {
    return $trim2(this);
  }
});
var entryVirtual$62 = entryVirtual$i2;
entryVirtual$62("String").trim;
var $$h2 = _export2;
var DESCRIPTORS$32 = descriptors2;
var create$82 = objectCreate2;
$$h2({
  target: "Object",
  stat: true,
  sham: !DESCRIPTORS$32
}, {
  create: create$82
});
var path$e2 = path$y;
var Object$22 = path$e2.Object;
var create$72 = function create7(P, D) {
  return Object$22.create(P, D);
};
var parent$s2 = create$72;
var create$62 = parent$s2;
var create$52 = create$62;
var $$g2 = _export2;
var global$c2 = global$O;
var getBuiltIn$22 = getBuiltIn$92;
var apply$32 = functionApply2;
var uncurryThis$52 = functionUncurryThis2;
var fails$82 = fails$t;
var Array$12 = global$c2.Array;
var $stringify2 = getBuiltIn$22("JSON", "stringify");
var exec2 = uncurryThis$52(/./.exec);
var charAt$12 = uncurryThis$52("".charAt);
var charCodeAt2 = uncurryThis$52("".charCodeAt);
var replace2 = uncurryThis$52("".replace);
var numberToString2 = uncurryThis$52(1 .toString);
var tester2 = /[\uD800-\uDFFF]/g;
var low2 = /^[\uD800-\uDBFF]$/;
var hi2 = /^[\uDC00-\uDFFF]$/;
var fix2 = function(match3, offset, string2) {
  var prev = charAt$12(string2, offset - 1);
  var next4 = charAt$12(string2, offset + 1);
  if (exec2(low2, match3) && !exec2(hi2, next4) || exec2(hi2, match3) && !exec2(low2, prev)) {
    return "\\u" + numberToString2(charCodeAt2(match3, 0), 16);
  }
  return match3;
};
var FORCED$32 = fails$82(function() {
  return $stringify2("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify2("\uDEAD") !== '"\\udead"';
});
if ($stringify2) {
  $$g2({
    target: "JSON",
    stat: true,
    forced: FORCED$32
  }, {
    stringify: function stringify5(it2, replacer, space) {
      for (var i = 0, l = arguments.length, args = Array$12(l); i < l; i++)
        args[i] = arguments[i];
      var result = apply$32($stringify2, null, args);
      return typeof result == "string" ? replace2(result, tester2, fix2) : result;
    }
  });
}
var path$d2 = path$y;
var apply$22 = functionApply2;
if (!path$d2.JSON)
  path$d2.JSON = {
    stringify: JSON.stringify
  };
var stringify$32 = function stringify3(it2, replacer, space) {
  return apply$22(path$d2.JSON.stringify, null, arguments);
};
var parent$r2 = stringify$32;
var stringify$22 = parent$r2;
var stringify$12 = stringify$22;
var global$b2 = global$O;
var TypeError$52 = global$b2.TypeError;
var validateArgumentsLength$12 = function(passed, required) {
  if (passed < required)
    throw TypeError$52("Not enough arguments");
  return passed;
};
var $$f2 = _export2;
var global$a2 = global$O;
var apply$12 = functionApply2;
var isCallable$12 = isCallable$h2;
var userAgent$22 = engineUserAgent2;
var arraySlice$12 = arraySlice$52;
var validateArgumentsLength2 = validateArgumentsLength$12;
var MSIE2 = /MSIE .\./.test(userAgent$22);
var Function$12 = global$a2.Function;
var wrap2 = function(scheduler) {
  return function(handler, timeout) {
    var boundArgs = validateArgumentsLength2(arguments.length, 1) > 2;
    var fn = isCallable$12(handler) ? handler : Function$12(handler);
    var args = boundArgs ? arraySlice$12(arguments, 2) : void 0;
    return scheduler(boundArgs ? function() {
      apply$12(fn, this, args);
    } : fn, timeout);
  };
};
$$f2({
  global: true,
  bind: true,
  forced: MSIE2
}, {
  setTimeout: wrap2(global$a2.setTimeout),
  setInterval: wrap2(global$a2.setInterval)
});
var path$c2 = path$y;
var setTimeout$22 = path$c2.setTimeout;
var setTimeout$12 = setTimeout$22;
var toObject$22 = toObject$d2;
var toAbsoluteIndex2 = toAbsoluteIndex$52;
var lengthOfArrayLike$32 = lengthOfArrayLike$b2;
var arrayFill2 = function fill3(value) {
  var O = toObject$22(this);
  var length2 = lengthOfArrayLike$32(O);
  var argumentsLength = arguments.length;
  var index2 = toAbsoluteIndex2(argumentsLength > 1 ? arguments[1] : void 0, length2);
  var end = argumentsLength > 2 ? arguments[2] : void 0;
  var endPos = end === void 0 ? length2 : toAbsoluteIndex2(end, length2);
  while (endPos > index2)
    O[index2++] = value;
  return O;
};
var $$e2 = _export2;
var fill$4 = arrayFill2;
$$e2({
  target: "Array",
  proto: true
}, {
  fill: fill$4
});
var entryVirtual$52 = entryVirtual$i2;
var fill$3 = entryVirtual$52("Array").fill;
var isPrototypeOf$72 = objectIsPrototypeOf2;
var method$52 = fill$3;
var ArrayPrototype$52 = Array.prototype;
var fill$2 = function(it2) {
  var own = it2.fill;
  return it2 === ArrayPrototype$52 || isPrototypeOf$72(ArrayPrototype$52, it2) && own === ArrayPrototype$52.fill ? method$52 : own;
};
var parent$q2 = fill$2;
var fill$1 = parent$q2;
var fill4 = fill$1;
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
function _assertThisInitialized$12(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
var assign4;
if (typeof Object.assign !== "function") {
  assign4 = function assign5(target) {
    if (target === void 0 || target === null) {
      throw new TypeError("Cannot convert undefined or null to object");
    }
    var output = Object(target);
    for (var index2 = 1; index2 < arguments.length; index2++) {
      var source = arguments[index2];
      if (source !== void 0 && source !== null) {
        for (var nextKey in source) {
          if (source.hasOwnProperty(nextKey)) {
            output[nextKey] = source[nextKey];
          }
        }
      }
    }
    return output;
  };
} else {
  assign4 = Object.assign;
}
var assign$12 = assign4;
var VENDOR_PREFIXES2 = ["", "webkit", "Moz", "MS", "ms", "o"];
var TEST_ELEMENT2 = typeof document === "undefined" ? {
  style: {}
} : document.createElement("div");
var TYPE_FUNCTION2 = "function";
var round2 = Math.round;
var abs$1 = Math.abs;
var now4 = Date.now;
function prefixed2(obj, property) {
  var prefix;
  var prop;
  var camelProp = property[0].toUpperCase() + property.slice(1);
  var i = 0;
  while (i < VENDOR_PREFIXES2.length) {
    prefix = VENDOR_PREFIXES2[i];
    prop = prefix ? prefix + camelProp : property;
    if (prop in obj) {
      return prop;
    }
    i++;
  }
  return void 0;
}
var win2;
if (typeof window === "undefined") {
  win2 = {};
} else {
  win2 = window;
}
var PREFIXED_TOUCH_ACTION2 = prefixed2(TEST_ELEMENT2.style, "touchAction");
var NATIVE_TOUCH_ACTION2 = PREFIXED_TOUCH_ACTION2 !== void 0;
function getTouchActionProps2() {
  if (!NATIVE_TOUCH_ACTION2) {
    return false;
  }
  var touchMap = {};
  var cssSupports = win2.CSS && win2.CSS.supports;
  ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function(val) {
    return touchMap[val] = cssSupports ? win2.CSS.supports("touch-action", val) : true;
  });
  return touchMap;
}
var TOUCH_ACTION_COMPUTE2 = "compute";
var TOUCH_ACTION_AUTO2 = "auto";
var TOUCH_ACTION_MANIPULATION2 = "manipulation";
var TOUCH_ACTION_NONE2 = "none";
var TOUCH_ACTION_PAN_X2 = "pan-x";
var TOUCH_ACTION_PAN_Y2 = "pan-y";
var TOUCH_ACTION_MAP2 = getTouchActionProps2();
var MOBILE_REGEX2 = /mobile|tablet|ip(ad|hone|od)|android/i;
var SUPPORT_TOUCH2 = "ontouchstart" in win2;
var SUPPORT_POINTER_EVENTS2 = prefixed2(win2, "PointerEvent") !== void 0;
var SUPPORT_ONLY_TOUCH2 = SUPPORT_TOUCH2 && MOBILE_REGEX2.test(navigator.userAgent);
var INPUT_TYPE_TOUCH2 = "touch";
var INPUT_TYPE_PEN2 = "pen";
var INPUT_TYPE_MOUSE2 = "mouse";
var INPUT_TYPE_KINECT2 = "kinect";
var COMPUTE_INTERVAL2 = 25;
var INPUT_START2 = 1;
var INPUT_MOVE2 = 2;
var INPUT_END2 = 4;
var INPUT_CANCEL2 = 8;
var DIRECTION_NONE2 = 1;
var DIRECTION_LEFT2 = 2;
var DIRECTION_RIGHT2 = 4;
var DIRECTION_UP2 = 8;
var DIRECTION_DOWN2 = 16;
var DIRECTION_HORIZONTAL2 = DIRECTION_LEFT2 | DIRECTION_RIGHT2;
var DIRECTION_VERTICAL2 = DIRECTION_UP2 | DIRECTION_DOWN2;
var DIRECTION_ALL2 = DIRECTION_HORIZONTAL2 | DIRECTION_VERTICAL2;
var PROPS_XY2 = ["x", "y"];
var PROPS_CLIENT_XY2 = ["clientX", "clientY"];
function each2(obj, iterator3, context) {
  var i;
  if (!obj) {
    return;
  }
  if (obj.forEach) {
    obj.forEach(iterator3, context);
  } else if (obj.length !== void 0) {
    i = 0;
    while (i < obj.length) {
      iterator3.call(context, obj[i], i, obj);
      i++;
    }
  } else {
    for (i in obj) {
      obj.hasOwnProperty(i) && iterator3.call(context, obj[i], i, obj);
    }
  }
}
function boolOrFn2(val, args) {
  if (typeof val === TYPE_FUNCTION2) {
    return val.apply(args ? args[0] || void 0 : void 0, args);
  }
  return val;
}
function inStr2(str, find2) {
  return str.indexOf(find2) > -1;
}
function cleanTouchActions2(actions) {
  if (inStr2(actions, TOUCH_ACTION_NONE2)) {
    return TOUCH_ACTION_NONE2;
  }
  var hasPanX = inStr2(actions, TOUCH_ACTION_PAN_X2);
  var hasPanY = inStr2(actions, TOUCH_ACTION_PAN_Y2);
  if (hasPanX && hasPanY) {
    return TOUCH_ACTION_NONE2;
  }
  if (hasPanX || hasPanY) {
    return hasPanX ? TOUCH_ACTION_PAN_X2 : TOUCH_ACTION_PAN_Y2;
  }
  if (inStr2(actions, TOUCH_ACTION_MANIPULATION2)) {
    return TOUCH_ACTION_MANIPULATION2;
  }
  return TOUCH_ACTION_AUTO2;
}
var TouchAction2 = function() {
  function TouchAction3(manager, value) {
    this.manager = manager;
    this.set(value);
  }
  var _proto = TouchAction3.prototype;
  _proto.set = function set3(value) {
    if (value === TOUCH_ACTION_COMPUTE2) {
      value = this.compute();
    }
    if (NATIVE_TOUCH_ACTION2 && this.manager.element.style && TOUCH_ACTION_MAP2[value]) {
      this.manager.element.style[PREFIXED_TOUCH_ACTION2] = value;
    }
    this.actions = value.toLowerCase().trim();
  };
  _proto.update = function update() {
    this.set(this.manager.options.touchAction);
  };
  _proto.compute = function compute() {
    var actions = [];
    each2(this.manager.recognizers, function(recognizer) {
      if (boolOrFn2(recognizer.options.enable, [recognizer])) {
        actions = actions.concat(recognizer.getTouchAction());
      }
    });
    return cleanTouchActions2(actions.join(" "));
  };
  _proto.preventDefaults = function preventDefaults(input) {
    var srcEvent = input.srcEvent;
    var direction = input.offsetDirection;
    if (this.manager.session.prevented) {
      srcEvent.preventDefault();
      return;
    }
    var actions = this.actions;
    var hasNone = inStr2(actions, TOUCH_ACTION_NONE2) && !TOUCH_ACTION_MAP2[TOUCH_ACTION_NONE2];
    var hasPanY = inStr2(actions, TOUCH_ACTION_PAN_Y2) && !TOUCH_ACTION_MAP2[TOUCH_ACTION_PAN_Y2];
    var hasPanX = inStr2(actions, TOUCH_ACTION_PAN_X2) && !TOUCH_ACTION_MAP2[TOUCH_ACTION_PAN_X2];
    if (hasNone) {
      var isTapPointer = input.pointers.length === 1;
      var isTapMovement = input.distance < 2;
      var isTapTouchTime = input.deltaTime < 250;
      if (isTapPointer && isTapMovement && isTapTouchTime) {
        return;
      }
    }
    if (hasPanX && hasPanY) {
      return;
    }
    if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL2 || hasPanX && direction & DIRECTION_VERTICAL2) {
      return this.preventSrc(srcEvent);
    }
  };
  _proto.preventSrc = function preventSrc(srcEvent) {
    this.manager.session.prevented = true;
    srcEvent.preventDefault();
  };
  return TouchAction3;
}();
function hasParent2(node, parent3) {
  while (node) {
    if (node === parent3) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
}
function getCenter2(pointers) {
  var pointersLength = pointers.length;
  if (pointersLength === 1) {
    return {
      x: round2(pointers[0].clientX),
      y: round2(pointers[0].clientY)
    };
  }
  var x = 0;
  var y = 0;
  var i = 0;
  while (i < pointersLength) {
    x += pointers[i].clientX;
    y += pointers[i].clientY;
    i++;
  }
  return {
    x: round2(x / pointersLength),
    y: round2(y / pointersLength)
  };
}
function simpleCloneInputData2(input) {
  var pointers = [];
  var i = 0;
  while (i < input.pointers.length) {
    pointers[i] = {
      clientX: round2(input.pointers[i].clientX),
      clientY: round2(input.pointers[i].clientY)
    };
    i++;
  }
  return {
    timeStamp: now4(),
    pointers,
    center: getCenter2(pointers),
    deltaX: input.deltaX,
    deltaY: input.deltaY
  };
}
function getDistance2(p1, p2, props) {
  if (!props) {
    props = PROPS_XY2;
  }
  var x = p2[props[0]] - p1[props[0]];
  var y = p2[props[1]] - p1[props[1]];
  return Math.sqrt(x * x + y * y);
}
function getAngle2(p1, p2, props) {
  if (!props) {
    props = PROPS_XY2;
  }
  var x = p2[props[0]] - p1[props[0]];
  var y = p2[props[1]] - p1[props[1]];
  return Math.atan2(y, x) * 180 / Math.PI;
}
function getDirection2(x, y) {
  if (x === y) {
    return DIRECTION_NONE2;
  }
  if (abs$1(x) >= abs$1(y)) {
    return x < 0 ? DIRECTION_LEFT2 : DIRECTION_RIGHT2;
  }
  return y < 0 ? DIRECTION_UP2 : DIRECTION_DOWN2;
}
function computeDeltaXY2(session, input) {
  var center = input.center;
  var offset = session.offsetDelta || {};
  var prevDelta = session.prevDelta || {};
  var prevInput = session.prevInput || {};
  if (input.eventType === INPUT_START2 || prevInput.eventType === INPUT_END2) {
    prevDelta = session.prevDelta = {
      x: prevInput.deltaX || 0,
      y: prevInput.deltaY || 0
    };
    offset = session.offsetDelta = {
      x: center.x,
      y: center.y
    };
  }
  input.deltaX = prevDelta.x + (center.x - offset.x);
  input.deltaY = prevDelta.y + (center.y - offset.y);
}
function getVelocity2(deltaTime, x, y) {
  return {
    x: x / deltaTime || 0,
    y: y / deltaTime || 0
  };
}
function getScale2(start, end) {
  return getDistance2(end[0], end[1], PROPS_CLIENT_XY2) / getDistance2(start[0], start[1], PROPS_CLIENT_XY2);
}
function getRotation2(start, end) {
  return getAngle2(end[1], end[0], PROPS_CLIENT_XY2) + getAngle2(start[1], start[0], PROPS_CLIENT_XY2);
}
function computeIntervalInputData2(session, input) {
  var last = session.lastInterval || input;
  var deltaTime = input.timeStamp - last.timeStamp;
  var velocity;
  var velocityX;
  var velocityY;
  var direction;
  if (input.eventType !== INPUT_CANCEL2 && (deltaTime > COMPUTE_INTERVAL2 || last.velocity === void 0)) {
    var deltaX = input.deltaX - last.deltaX;
    var deltaY = input.deltaY - last.deltaY;
    var v = getVelocity2(deltaTime, deltaX, deltaY);
    velocityX = v.x;
    velocityY = v.y;
    velocity = abs$1(v.x) > abs$1(v.y) ? v.x : v.y;
    direction = getDirection2(deltaX, deltaY);
    session.lastInterval = input;
  } else {
    velocity = last.velocity;
    velocityX = last.velocityX;
    velocityY = last.velocityY;
    direction = last.direction;
  }
  input.velocity = velocity;
  input.velocityX = velocityX;
  input.velocityY = velocityY;
  input.direction = direction;
}
function computeInputData2(manager, input) {
  var session = manager.session;
  var pointers = input.pointers;
  var pointersLength = pointers.length;
  if (!session.firstInput) {
    session.firstInput = simpleCloneInputData2(input);
  }
  if (pointersLength > 1 && !session.firstMultiple) {
    session.firstMultiple = simpleCloneInputData2(input);
  } else if (pointersLength === 1) {
    session.firstMultiple = false;
  }
  var firstInput = session.firstInput, firstMultiple = session.firstMultiple;
  var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
  var center = input.center = getCenter2(pointers);
  input.timeStamp = now4();
  input.deltaTime = input.timeStamp - firstInput.timeStamp;
  input.angle = getAngle2(offsetCenter, center);
  input.distance = getDistance2(offsetCenter, center);
  computeDeltaXY2(session, input);
  input.offsetDirection = getDirection2(input.deltaX, input.deltaY);
  var overallVelocity = getVelocity2(input.deltaTime, input.deltaX, input.deltaY);
  input.overallVelocityX = overallVelocity.x;
  input.overallVelocityY = overallVelocity.y;
  input.overallVelocity = abs$1(overallVelocity.x) > abs$1(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
  input.scale = firstMultiple ? getScale2(firstMultiple.pointers, pointers) : 1;
  input.rotation = firstMultiple ? getRotation2(firstMultiple.pointers, pointers) : 0;
  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
  computeIntervalInputData2(session, input);
  var target = manager.element;
  var srcEvent = input.srcEvent;
  var srcEventTarget;
  if (srcEvent.composedPath) {
    srcEventTarget = srcEvent.composedPath()[0];
  } else if (srcEvent.path) {
    srcEventTarget = srcEvent.path[0];
  } else {
    srcEventTarget = srcEvent.target;
  }
  if (hasParent2(srcEventTarget, target)) {
    target = srcEventTarget;
  }
  input.target = target;
}
function inputHandler2(manager, eventType, input) {
  var pointersLen = input.pointers.length;
  var changedPointersLen = input.changedPointers.length;
  var isFirst = eventType & INPUT_START2 && pointersLen - changedPointersLen === 0;
  var isFinal = eventType & (INPUT_END2 | INPUT_CANCEL2) && pointersLen - changedPointersLen === 0;
  input.isFirst = !!isFirst;
  input.isFinal = !!isFinal;
  if (isFirst) {
    manager.session = {};
  }
  input.eventType = eventType;
  computeInputData2(manager, input);
  manager.emit("hammer.input", input);
  manager.recognize(input);
  manager.session.prevInput = input;
}
function splitStr2(str) {
  return str.trim().split(/\s+/g);
}
function addEventListeners2(target, types, handler) {
  each2(splitStr2(types), function(type) {
    target.addEventListener(type, handler, false);
  });
}
function removeEventListeners2(target, types, handler) {
  each2(splitStr2(types), function(type) {
    target.removeEventListener(type, handler, false);
  });
}
function getWindowForElement2(element) {
  var doc = element.ownerDocument || element;
  return doc.defaultView || doc.parentWindow || window;
}
var Input2 = function() {
  function Input3(manager, callback) {
    var self2 = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;
    this.domHandler = function(ev) {
      if (boolOrFn2(manager.options.enable, [manager])) {
        self2.handler(ev);
      }
    };
    this.init();
  }
  var _proto = Input3.prototype;
  _proto.handler = function handler() {
  };
  _proto.init = function init() {
    this.evEl && addEventListeners2(this.element, this.evEl, this.domHandler);
    this.evTarget && addEventListeners2(this.target, this.evTarget, this.domHandler);
    this.evWin && addEventListeners2(getWindowForElement2(this.element), this.evWin, this.domHandler);
  };
  _proto.destroy = function destroy() {
    this.evEl && removeEventListeners2(this.element, this.evEl, this.domHandler);
    this.evTarget && removeEventListeners2(this.target, this.evTarget, this.domHandler);
    this.evWin && removeEventListeners2(getWindowForElement2(this.element), this.evWin, this.domHandler);
  };
  return Input3;
}();
function inArray2(src, find2, findByKey) {
  if (src.indexOf && !findByKey) {
    return src.indexOf(find2);
  } else {
    var i = 0;
    while (i < src.length) {
      if (findByKey && src[i][findByKey] == find2 || !findByKey && src[i] === find2) {
        return i;
      }
      i++;
    }
    return -1;
  }
}
var POINTER_INPUT_MAP2 = {
  pointerdown: INPUT_START2,
  pointermove: INPUT_MOVE2,
  pointerup: INPUT_END2,
  pointercancel: INPUT_CANCEL2,
  pointerout: INPUT_CANCEL2
};
var IE10_POINTER_TYPE_ENUM2 = {
  2: INPUT_TYPE_TOUCH2,
  3: INPUT_TYPE_PEN2,
  4: INPUT_TYPE_MOUSE2,
  5: INPUT_TYPE_KINECT2
};
var POINTER_ELEMENT_EVENTS2 = "pointerdown";
var POINTER_WINDOW_EVENTS2 = "pointermove pointerup pointercancel";
if (win2.MSPointerEvent && !win2.PointerEvent) {
  POINTER_ELEMENT_EVENTS2 = "MSPointerDown";
  POINTER_WINDOW_EVENTS2 = "MSPointerMove MSPointerUp MSPointerCancel";
}
var PointerEventInput2 = function(_Input) {
  _inheritsLoose2(PointerEventInput3, _Input);
  function PointerEventInput3() {
    var _this;
    var proto = PointerEventInput3.prototype;
    proto.evEl = POINTER_ELEMENT_EVENTS2;
    proto.evWin = POINTER_WINDOW_EVENTS2;
    _this = _Input.apply(this, arguments) || this;
    _this.store = _this.manager.session.pointerEvents = [];
    return _this;
  }
  var _proto = PointerEventInput3.prototype;
  _proto.handler = function handler(ev) {
    var store = this.store;
    var removePointer = false;
    var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
    var eventType = POINTER_INPUT_MAP2[eventTypeNormalized];
    var pointerType = IE10_POINTER_TYPE_ENUM2[ev.pointerType] || ev.pointerType;
    var isTouch = pointerType === INPUT_TYPE_TOUCH2;
    var storeIndex = inArray2(store, ev.pointerId, "pointerId");
    if (eventType & INPUT_START2 && (ev.button === 0 || isTouch)) {
      if (storeIndex < 0) {
        store.push(ev);
        storeIndex = store.length - 1;
      }
    } else if (eventType & (INPUT_END2 | INPUT_CANCEL2)) {
      removePointer = true;
    }
    if (storeIndex < 0) {
      return;
    }
    store[storeIndex] = ev;
    this.callback(this.manager, eventType, {
      pointers: store,
      changedPointers: [ev],
      pointerType,
      srcEvent: ev
    });
    if (removePointer) {
      store.splice(storeIndex, 1);
    }
  };
  return PointerEventInput3;
}(Input2);
function toArray2(obj) {
  return Array.prototype.slice.call(obj, 0);
}
function uniqueArray2(src, key, sort5) {
  var results = [];
  var values5 = [];
  var i = 0;
  while (i < src.length) {
    var val = key ? src[i][key] : src[i];
    if (inArray2(values5, val) < 0) {
      results.push(src[i]);
    }
    values5[i] = val;
    i++;
  }
  if (sort5) {
    if (!key) {
      results = results.sort();
    } else {
      results = results.sort(function(a, b) {
        return a[key] > b[key];
      });
    }
  }
  return results;
}
var TOUCH_INPUT_MAP2 = {
  touchstart: INPUT_START2,
  touchmove: INPUT_MOVE2,
  touchend: INPUT_END2,
  touchcancel: INPUT_CANCEL2
};
var TOUCH_TARGET_EVENTS2 = "touchstart touchmove touchend touchcancel";
var TouchInput2 = function(_Input) {
  _inheritsLoose2(TouchInput3, _Input);
  function TouchInput3() {
    var _this;
    TouchInput3.prototype.evTarget = TOUCH_TARGET_EVENTS2;
    _this = _Input.apply(this, arguments) || this;
    _this.targetIds = {};
    return _this;
  }
  var _proto = TouchInput3.prototype;
  _proto.handler = function handler(ev) {
    var type = TOUCH_INPUT_MAP2[ev.type];
    var touches = getTouches2.call(this, ev, type);
    if (!touches) {
      return;
    }
    this.callback(this.manager, type, {
      pointers: touches[0],
      changedPointers: touches[1],
      pointerType: INPUT_TYPE_TOUCH2,
      srcEvent: ev
    });
  };
  return TouchInput3;
}(Input2);
function getTouches2(ev, type) {
  var allTouches = toArray2(ev.touches);
  var targetIds = this.targetIds;
  if (type & (INPUT_START2 | INPUT_MOVE2) && allTouches.length === 1) {
    targetIds[allTouches[0].identifier] = true;
    return [allTouches, allTouches];
  }
  var i;
  var targetTouches;
  var changedTouches = toArray2(ev.changedTouches);
  var changedTargetTouches = [];
  var target = this.target;
  targetTouches = allTouches.filter(function(touch) {
    return hasParent2(touch.target, target);
  });
  if (type === INPUT_START2) {
    i = 0;
    while (i < targetTouches.length) {
      targetIds[targetTouches[i].identifier] = true;
      i++;
    }
  }
  i = 0;
  while (i < changedTouches.length) {
    if (targetIds[changedTouches[i].identifier]) {
      changedTargetTouches.push(changedTouches[i]);
    }
    if (type & (INPUT_END2 | INPUT_CANCEL2)) {
      delete targetIds[changedTouches[i].identifier];
    }
    i++;
  }
  if (!changedTargetTouches.length) {
    return;
  }
  return [
    uniqueArray2(targetTouches.concat(changedTargetTouches), "identifier", true),
    changedTargetTouches
  ];
}
var MOUSE_INPUT_MAP2 = {
  mousedown: INPUT_START2,
  mousemove: INPUT_MOVE2,
  mouseup: INPUT_END2
};
var MOUSE_ELEMENT_EVENTS2 = "mousedown";
var MOUSE_WINDOW_EVENTS2 = "mousemove mouseup";
var MouseInput2 = function(_Input) {
  _inheritsLoose2(MouseInput3, _Input);
  function MouseInput3() {
    var _this;
    var proto = MouseInput3.prototype;
    proto.evEl = MOUSE_ELEMENT_EVENTS2;
    proto.evWin = MOUSE_WINDOW_EVENTS2;
    _this = _Input.apply(this, arguments) || this;
    _this.pressed = false;
    return _this;
  }
  var _proto = MouseInput3.prototype;
  _proto.handler = function handler(ev) {
    var eventType = MOUSE_INPUT_MAP2[ev.type];
    if (eventType & INPUT_START2 && ev.button === 0) {
      this.pressed = true;
    }
    if (eventType & INPUT_MOVE2 && ev.which !== 1) {
      eventType = INPUT_END2;
    }
    if (!this.pressed) {
      return;
    }
    if (eventType & INPUT_END2) {
      this.pressed = false;
    }
    this.callback(this.manager, eventType, {
      pointers: [ev],
      changedPointers: [ev],
      pointerType: INPUT_TYPE_MOUSE2,
      srcEvent: ev
    });
  };
  return MouseInput3;
}(Input2);
var DEDUP_TIMEOUT2 = 2500;
var DEDUP_DISTANCE2 = 25;
function setLastTouch2(eventData) {
  var _eventData$changedPoi = eventData.changedPointers, touch = _eventData$changedPoi[0];
  if (touch.identifier === this.primaryTouch) {
    var lastTouch = {
      x: touch.clientX,
      y: touch.clientY
    };
    var lts = this.lastTouches;
    this.lastTouches.push(lastTouch);
    var removeLastTouch = function removeLastTouch2() {
      var i = lts.indexOf(lastTouch);
      if (i > -1) {
        lts.splice(i, 1);
      }
    };
    setTimeout(removeLastTouch, DEDUP_TIMEOUT2);
  }
}
function recordTouches2(eventType, eventData) {
  if (eventType & INPUT_START2) {
    this.primaryTouch = eventData.changedPointers[0].identifier;
    setLastTouch2.call(this, eventData);
  } else if (eventType & (INPUT_END2 | INPUT_CANCEL2)) {
    setLastTouch2.call(this, eventData);
  }
}
function isSyntheticEvent2(eventData) {
  var x = eventData.srcEvent.clientX;
  var y = eventData.srcEvent.clientY;
  for (var i = 0; i < this.lastTouches.length; i++) {
    var t = this.lastTouches[i];
    var dx = Math.abs(x - t.x);
    var dy = Math.abs(y - t.y);
    if (dx <= DEDUP_DISTANCE2 && dy <= DEDUP_DISTANCE2) {
      return true;
    }
  }
  return false;
}
var TouchMouseInput2 = function() {
  var TouchMouseInput3 = function(_Input) {
    _inheritsLoose2(TouchMouseInput4, _Input);
    function TouchMouseInput4(_manager, callback) {
      var _this;
      _this = _Input.call(this, _manager, callback) || this;
      _this.handler = function(manager, inputEvent, inputData) {
        var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH2;
        var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE2;
        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
          return;
        }
        if (isTouch) {
          recordTouches2.call(_assertThisInitialized$12(_assertThisInitialized$12(_this)), inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent2.call(_assertThisInitialized$12(_assertThisInitialized$12(_this)), inputData)) {
          return;
        }
        _this.callback(manager, inputEvent, inputData);
      };
      _this.touch = new TouchInput2(_this.manager, _this.handler);
      _this.mouse = new MouseInput2(_this.manager, _this.handler);
      _this.primaryTouch = null;
      _this.lastTouches = [];
      return _this;
    }
    var _proto = TouchMouseInput4.prototype;
    _proto.destroy = function destroy() {
      this.touch.destroy();
      this.mouse.destroy();
    };
    return TouchMouseInput4;
  }(Input2);
  return TouchMouseInput3;
}();
function createInputInstance2(manager) {
  var Type;
  var inputClass = manager.options.inputClass;
  if (inputClass) {
    Type = inputClass;
  } else if (SUPPORT_POINTER_EVENTS2) {
    Type = PointerEventInput2;
  } else if (SUPPORT_ONLY_TOUCH2) {
    Type = TouchInput2;
  } else if (!SUPPORT_TOUCH2) {
    Type = MouseInput2;
  } else {
    Type = TouchMouseInput2;
  }
  return new Type(manager, inputHandler2);
}
function invokeArrayArg2(arg, fn, context) {
  if (Array.isArray(arg)) {
    each2(arg, context[fn], context);
    return true;
  }
  return false;
}
var STATE_POSSIBLE2 = 1;
var STATE_BEGAN2 = 2;
var STATE_CHANGED2 = 4;
var STATE_ENDED2 = 8;
var STATE_RECOGNIZED2 = STATE_ENDED2;
var STATE_CANCELLED2 = 16;
var STATE_FAILED2 = 32;
var _uniqueId2 = 1;
function uniqueId2() {
  return _uniqueId2++;
}
function getRecognizerByNameIfManager2(otherRecognizer, recognizer) {
  var manager = recognizer.manager;
  if (manager) {
    return manager.get(otherRecognizer);
  }
  return otherRecognizer;
}
function stateStr2(state) {
  if (state & STATE_CANCELLED2) {
    return "cancel";
  } else if (state & STATE_ENDED2) {
    return "end";
  } else if (state & STATE_CHANGED2) {
    return "move";
  } else if (state & STATE_BEGAN2) {
    return "start";
  }
  return "";
}
var Recognizer2 = function() {
  function Recognizer3(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    this.options = _extends2({
      enable: true
    }, options2);
    this.id = uniqueId2();
    this.manager = null;
    this.state = STATE_POSSIBLE2;
    this.simultaneous = {};
    this.requireFail = [];
  }
  var _proto = Recognizer3.prototype;
  _proto.set = function set3(options2) {
    assign$12(this.options, options2);
    this.manager && this.manager.touchAction.update();
    return this;
  };
  _proto.recognizeWith = function recognizeWith(otherRecognizer) {
    if (invokeArrayArg2(otherRecognizer, "recognizeWith", this)) {
      return this;
    }
    var simultaneous = this.simultaneous;
    otherRecognizer = getRecognizerByNameIfManager2(otherRecognizer, this);
    if (!simultaneous[otherRecognizer.id]) {
      simultaneous[otherRecognizer.id] = otherRecognizer;
      otherRecognizer.recognizeWith(this);
    }
    return this;
  };
  _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {
    if (invokeArrayArg2(otherRecognizer, "dropRecognizeWith", this)) {
      return this;
    }
    otherRecognizer = getRecognizerByNameIfManager2(otherRecognizer, this);
    delete this.simultaneous[otherRecognizer.id];
    return this;
  };
  _proto.requireFailure = function requireFailure(otherRecognizer) {
    if (invokeArrayArg2(otherRecognizer, "requireFailure", this)) {
      return this;
    }
    var requireFail = this.requireFail;
    otherRecognizer = getRecognizerByNameIfManager2(otherRecognizer, this);
    if (inArray2(requireFail, otherRecognizer) === -1) {
      requireFail.push(otherRecognizer);
      otherRecognizer.requireFailure(this);
    }
    return this;
  };
  _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {
    if (invokeArrayArg2(otherRecognizer, "dropRequireFailure", this)) {
      return this;
    }
    otherRecognizer = getRecognizerByNameIfManager2(otherRecognizer, this);
    var index2 = inArray2(this.requireFail, otherRecognizer);
    if (index2 > -1) {
      this.requireFail.splice(index2, 1);
    }
    return this;
  };
  _proto.hasRequireFailures = function hasRequireFailures() {
    return this.requireFail.length > 0;
  };
  _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {
    return !!this.simultaneous[otherRecognizer.id];
  };
  _proto.emit = function emit(input) {
    var self2 = this;
    var state = this.state;
    function emit2(event) {
      self2.manager.emit(event, input);
    }
    if (state < STATE_ENDED2) {
      emit2(self2.options.event + stateStr2(state));
    }
    emit2(self2.options.event);
    if (input.additionalEvent) {
      emit2(input.additionalEvent);
    }
    if (state >= STATE_ENDED2) {
      emit2(self2.options.event + stateStr2(state));
    }
  };
  _proto.tryEmit = function tryEmit(input) {
    if (this.canEmit()) {
      return this.emit(input);
    }
    this.state = STATE_FAILED2;
  };
  _proto.canEmit = function canEmit() {
    var i = 0;
    while (i < this.requireFail.length) {
      if (!(this.requireFail[i].state & (STATE_FAILED2 | STATE_POSSIBLE2))) {
        return false;
      }
      i++;
    }
    return true;
  };
  _proto.recognize = function recognize(inputData) {
    var inputDataClone = assign$12({}, inputData);
    if (!boolOrFn2(this.options.enable, [this, inputDataClone])) {
      this.reset();
      this.state = STATE_FAILED2;
      return;
    }
    if (this.state & (STATE_RECOGNIZED2 | STATE_CANCELLED2 | STATE_FAILED2)) {
      this.state = STATE_POSSIBLE2;
    }
    this.state = this.process(inputDataClone);
    if (this.state & (STATE_BEGAN2 | STATE_CHANGED2 | STATE_ENDED2 | STATE_CANCELLED2)) {
      this.tryEmit(inputDataClone);
    }
  };
  _proto.process = function process3(inputData) {
  };
  _proto.getTouchAction = function getTouchAction() {
  };
  _proto.reset = function reset() {
  };
  return Recognizer3;
}();
var TapRecognizer2 = function(_Recognizer) {
  _inheritsLoose2(TapRecognizer3, _Recognizer);
  function TapRecognizer3(options2) {
    var _this;
    if (options2 === void 0) {
      options2 = {};
    }
    _this = _Recognizer.call(this, _extends2({
      event: "tap",
      pointers: 1,
      taps: 1,
      interval: 300,
      time: 250,
      threshold: 9,
      posThreshold: 10
    }, options2)) || this;
    _this.pTime = false;
    _this.pCenter = false;
    _this._timer = null;
    _this._input = null;
    _this.count = 0;
    return _this;
  }
  var _proto = TapRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_MANIPULATION2];
  };
  _proto.process = function process3(input) {
    var _this2 = this;
    var options2 = this.options;
    var validPointers = input.pointers.length === options2.pointers;
    var validMovement = input.distance < options2.threshold;
    var validTouchTime = input.deltaTime < options2.time;
    this.reset();
    if (input.eventType & INPUT_START2 && this.count === 0) {
      return this.failTimeout();
    }
    if (validMovement && validTouchTime && validPointers) {
      if (input.eventType !== INPUT_END2) {
        return this.failTimeout();
      }
      var validInterval = this.pTime ? input.timeStamp - this.pTime < options2.interval : true;
      var validMultiTap = !this.pCenter || getDistance2(this.pCenter, input.center) < options2.posThreshold;
      this.pTime = input.timeStamp;
      this.pCenter = input.center;
      if (!validMultiTap || !validInterval) {
        this.count = 1;
      } else {
        this.count += 1;
      }
      this._input = input;
      var tapCount = this.count % options2.taps;
      if (tapCount === 0) {
        if (!this.hasRequireFailures()) {
          return STATE_RECOGNIZED2;
        } else {
          this._timer = setTimeout(function() {
            _this2.state = STATE_RECOGNIZED2;
            _this2.tryEmit();
          }, options2.interval);
          return STATE_BEGAN2;
        }
      }
    }
    return STATE_FAILED2;
  };
  _proto.failTimeout = function failTimeout() {
    var _this3 = this;
    this._timer = setTimeout(function() {
      _this3.state = STATE_FAILED2;
    }, this.options.interval);
    return STATE_FAILED2;
  };
  _proto.reset = function reset() {
    clearTimeout(this._timer);
  };
  _proto.emit = function emit() {
    if (this.state === STATE_RECOGNIZED2) {
      this._input.tapCount = this.count;
      this.manager.emit(this.options.event, this._input);
    }
  };
  return TapRecognizer3;
}(Recognizer2);
var AttrRecognizer2 = function(_Recognizer) {
  _inheritsLoose2(AttrRecognizer3, _Recognizer);
  function AttrRecognizer3(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _Recognizer.call(this, _extends2({
      pointers: 1
    }, options2)) || this;
  }
  var _proto = AttrRecognizer3.prototype;
  _proto.attrTest = function attrTest(input) {
    var optionPointers = this.options.pointers;
    return optionPointers === 0 || input.pointers.length === optionPointers;
  };
  _proto.process = function process3(input) {
    var state = this.state;
    var eventType = input.eventType;
    var isRecognized = state & (STATE_BEGAN2 | STATE_CHANGED2);
    var isValid = this.attrTest(input);
    if (isRecognized && (eventType & INPUT_CANCEL2 || !isValid)) {
      return state | STATE_CANCELLED2;
    } else if (isRecognized || isValid) {
      if (eventType & INPUT_END2) {
        return state | STATE_ENDED2;
      } else if (!(state & STATE_BEGAN2)) {
        return STATE_BEGAN2;
      }
      return state | STATE_CHANGED2;
    }
    return STATE_FAILED2;
  };
  return AttrRecognizer3;
}(Recognizer2);
function directionStr2(direction) {
  if (direction === DIRECTION_DOWN2) {
    return "down";
  } else if (direction === DIRECTION_UP2) {
    return "up";
  } else if (direction === DIRECTION_LEFT2) {
    return "left";
  } else if (direction === DIRECTION_RIGHT2) {
    return "right";
  }
  return "";
}
var PanRecognizer2 = function(_AttrRecognizer) {
  _inheritsLoose2(PanRecognizer3, _AttrRecognizer);
  function PanRecognizer3(options2) {
    var _this;
    if (options2 === void 0) {
      options2 = {};
    }
    _this = _AttrRecognizer.call(this, _extends2({
      event: "pan",
      threshold: 10,
      pointers: 1,
      direction: DIRECTION_ALL2
    }, options2)) || this;
    _this.pX = null;
    _this.pY = null;
    return _this;
  }
  var _proto = PanRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    var direction = this.options.direction;
    var actions = [];
    if (direction & DIRECTION_HORIZONTAL2) {
      actions.push(TOUCH_ACTION_PAN_Y2);
    }
    if (direction & DIRECTION_VERTICAL2) {
      actions.push(TOUCH_ACTION_PAN_X2);
    }
    return actions;
  };
  _proto.directionTest = function directionTest(input) {
    var options2 = this.options;
    var hasMoved = true;
    var distance = input.distance;
    var direction = input.direction;
    var x = input.deltaX;
    var y = input.deltaY;
    if (!(direction & options2.direction)) {
      if (options2.direction & DIRECTION_HORIZONTAL2) {
        direction = x === 0 ? DIRECTION_NONE2 : x < 0 ? DIRECTION_LEFT2 : DIRECTION_RIGHT2;
        hasMoved = x !== this.pX;
        distance = Math.abs(input.deltaX);
      } else {
        direction = y === 0 ? DIRECTION_NONE2 : y < 0 ? DIRECTION_UP2 : DIRECTION_DOWN2;
        hasMoved = y !== this.pY;
        distance = Math.abs(input.deltaY);
      }
    }
    input.direction = direction;
    return hasMoved && distance > options2.threshold && direction & options2.direction;
  };
  _proto.attrTest = function attrTest(input) {
    return AttrRecognizer2.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN2 || !(this.state & STATE_BEGAN2) && this.directionTest(input));
  };
  _proto.emit = function emit(input) {
    this.pX = input.deltaX;
    this.pY = input.deltaY;
    var direction = directionStr2(input.direction);
    if (direction) {
      input.additionalEvent = this.options.event + direction;
    }
    _AttrRecognizer.prototype.emit.call(this, input);
  };
  return PanRecognizer3;
}(AttrRecognizer2);
var SwipeRecognizer2 = function(_AttrRecognizer) {
  _inheritsLoose2(SwipeRecognizer3, _AttrRecognizer);
  function SwipeRecognizer3(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _AttrRecognizer.call(this, _extends2({
      event: "swipe",
      threshold: 10,
      velocity: 0.3,
      direction: DIRECTION_HORIZONTAL2 | DIRECTION_VERTICAL2,
      pointers: 1
    }, options2)) || this;
  }
  var _proto = SwipeRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return PanRecognizer2.prototype.getTouchAction.call(this);
  };
  _proto.attrTest = function attrTest(input) {
    var direction = this.options.direction;
    var velocity;
    if (direction & (DIRECTION_HORIZONTAL2 | DIRECTION_VERTICAL2)) {
      velocity = input.overallVelocity;
    } else if (direction & DIRECTION_HORIZONTAL2) {
      velocity = input.overallVelocityX;
    } else if (direction & DIRECTION_VERTICAL2) {
      velocity = input.overallVelocityY;
    }
    return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs$1(velocity) > this.options.velocity && input.eventType & INPUT_END2;
  };
  _proto.emit = function emit(input) {
    var direction = directionStr2(input.offsetDirection);
    if (direction) {
      this.manager.emit(this.options.event + direction, input);
    }
    this.manager.emit(this.options.event, input);
  };
  return SwipeRecognizer3;
}(AttrRecognizer2);
var PinchRecognizer2 = function(_AttrRecognizer) {
  _inheritsLoose2(PinchRecognizer3, _AttrRecognizer);
  function PinchRecognizer3(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _AttrRecognizer.call(this, _extends2({
      event: "pinch",
      threshold: 0,
      pointers: 2
    }, options2)) || this;
  }
  var _proto = PinchRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_NONE2];
  };
  _proto.attrTest = function attrTest(input) {
    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN2);
  };
  _proto.emit = function emit(input) {
    if (input.scale !== 1) {
      var inOut = input.scale < 1 ? "in" : "out";
      input.additionalEvent = this.options.event + inOut;
    }
    _AttrRecognizer.prototype.emit.call(this, input);
  };
  return PinchRecognizer3;
}(AttrRecognizer2);
var RotateRecognizer2 = function(_AttrRecognizer) {
  _inheritsLoose2(RotateRecognizer3, _AttrRecognizer);
  function RotateRecognizer3(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _AttrRecognizer.call(this, _extends2({
      event: "rotate",
      threshold: 0,
      pointers: 2
    }, options2)) || this;
  }
  var _proto = RotateRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_NONE2];
  };
  _proto.attrTest = function attrTest(input) {
    return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN2);
  };
  return RotateRecognizer3;
}(AttrRecognizer2);
var PressRecognizer2 = function(_Recognizer) {
  _inheritsLoose2(PressRecognizer3, _Recognizer);
  function PressRecognizer3(options2) {
    var _this;
    if (options2 === void 0) {
      options2 = {};
    }
    _this = _Recognizer.call(this, _extends2({
      event: "press",
      pointers: 1,
      time: 251,
      threshold: 9
    }, options2)) || this;
    _this._timer = null;
    _this._input = null;
    return _this;
  }
  var _proto = PressRecognizer3.prototype;
  _proto.getTouchAction = function getTouchAction() {
    return [TOUCH_ACTION_AUTO2];
  };
  _proto.process = function process3(input) {
    var _this2 = this;
    var options2 = this.options;
    var validPointers = input.pointers.length === options2.pointers;
    var validMovement = input.distance < options2.threshold;
    var validTime = input.deltaTime > options2.time;
    this._input = input;
    if (!validMovement || !validPointers || input.eventType & (INPUT_END2 | INPUT_CANCEL2) && !validTime) {
      this.reset();
    } else if (input.eventType & INPUT_START2) {
      this.reset();
      this._timer = setTimeout(function() {
        _this2.state = STATE_RECOGNIZED2;
        _this2.tryEmit();
      }, options2.time);
    } else if (input.eventType & INPUT_END2) {
      return STATE_RECOGNIZED2;
    }
    return STATE_FAILED2;
  };
  _proto.reset = function reset() {
    clearTimeout(this._timer);
  };
  _proto.emit = function emit(input) {
    if (this.state !== STATE_RECOGNIZED2) {
      return;
    }
    if (input && input.eventType & INPUT_END2) {
      this.manager.emit(this.options.event + "up", input);
    } else {
      this._input.timeStamp = now4();
      this.manager.emit(this.options.event, this._input);
    }
  };
  return PressRecognizer3;
}(Recognizer2);
var defaults2 = {
  domEvents: false,
  touchAction: TOUCH_ACTION_COMPUTE2,
  enable: true,
  inputTarget: null,
  inputClass: null,
  cssProps: {
    userSelect: "none",
    touchSelect: "none",
    touchCallout: "none",
    contentZooming: "none",
    userDrag: "none",
    tapHighlightColor: "rgba(0,0,0,0)"
  }
};
var preset2 = [[RotateRecognizer2, {
  enable: false
}], [PinchRecognizer2, {
  enable: false
}, ["rotate"]], [SwipeRecognizer2, {
  direction: DIRECTION_HORIZONTAL2
}], [PanRecognizer2, {
  direction: DIRECTION_HORIZONTAL2
}, ["swipe"]], [TapRecognizer2], [TapRecognizer2, {
  event: "doubletap",
  taps: 2
}, ["tap"]], [PressRecognizer2]];
var STOP2 = 1;
var FORCED_STOP2 = 2;
function toggleCssProps2(manager, add) {
  var element = manager.element;
  if (!element.style) {
    return;
  }
  var prop;
  each2(manager.options.cssProps, function(value, name) {
    prop = prefixed2(element.style, name);
    if (add) {
      manager.oldCssProps[prop] = element.style[prop];
      element.style[prop] = value;
    } else {
      element.style[prop] = manager.oldCssProps[prop] || "";
    }
  });
  if (!add) {
    manager.oldCssProps = {};
  }
}
function triggerDomEvent2(event, data3) {
  var gestureEvent = document.createEvent("Event");
  gestureEvent.initEvent(event, true, true);
  gestureEvent.gesture = data3;
  data3.target.dispatchEvent(gestureEvent);
}
var Manager2 = function() {
  function Manager3(element, options2) {
    var _this = this;
    this.options = assign$12({}, defaults2, options2 || {});
    this.options.inputTarget = this.options.inputTarget || element;
    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};
    this.element = element;
    this.input = createInputInstance2(this);
    this.touchAction = new TouchAction2(this, this.options.touchAction);
    toggleCssProps2(this, true);
    each2(this.options.recognizers, function(item) {
      var recognizer = _this.add(new item[0](item[1]));
      item[2] && recognizer.recognizeWith(item[2]);
      item[3] && recognizer.requireFailure(item[3]);
    }, this);
  }
  var _proto = Manager3.prototype;
  _proto.set = function set3(options2) {
    assign$12(this.options, options2);
    if (options2.touchAction) {
      this.touchAction.update();
    }
    if (options2.inputTarget) {
      this.input.destroy();
      this.input.target = options2.inputTarget;
      this.input.init();
    }
    return this;
  };
  _proto.stop = function stop(force) {
    this.session.stopped = force ? FORCED_STOP2 : STOP2;
  };
  _proto.recognize = function recognize(inputData) {
    var session = this.session;
    if (session.stopped) {
      return;
    }
    this.touchAction.preventDefaults(inputData);
    var recognizer;
    var recognizers = this.recognizers;
    var curRecognizer = session.curRecognizer;
    if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED2) {
      session.curRecognizer = null;
      curRecognizer = null;
    }
    var i = 0;
    while (i < recognizers.length) {
      recognizer = recognizers[i];
      if (session.stopped !== FORCED_STOP2 && (!curRecognizer || recognizer === curRecognizer || recognizer.canRecognizeWith(curRecognizer))) {
        recognizer.recognize(inputData);
      } else {
        recognizer.reset();
      }
      if (!curRecognizer && recognizer.state & (STATE_BEGAN2 | STATE_CHANGED2 | STATE_ENDED2)) {
        session.curRecognizer = recognizer;
        curRecognizer = recognizer;
      }
      i++;
    }
  };
  _proto.get = function get3(recognizer) {
    if (recognizer instanceof Recognizer2) {
      return recognizer;
    }
    var recognizers = this.recognizers;
    for (var i = 0; i < recognizers.length; i++) {
      if (recognizers[i].options.event === recognizer) {
        return recognizers[i];
      }
    }
    return null;
  };
  _proto.add = function add(recognizer) {
    if (invokeArrayArg2(recognizer, "add", this)) {
      return this;
    }
    var existing = this.get(recognizer.options.event);
    if (existing) {
      this.remove(existing);
    }
    this.recognizers.push(recognizer);
    recognizer.manager = this;
    this.touchAction.update();
    return recognizer;
  };
  _proto.remove = function remove(recognizer) {
    if (invokeArrayArg2(recognizer, "remove", this)) {
      return this;
    }
    var targetRecognizer = this.get(recognizer);
    if (recognizer) {
      var recognizers = this.recognizers;
      var index2 = inArray2(recognizers, targetRecognizer);
      if (index2 !== -1) {
        recognizers.splice(index2, 1);
        this.touchAction.update();
      }
    }
    return this;
  };
  _proto.on = function on(events, handler) {
    if (events === void 0 || handler === void 0) {
      return this;
    }
    var handlers = this.handlers;
    each2(splitStr2(events), function(event) {
      handlers[event] = handlers[event] || [];
      handlers[event].push(handler);
    });
    return this;
  };
  _proto.off = function off(events, handler) {
    if (events === void 0) {
      return this;
    }
    var handlers = this.handlers;
    each2(splitStr2(events), function(event) {
      if (!handler) {
        delete handlers[event];
      } else {
        handlers[event] && handlers[event].splice(inArray2(handlers[event], handler), 1);
      }
    });
    return this;
  };
  _proto.emit = function emit(event, data3) {
    if (this.options.domEvents) {
      triggerDomEvent2(event, data3);
    }
    var handlers = this.handlers[event] && this.handlers[event].slice();
    if (!handlers || !handlers.length) {
      return;
    }
    data3.type = event;
    data3.preventDefault = function() {
      data3.srcEvent.preventDefault();
    };
    var i = 0;
    while (i < handlers.length) {
      handlers[i](data3);
      i++;
    }
  };
  _proto.destroy = function destroy() {
    this.element && toggleCssProps2(this, false);
    this.handlers = {};
    this.session = {};
    this.input.destroy();
    this.element = null;
  };
  return Manager3;
}();
var SINGLE_TOUCH_INPUT_MAP2 = {
  touchstart: INPUT_START2,
  touchmove: INPUT_MOVE2,
  touchend: INPUT_END2,
  touchcancel: INPUT_CANCEL2
};
var SINGLE_TOUCH_TARGET_EVENTS2 = "touchstart";
var SINGLE_TOUCH_WINDOW_EVENTS2 = "touchstart touchmove touchend touchcancel";
var SingleTouchInput2 = function(_Input) {
  _inheritsLoose2(SingleTouchInput3, _Input);
  function SingleTouchInput3() {
    var _this;
    var proto = SingleTouchInput3.prototype;
    proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS2;
    proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS2;
    _this = _Input.apply(this, arguments) || this;
    _this.started = false;
    return _this;
  }
  var _proto = SingleTouchInput3.prototype;
  _proto.handler = function handler(ev) {
    var type = SINGLE_TOUCH_INPUT_MAP2[ev.type];
    if (type === INPUT_START2) {
      this.started = true;
    }
    if (!this.started) {
      return;
    }
    var touches = normalizeSingleTouches2.call(this, ev, type);
    if (type & (INPUT_END2 | INPUT_CANCEL2) && touches[0].length - touches[1].length === 0) {
      this.started = false;
    }
    this.callback(this.manager, type, {
      pointers: touches[0],
      changedPointers: touches[1],
      pointerType: INPUT_TYPE_TOUCH2,
      srcEvent: ev
    });
  };
  return SingleTouchInput3;
}(Input2);
function normalizeSingleTouches2(ev, type) {
  var all = toArray2(ev.touches);
  var changed = toArray2(ev.changedTouches);
  if (type & (INPUT_END2 | INPUT_CANCEL2)) {
    all = uniqueArray2(all.concat(changed), "identifier", true);
  }
  return [all, changed];
}
function deprecate2(method3, name, message) {
  var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message + " AT \n";
  return function() {
    var e = new Error("get-stack-trace");
    var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
    var log = window.console && (window.console.warn || window.console.log);
    if (log) {
      log.call(window.console, deprecationMessage, stack);
    }
    return method3.apply(this, arguments);
  };
}
var extend2 = deprecate2(function(dest, src, merge3) {
  var keys7 = Object.keys(src);
  var i = 0;
  while (i < keys7.length) {
    if (!merge3 || merge3 && dest[keys7[i]] === void 0) {
      dest[keys7[i]] = src[keys7[i]];
    }
    i++;
  }
  return dest;
}, "extend", "Use `assign`.");
var merge$2 = deprecate2(function(dest, src) {
  return extend2(dest, src, true);
}, "merge", "Use `assign`.");
function inherit2(child, base, properties) {
  var baseP = base.prototype;
  var childP;
  childP = child.prototype = Object.create(baseP);
  childP.constructor = child;
  childP._super = baseP;
  if (properties) {
    assign$12(childP, properties);
  }
}
function bindFn2(fn, context) {
  return function boundFn() {
    return fn.apply(context, arguments);
  };
}
var Hammer$2 = function() {
  var Hammer3 = function Hammer4(element, options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return new Manager2(element, _extends2({
      recognizers: preset2.concat()
    }, options2));
  };
  Hammer3.VERSION = "2.0.17-rc";
  Hammer3.DIRECTION_ALL = DIRECTION_ALL2;
  Hammer3.DIRECTION_DOWN = DIRECTION_DOWN2;
  Hammer3.DIRECTION_LEFT = DIRECTION_LEFT2;
  Hammer3.DIRECTION_RIGHT = DIRECTION_RIGHT2;
  Hammer3.DIRECTION_UP = DIRECTION_UP2;
  Hammer3.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL2;
  Hammer3.DIRECTION_VERTICAL = DIRECTION_VERTICAL2;
  Hammer3.DIRECTION_NONE = DIRECTION_NONE2;
  Hammer3.DIRECTION_DOWN = DIRECTION_DOWN2;
  Hammer3.INPUT_START = INPUT_START2;
  Hammer3.INPUT_MOVE = INPUT_MOVE2;
  Hammer3.INPUT_END = INPUT_END2;
  Hammer3.INPUT_CANCEL = INPUT_CANCEL2;
  Hammer3.STATE_POSSIBLE = STATE_POSSIBLE2;
  Hammer3.STATE_BEGAN = STATE_BEGAN2;
  Hammer3.STATE_CHANGED = STATE_CHANGED2;
  Hammer3.STATE_ENDED = STATE_ENDED2;
  Hammer3.STATE_RECOGNIZED = STATE_RECOGNIZED2;
  Hammer3.STATE_CANCELLED = STATE_CANCELLED2;
  Hammer3.STATE_FAILED = STATE_FAILED2;
  Hammer3.Manager = Manager2;
  Hammer3.Input = Input2;
  Hammer3.TouchAction = TouchAction2;
  Hammer3.TouchInput = TouchInput2;
  Hammer3.MouseInput = MouseInput2;
  Hammer3.PointerEventInput = PointerEventInput2;
  Hammer3.TouchMouseInput = TouchMouseInput2;
  Hammer3.SingleTouchInput = SingleTouchInput2;
  Hammer3.Recognizer = Recognizer2;
  Hammer3.AttrRecognizer = AttrRecognizer2;
  Hammer3.Tap = TapRecognizer2;
  Hammer3.Pan = PanRecognizer2;
  Hammer3.Swipe = SwipeRecognizer2;
  Hammer3.Pinch = PinchRecognizer2;
  Hammer3.Rotate = RotateRecognizer2;
  Hammer3.Press = PressRecognizer2;
  Hammer3.on = addEventListeners2;
  Hammer3.off = removeEventListeners2;
  Hammer3.each = each2;
  Hammer3.merge = merge$2;
  Hammer3.extend = extend2;
  Hammer3.bindFn = bindFn2;
  Hammer3.assign = assign$12;
  Hammer3.inherit = inherit2;
  Hammer3.bindFn = bindFn2;
  Hammer3.prefixed = prefixed2;
  Hammer3.toArray = toArray2;
  Hammer3.inArray = inArray2;
  Hammer3.uniqueArray = uniqueArray2;
  Hammer3.splitStr = splitStr2;
  Hammer3.boolOrFn = boolOrFn2;
  Hammer3.hasParent = hasParent2;
  Hammer3.addEventListeners = addEventListeners2;
  Hammer3.removeEventListeners = removeEventListeners2;
  Hammer3.defaults = assign$12({}, defaults2, {
    preset: preset2
  });
  return Hammer3;
}();
var RealHammer2 = Hammer$2;
function _createForOfIteratorHelper$7(o, allowArrayLike) {
  var it2 = typeof symbol2 !== "undefined" && getIteratorMethod$12(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$12(o) || (it2 = _unsupportedIterableToArray$7(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$7(o, minLen) {
  var _context21;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$7(o, minLen);
  var n = slice4(_context21 = Object.prototype.toString.call(o)).call(_context21, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$32(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$7(o, minLen);
}
function _arrayLikeToArray$7(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
symbol2("DELETE");
function Alea() {
  for (var _len3 = arguments.length, seed = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    seed[_key3] = arguments[_key3];
  }
  return AleaImplementation(seed.length ? seed : [now$1()]);
}
function AleaImplementation(seed) {
  var _mashSeed = mashSeed(seed), _mashSeed2 = _slicedToArray2(_mashSeed, 3), s0 = _mashSeed2[0], s1 = _mashSeed2[1], s2 = _mashSeed2[2];
  var c2 = 1;
  var random = function random2() {
    var t = 2091639 * s0 + c2 * 23283064365386963e-26;
    s0 = s1;
    s1 = s2;
    return s2 = t - (c2 = t | 0);
  };
  random.uint32 = function() {
    return random() * 4294967296;
  };
  random.fract53 = function() {
    return random() + (random() * 2097152 | 0) * 11102230246251565e-32;
  };
  random.algorithm = "Alea";
  random.seed = seed;
  random.version = "0.9";
  return random;
}
function mashSeed() {
  var mash = Mash();
  var s0 = mash(" ");
  var s1 = mash(" ");
  var s2 = mash(" ");
  for (var i = 0; i < arguments.length; i++) {
    s0 -= mash(i < 0 || arguments.length <= i ? void 0 : arguments[i]);
    if (s0 < 0) {
      s0 += 1;
    }
    s1 -= mash(i < 0 || arguments.length <= i ? void 0 : arguments[i]);
    if (s1 < 0) {
      s1 += 1;
    }
    s2 -= mash(i < 0 || arguments.length <= i ? void 0 : arguments[i]);
    if (s2 < 0) {
      s2 += 1;
    }
  }
  return [s0, s1, s2];
}
function Mash() {
  var n = 4022871197;
  return function(data3) {
    var string2 = data3.toString();
    for (var i = 0; i < string2.length; i++) {
      n += string2.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 4294967296;
    }
    return (n >>> 0) * 23283064365386963e-26;
  };
}
function hammerMock2() {
  var noop3 = function noop4() {
  };
  return {
    on: noop3,
    off: noop3,
    destroy: noop3,
    emit: noop3,
    get: function get3() {
      return {
        set: noop3
      };
    }
  };
}
var Hammer$12 = typeof window !== "undefined" ? window.Hammer || RealHammer2 : function() {
  return hammerMock2();
};
function Activator$12(container) {
  var _this = this, _context3;
  this._cleanupQueue = [];
  this.active = false;
  this._dom = {
    container,
    overlay: document.createElement("div")
  };
  this._dom.overlay.classList.add("vis-overlay");
  this._dom.container.appendChild(this._dom.overlay);
  this._cleanupQueue.push(function() {
    _this._dom.overlay.parentNode.removeChild(_this._dom.overlay);
  });
  var hammer = Hammer$12(this._dom.overlay);
  hammer.on("tap", bind$52(_context3 = this._onTapOverlay).call(_context3, this));
  this._cleanupQueue.push(function() {
    hammer.destroy();
  });
  var events = ["tap", "doubletap", "press", "pinch", "pan", "panstart", "panmove", "panend"];
  forEach$22(events).call(events, function(event) {
    hammer.on(event, function(event2) {
      event2.srcEvent.stopPropagation();
    });
  });
  if (document && document.body) {
    this._onClick = function(event) {
      if (!_hasParent2(event.target, container)) {
        _this.deactivate();
      }
    };
    document.body.addEventListener("click", this._onClick);
    this._cleanupQueue.push(function() {
      document.body.removeEventListener("click", _this._onClick);
    });
  }
  this._escListener = function(event) {
    if ("key" in event ? event.key === "Escape" : event.keyCode === 27) {
      _this.deactivate();
    }
  };
}
Emitter2(Activator$12.prototype);
Activator$12.current = null;
Activator$12.prototype.destroy = function() {
  var _context4, _context5;
  this.deactivate();
  var _iterator2 = _createForOfIteratorHelper$7(reverse4(_context4 = splice$12(_context5 = this._cleanupQueue).call(_context5, 0)).call(_context4)), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var callback = _step2.value;
      callback();
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
};
Activator$12.prototype.activate = function() {
  if (Activator$12.current) {
    Activator$12.current.deactivate();
  }
  Activator$12.current = this;
  this.active = true;
  this._dom.overlay.style.display = "none";
  this._dom.container.classList.add("vis-active");
  this.emit("change");
  this.emit("activate");
  document.body.addEventListener("keydown", this._escListener);
};
Activator$12.prototype.deactivate = function() {
  this.active = false;
  this._dom.overlay.style.display = "block";
  this._dom.container.classList.remove("vis-active");
  document.body.removeEventListener("keydown", this._escListener);
  this.emit("change");
  this.emit("deactivate");
};
Activator$12.prototype._onTapOverlay = function(event) {
  this.activate();
  event.srcEvent.stopPropagation();
};
function _hasParent2(element, parent3) {
  while (element) {
    if (element === parent3) {
      return true;
    }
    element = element.parentNode;
  }
  return false;
}
var fullHexRE = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
var shortHexRE = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
var rgbRE = /^rgb\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *\)$/i;
var rgbaRE = /^rgba\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *([01]|0?\.\d+) *\)$/i;
function recursiveDOMDelete(DOMobject) {
  if (DOMobject) {
    while (DOMobject.hasChildNodes() === true) {
      var child = DOMobject.firstChild;
      if (child) {
        recursiveDOMDelete(child);
        DOMobject.removeChild(child);
      }
    }
  }
}
function isString(value) {
  return value instanceof String || typeof value === "string";
}
function isObject$72(value) {
  return _typeof2(value) === "object" && value !== null;
}
function copyOrDelete(a, b, prop, allowDeletion) {
  var doDeletion = false;
  if (allowDeletion === true) {
    doDeletion = b[prop] === null && a[prop] !== void 0;
  }
  if (doDeletion) {
    delete a[prop];
  } else {
    a[prop] = b[prop];
  }
}
function fillIfDefined(a, b) {
  var allowDeletion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  for (var prop in a) {
    if (b[prop] !== void 0) {
      if (b[prop] === null || _typeof2(b[prop]) !== "object") {
        copyOrDelete(a, b, prop, allowDeletion);
      } else {
        var aProp = a[prop];
        var bProp = b[prop];
        if (isObject$72(aProp) && isObject$72(bProp)) {
          fillIfDefined(aProp, bProp, allowDeletion);
        }
      }
    }
  }
}
function selectiveDeepExtend(props, a, b) {
  var allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (isArray$12(b)) {
    throw new TypeError("Arrays are not supported by deepExtend");
  }
  for (var p = 0; p < props.length; p++) {
    var prop = props[p];
    if (Object.prototype.hasOwnProperty.call(b, prop)) {
      if (b[prop] && b[prop].constructor === Object) {
        if (a[prop] === void 0) {
          a[prop] = {};
        }
        if (a[prop].constructor === Object) {
          deepExtend(a[prop], b[prop], false, allowDeletion);
        } else {
          copyOrDelete(a, b, prop, allowDeletion);
        }
      } else if (isArray$12(b[prop])) {
        throw new TypeError("Arrays are not supported by deepExtend");
      } else {
        copyOrDelete(a, b, prop, allowDeletion);
      }
    }
  }
  return a;
}
function selectiveNotDeepExtend(propsToExclude, a, b) {
  var allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (isArray$12(b)) {
    throw new TypeError("Arrays are not supported by deepExtend");
  }
  for (var prop in b) {
    if (!Object.prototype.hasOwnProperty.call(b, prop)) {
      continue;
    }
    if (includes5(propsToExclude).call(propsToExclude, prop)) {
      continue;
    }
    if (b[prop] && b[prop].constructor === Object) {
      if (a[prop] === void 0) {
        a[prop] = {};
      }
      if (a[prop].constructor === Object) {
        deepExtend(a[prop], b[prop]);
      } else {
        copyOrDelete(a, b, prop, allowDeletion);
      }
    } else if (isArray$12(b[prop])) {
      a[prop] = [];
      for (var i = 0; i < b[prop].length; i++) {
        a[prop].push(b[prop][i]);
      }
    } else {
      copyOrDelete(a, b, prop, allowDeletion);
    }
  }
  return a;
}
function deepExtend(a, b) {
  var protoExtend = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var allowDeletion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  for (var prop in b) {
    if (Object.prototype.hasOwnProperty.call(b, prop) || protoExtend === true) {
      if (_typeof2(b[prop]) === "object" && b[prop] !== null && getPrototypeOf$42(b[prop]) === Object.prototype) {
        if (a[prop] === void 0) {
          a[prop] = deepExtend({}, b[prop], protoExtend);
        } else if (_typeof2(a[prop]) === "object" && a[prop] !== null && getPrototypeOf$42(a[prop]) === Object.prototype) {
          deepExtend(a[prop], b[prop], protoExtend);
        } else {
          copyOrDelete(a, b, prop, allowDeletion);
        }
      } else if (isArray$12(b[prop])) {
        var _context6;
        a[prop] = slice4(_context6 = b[prop]).call(_context6);
      } else {
        copyOrDelete(a, b, prop, allowDeletion);
      }
    }
  }
  return a;
}
function copyAndExtendArray(arr, newValue) {
  var _context7;
  return concat4(_context7 = []).call(_context7, _toConsumableArray2(arr), [newValue]);
}
function copyArray(arr) {
  return slice4(arr).call(arr);
}
function getAbsoluteLeft(elem) {
  return elem.getBoundingClientRect().left;
}
function getAbsoluteTop(elem) {
  return elem.getBoundingClientRect().top;
}
function forEach$12(object2, callback) {
  if (isArray$12(object2)) {
    var len = object2.length;
    for (var i = 0; i < len; i++) {
      callback(object2[i], i, object2);
    }
  } else {
    for (var key in object2) {
      if (Object.prototype.hasOwnProperty.call(object2, key)) {
        callback(object2[key], key, object2);
      }
    }
  }
}
function addEventListener(element, action, listener, useCapture) {
  if (element.addEventListener) {
    var _context8;
    if (useCapture === void 0) {
      useCapture = false;
    }
    if (action === "mousewheel" && includes5(_context8 = navigator.userAgent).call(_context8, "Firefox")) {
      action = "DOMMouseScroll";
    }
    element.addEventListener(action, listener, useCapture);
  } else {
    element.attachEvent("on" + action, listener);
  }
}
function removeEventListener(element, action, listener, useCapture) {
  if (element.removeEventListener) {
    var _context9;
    if (useCapture === void 0) {
      useCapture = false;
    }
    if (action === "mousewheel" && includes5(_context9 = navigator.userAgent).call(_context9, "Firefox")) {
      action = "DOMMouseScroll";
    }
    element.removeEventListener(action, listener, useCapture);
  } else {
    element.detachEvent("on" + action, listener);
  }
}
function hexToRGB(hex3) {
  var result;
  switch (hex3.length) {
    case 3:
    case 4:
      result = shortHexRE.exec(hex3);
      return result ? {
        r: _parseInt(result[1] + result[1], 16),
        g: _parseInt(result[2] + result[2], 16),
        b: _parseInt(result[3] + result[3], 16)
      } : null;
    case 6:
    case 7:
      result = fullHexRE.exec(hex3);
      return result ? {
        r: _parseInt(result[1], 16),
        g: _parseInt(result[2], 16),
        b: _parseInt(result[3], 16)
      } : null;
    default:
      return null;
  }
}
function overrideOpacity(color, opacity) {
  if (includes5(color).call(color, "rgba")) {
    return color;
  } else if (includes5(color).call(color, "rgb")) {
    var rgb = color.substr(indexOf4(color).call(color, "(") + 1).replace(")", "").split(",");
    return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "," + opacity + ")";
  } else {
    var _rgb = hexToRGB(color);
    if (_rgb == null) {
      return color;
    } else {
      return "rgba(" + _rgb.r + "," + _rgb.g + "," + _rgb.b + "," + opacity + ")";
    }
  }
}
function RGBToHex(red, green, blue) {
  var _context10;
  return "#" + slice4(_context10 = ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16)).call(_context10, 1);
}
function parseColor(inputColor, defaultColor) {
  if (isString(inputColor)) {
    var colorStr = inputColor;
    if (isValidRGB(colorStr)) {
      var _context11;
      var rgb = map$32(_context11 = colorStr.substr(4).substr(0, colorStr.length - 5).split(",")).call(_context11, function(value) {
        return _parseInt(value);
      });
      colorStr = RGBToHex(rgb[0], rgb[1], rgb[2]);
    }
    if (isValidHex(colorStr) === true) {
      var hsv = hexToHSV(colorStr);
      var lighterColorHSV = {
        h: hsv.h,
        s: hsv.s * 0.8,
        v: Math.min(1, hsv.v * 1.02)
      };
      var darkerColorHSV = {
        h: hsv.h,
        s: Math.min(1, hsv.s * 1.25),
        v: hsv.v * 0.8
      };
      var darkerColorHex = HSVToHex(darkerColorHSV.h, darkerColorHSV.s, darkerColorHSV.v);
      var lighterColorHex = HSVToHex(lighterColorHSV.h, lighterColorHSV.s, lighterColorHSV.v);
      return {
        background: colorStr,
        border: darkerColorHex,
        highlight: {
          background: lighterColorHex,
          border: darkerColorHex
        },
        hover: {
          background: lighterColorHex,
          border: darkerColorHex
        }
      };
    } else {
      return {
        background: colorStr,
        border: colorStr,
        highlight: {
          background: colorStr,
          border: colorStr
        },
        hover: {
          background: colorStr,
          border: colorStr
        }
      };
    }
  } else {
    if (defaultColor) {
      var color = {
        background: inputColor.background || defaultColor.background,
        border: inputColor.border || defaultColor.border,
        highlight: isString(inputColor.highlight) ? {
          border: inputColor.highlight,
          background: inputColor.highlight
        } : {
          background: inputColor.highlight && inputColor.highlight.background || defaultColor.highlight.background,
          border: inputColor.highlight && inputColor.highlight.border || defaultColor.highlight.border
        },
        hover: isString(inputColor.hover) ? {
          border: inputColor.hover,
          background: inputColor.hover
        } : {
          border: inputColor.hover && inputColor.hover.border || defaultColor.hover.border,
          background: inputColor.hover && inputColor.hover.background || defaultColor.hover.background
        }
      };
      return color;
    } else {
      var _color = {
        background: inputColor.background || void 0,
        border: inputColor.border || void 0,
        highlight: isString(inputColor.highlight) ? {
          border: inputColor.highlight,
          background: inputColor.highlight
        } : {
          background: inputColor.highlight && inputColor.highlight.background || void 0,
          border: inputColor.highlight && inputColor.highlight.border || void 0
        },
        hover: isString(inputColor.hover) ? {
          border: inputColor.hover,
          background: inputColor.hover
        } : {
          border: inputColor.hover && inputColor.hover.border || void 0,
          background: inputColor.hover && inputColor.hover.background || void 0
        }
      };
      return _color;
    }
  }
}
function RGBToHSV(red, green, blue) {
  red = red / 255;
  green = green / 255;
  blue = blue / 255;
  var minRGB = Math.min(red, Math.min(green, blue));
  var maxRGB = Math.max(red, Math.max(green, blue));
  if (minRGB === maxRGB) {
    return {
      h: 0,
      s: 0,
      v: minRGB
    };
  }
  var d = red === minRGB ? green - blue : blue === minRGB ? red - green : blue - red;
  var h = red === minRGB ? 3 : blue === minRGB ? 1 : 5;
  var hue = 60 * (h - d / (maxRGB - minRGB)) / 360;
  var saturation = (maxRGB - minRGB) / maxRGB;
  var value = maxRGB;
  return {
    h: hue,
    s: saturation,
    v: value
  };
}
function HSVToRGB(h, s, v) {
  var r;
  var g;
  var b;
  var i = Math.floor(h * 6);
  var f = h * 6 - i;
  var p = v * (1 - s);
  var q = v * (1 - f * s);
  var t = v * (1 - (1 - f) * s);
  switch (i % 6) {
    case 0:
      r = v, g = t, b = p;
      break;
    case 1:
      r = q, g = v, b = p;
      break;
    case 2:
      r = p, g = v, b = t;
      break;
    case 3:
      r = p, g = q, b = v;
      break;
    case 4:
      r = t, g = p, b = v;
      break;
    case 5:
      r = v, g = p, b = q;
      break;
  }
  return {
    r: Math.floor(r * 255),
    g: Math.floor(g * 255),
    b: Math.floor(b * 255)
  };
}
function HSVToHex(h, s, v) {
  var rgb = HSVToRGB(h, s, v);
  return RGBToHex(rgb.r, rgb.g, rgb.b);
}
function hexToHSV(hex3) {
  var rgb = hexToRGB(hex3);
  if (!rgb) {
    throw new TypeError("'".concat(hex3, "' is not a valid color."));
  }
  return RGBToHSV(rgb.r, rgb.g, rgb.b);
}
function isValidHex(hex3) {
  var isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex3);
  return isOk;
}
function isValidRGB(rgb) {
  return rgbRE.test(rgb);
}
function isValidRGBA(rgba) {
  return rgbaRE.test(rgba);
}
function bridgeObject(referenceObject) {
  if (referenceObject === null || _typeof2(referenceObject) !== "object") {
    return null;
  }
  if (referenceObject instanceof Element) {
    return referenceObject;
  }
  var objectTo = create$52(referenceObject);
  for (var i in referenceObject) {
    if (Object.prototype.hasOwnProperty.call(referenceObject, i)) {
      if (_typeof2(referenceObject[i]) == "object") {
        objectTo[i] = bridgeObject(referenceObject[i]);
      }
    }
  }
  return objectTo;
}
function mergeOptions(mergeTarget, options2, option) {
  var globalOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  var isPresent = function isPresent2(obj) {
    return obj !== null && obj !== void 0;
  };
  var isObject3 = function isObject4(obj) {
    return obj !== null && _typeof2(obj) === "object";
  };
  var isEmpty = function isEmpty2(obj) {
    for (var x in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, x)) {
        return false;
      }
    }
    return true;
  };
  if (!isObject3(mergeTarget)) {
    throw new Error("Parameter mergeTarget must be an object");
  }
  if (!isObject3(options2)) {
    throw new Error("Parameter options must be an object");
  }
  if (!isPresent(option)) {
    throw new Error("Parameter option must have a value");
  }
  if (!isObject3(globalOptions)) {
    throw new Error("Parameter globalOptions must be an object");
  }
  var doMerge = function doMerge2(target, options3, option2) {
    if (!isObject3(target[option2])) {
      target[option2] = {};
    }
    var src = options3[option2];
    var dst = target[option2];
    for (var prop in src) {
      if (Object.prototype.hasOwnProperty.call(src, prop)) {
        dst[prop] = src[prop];
      }
    }
  };
  var srcOption = options2[option];
  var globalPassed = isObject3(globalOptions) && !isEmpty(globalOptions);
  var globalOption = globalPassed ? globalOptions[option] : void 0;
  var globalEnabled = globalOption ? globalOption.enabled : void 0;
  if (srcOption === void 0) {
    return;
  }
  if (typeof srcOption === "boolean") {
    if (!isObject3(mergeTarget[option])) {
      mergeTarget[option] = {};
    }
    mergeTarget[option].enabled = srcOption;
    return;
  }
  if (srcOption === null && !isObject3(mergeTarget[option])) {
    if (isPresent(globalOption)) {
      mergeTarget[option] = create$52(globalOption);
    } else {
      return;
    }
  }
  if (!isObject3(srcOption)) {
    return;
  }
  var enabled = true;
  if (srcOption.enabled !== void 0) {
    enabled = srcOption.enabled;
  } else {
    if (globalEnabled !== void 0) {
      enabled = globalOption.enabled;
    }
  }
  doMerge(mergeTarget, options2, option);
  mergeTarget[option].enabled = enabled;
}
var easingFunctions = {
  linear: function linear(t) {
    return t;
  },
  easeInQuad: function easeInQuad(t) {
    return t * t;
  },
  easeOutQuad: function easeOutQuad(t) {
    return t * (2 - t);
  },
  easeInOutQuad: function easeInOutQuad(t) {
    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
  },
  easeInCubic: function easeInCubic(t) {
    return t * t * t;
  },
  easeOutCubic: function easeOutCubic(t) {
    return --t * t * t + 1;
  },
  easeInOutCubic: function easeInOutCubic(t) {
    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
  },
  easeInQuart: function easeInQuart(t) {
    return t * t * t * t;
  },
  easeOutQuart: function easeOutQuart(t) {
    return 1 - --t * t * t * t;
  },
  easeInOutQuart: function easeInOutQuart(t) {
    return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
  },
  easeInQuint: function easeInQuint(t) {
    return t * t * t * t * t;
  },
  easeOutQuint: function easeOutQuint(t) {
    return 1 + --t * t * t * t * t;
  },
  easeInOutQuint: function easeInOutQuint(t) {
    return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
  }
};
function topMost(pile, accessors) {
  var candidate;
  if (!isArray$12(accessors)) {
    accessors = [accessors];
  }
  var _iterator3 = _createForOfIteratorHelper$7(pile), _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
      var member = _step3.value;
      if (member) {
        candidate = member[accessors[0]];
        for (var i = 1; i < accessors.length; i++) {
          if (candidate) {
            candidate = candidate[accessors[i]];
          }
        }
        if (typeof candidate !== "undefined") {
          break;
        }
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return candidate;
}
var htmlColors = {
  black: "#000000",
  navy: "#000080",
  darkblue: "#00008B",
  mediumblue: "#0000CD",
  blue: "#0000FF",
  darkgreen: "#006400",
  green: "#008000",
  teal: "#008080",
  darkcyan: "#008B8B",
  deepskyblue: "#00BFFF",
  darkturquoise: "#00CED1",
  mediumspringgreen: "#00FA9A",
  lime: "#00FF00",
  springgreen: "#00FF7F",
  aqua: "#00FFFF",
  cyan: "#00FFFF",
  midnightblue: "#191970",
  dodgerblue: "#1E90FF",
  lightseagreen: "#20B2AA",
  forestgreen: "#228B22",
  seagreen: "#2E8B57",
  darkslategray: "#2F4F4F",
  limegreen: "#32CD32",
  mediumseagreen: "#3CB371",
  turquoise: "#40E0D0",
  royalblue: "#4169E1",
  steelblue: "#4682B4",
  darkslateblue: "#483D8B",
  mediumturquoise: "#48D1CC",
  indigo: "#4B0082",
  darkolivegreen: "#556B2F",
  cadetblue: "#5F9EA0",
  cornflowerblue: "#6495ED",
  mediumaquamarine: "#66CDAA",
  dimgray: "#696969",
  slateblue: "#6A5ACD",
  olivedrab: "#6B8E23",
  slategray: "#708090",
  lightslategray: "#778899",
  mediumslateblue: "#7B68EE",
  lawngreen: "#7CFC00",
  chartreuse: "#7FFF00",
  aquamarine: "#7FFFD4",
  maroon: "#800000",
  purple: "#800080",
  olive: "#808000",
  gray: "#808080",
  skyblue: "#87CEEB",
  lightskyblue: "#87CEFA",
  blueviolet: "#8A2BE2",
  darkred: "#8B0000",
  darkmagenta: "#8B008B",
  saddlebrown: "#8B4513",
  darkseagreen: "#8FBC8F",
  lightgreen: "#90EE90",
  mediumpurple: "#9370D8",
  darkviolet: "#9400D3",
  palegreen: "#98FB98",
  darkorchid: "#9932CC",
  yellowgreen: "#9ACD32",
  sienna: "#A0522D",
  brown: "#A52A2A",
  darkgray: "#A9A9A9",
  lightblue: "#ADD8E6",
  greenyellow: "#ADFF2F",
  paleturquoise: "#AFEEEE",
  lightsteelblue: "#B0C4DE",
  powderblue: "#B0E0E6",
  firebrick: "#B22222",
  darkgoldenrod: "#B8860B",
  mediumorchid: "#BA55D3",
  rosybrown: "#BC8F8F",
  darkkhaki: "#BDB76B",
  silver: "#C0C0C0",
  mediumvioletred: "#C71585",
  indianred: "#CD5C5C",
  peru: "#CD853F",
  chocolate: "#D2691E",
  tan: "#D2B48C",
  lightgrey: "#D3D3D3",
  palevioletred: "#D87093",
  thistle: "#D8BFD8",
  orchid: "#DA70D6",
  goldenrod: "#DAA520",
  crimson: "#DC143C",
  gainsboro: "#DCDCDC",
  plum: "#DDA0DD",
  burlywood: "#DEB887",
  lightcyan: "#E0FFFF",
  lavender: "#E6E6FA",
  darksalmon: "#E9967A",
  violet: "#EE82EE",
  palegoldenrod: "#EEE8AA",
  lightcoral: "#F08080",
  khaki: "#F0E68C",
  aliceblue: "#F0F8FF",
  honeydew: "#F0FFF0",
  azure: "#F0FFFF",
  sandybrown: "#F4A460",
  wheat: "#F5DEB3",
  beige: "#F5F5DC",
  whitesmoke: "#F5F5F5",
  mintcream: "#F5FFFA",
  ghostwhite: "#F8F8FF",
  salmon: "#FA8072",
  antiquewhite: "#FAEBD7",
  linen: "#FAF0E6",
  lightgoldenrodyellow: "#FAFAD2",
  oldlace: "#FDF5E6",
  red: "#FF0000",
  fuchsia: "#FF00FF",
  magenta: "#FF00FF",
  deeppink: "#FF1493",
  orangered: "#FF4500",
  tomato: "#FF6347",
  hotpink: "#FF69B4",
  coral: "#FF7F50",
  darkorange: "#FF8C00",
  lightsalmon: "#FFA07A",
  orange: "#FFA500",
  lightpink: "#FFB6C1",
  pink: "#FFC0CB",
  gold: "#FFD700",
  peachpuff: "#FFDAB9",
  navajowhite: "#FFDEAD",
  moccasin: "#FFE4B5",
  bisque: "#FFE4C4",
  mistyrose: "#FFE4E1",
  blanchedalmond: "#FFEBCD",
  papayawhip: "#FFEFD5",
  lavenderblush: "#FFF0F5",
  seashell: "#FFF5EE",
  cornsilk: "#FFF8DC",
  lemonchiffon: "#FFFACD",
  floralwhite: "#FFFAF0",
  snow: "#FFFAFA",
  yellow: "#FFFF00",
  lightyellow: "#FFFFE0",
  ivory: "#FFFFF0",
  white: "#FFFFFF"
};
var ColorPicker$1 = function() {
  function ColorPicker$12() {
    var pixelRatio = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
    _classCallCheck2(this, ColorPicker$12);
    this.pixelRatio = pixelRatio;
    this.generated = false;
    this.centerCoordinates = {
      x: 289 / 2,
      y: 289 / 2
    };
    this.r = 289 * 0.49;
    this.color = {
      r: 255,
      g: 255,
      b: 255,
      a: 1
    };
    this.hueCircle = void 0;
    this.initialColor = {
      r: 255,
      g: 255,
      b: 255,
      a: 1
    };
    this.previousColor = void 0;
    this.applied = false;
    this.updateCallback = function() {
    };
    this.closeCallback = function() {
    };
    this._create();
  }
  _createClass2(ColorPicker$12, [{
    key: "insertTo",
    value: function insertTo(container) {
      if (this.hammer !== void 0) {
        this.hammer.destroy();
        this.hammer = void 0;
      }
      this.container = container;
      this.container.appendChild(this.frame);
      this._bindHammer();
      this._setSize();
    }
  }, {
    key: "setUpdateCallback",
    value: function setUpdateCallback(callback) {
      if (typeof callback === "function") {
        this.updateCallback = callback;
      } else {
        throw new Error("Function attempted to set as colorPicker update callback is not a function.");
      }
    }
  }, {
    key: "setCloseCallback",
    value: function setCloseCallback(callback) {
      if (typeof callback === "function") {
        this.closeCallback = callback;
      } else {
        throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
      }
    }
  }, {
    key: "_isColorString",
    value: function _isColorString(color) {
      if (typeof color === "string") {
        return htmlColors[color];
      }
    }
  }, {
    key: "setColor",
    value: function setColor(color) {
      var setInitial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (color === "none") {
        return;
      }
      var rgba;
      var htmlColor = this._isColorString(color);
      if (htmlColor !== void 0) {
        color = htmlColor;
      }
      if (isString(color) === true) {
        if (isValidRGB(color) === true) {
          var rgbaArray = color.substr(4).substr(0, color.length - 5).split(",");
          rgba = {
            r: rgbaArray[0],
            g: rgbaArray[1],
            b: rgbaArray[2],
            a: 1
          };
        } else if (isValidRGBA(color) === true) {
          var _rgbaArray = color.substr(5).substr(0, color.length - 6).split(",");
          rgba = {
            r: _rgbaArray[0],
            g: _rgbaArray[1],
            b: _rgbaArray[2],
            a: _rgbaArray[3]
          };
        } else if (isValidHex(color) === true) {
          var rgbObj = hexToRGB(color);
          rgba = {
            r: rgbObj.r,
            g: rgbObj.g,
            b: rgbObj.b,
            a: 1
          };
        }
      } else {
        if (color instanceof Object) {
          if (color.r !== void 0 && color.g !== void 0 && color.b !== void 0) {
            var alpha = color.a !== void 0 ? color.a : "1.0";
            rgba = {
              r: color.r,
              g: color.g,
              b: color.b,
              a: alpha
            };
          }
        }
      }
      if (rgba === void 0) {
        throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + stringify$12(color));
      } else {
        this._setColor(rgba, setInitial);
      }
    }
  }, {
    key: "show",
    value: function show() {
      if (this.closeCallback !== void 0) {
        this.closeCallback();
        this.closeCallback = void 0;
      }
      this.applied = false;
      this.frame.style.display = "block";
      this._generateHueCircle();
    }
  }, {
    key: "_hide",
    value: function _hide() {
      var _this2 = this;
      var storePrevious = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      if (storePrevious === true) {
        this.previousColor = assign$22({}, this.color);
      }
      if (this.applied === true) {
        this.updateCallback(this.initialColor);
      }
      this.frame.style.display = "none";
      setTimeout$12(function() {
        if (_this2.closeCallback !== void 0) {
          _this2.closeCallback();
          _this2.closeCallback = void 0;
        }
      }, 0);
    }
  }, {
    key: "_save",
    value: function _save() {
      this.updateCallback(this.color);
      this.applied = false;
      this._hide();
    }
  }, {
    key: "_apply",
    value: function _apply() {
      this.applied = true;
      this.updateCallback(this.color);
      this._updatePicker(this.color);
    }
  }, {
    key: "_loadLast",
    value: function _loadLast() {
      if (this.previousColor !== void 0) {
        this.setColor(this.previousColor, false);
      } else {
        alert("There is no last color to load...");
      }
    }
  }, {
    key: "_setColor",
    value: function _setColor(rgba) {
      var setInitial = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (setInitial === true) {
        this.initialColor = assign$22({}, rgba);
      }
      this.color = rgba;
      var hsv = RGBToHSV(rgba.r, rgba.g, rgba.b);
      var angleConvert = 2 * Math.PI;
      var radius = this.r * hsv.s;
      var x = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);
      var y = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);
      this.colorPickerSelector.style.left = x - 0.5 * this.colorPickerSelector.clientWidth + "px";
      this.colorPickerSelector.style.top = y - 0.5 * this.colorPickerSelector.clientHeight + "px";
      this._updatePicker(rgba);
    }
  }, {
    key: "_setOpacity",
    value: function _setOpacity(value) {
      this.color.a = value / 100;
      this._updatePicker(this.color);
    }
  }, {
    key: "_setBrightness",
    value: function _setBrightness(value) {
      var hsv = RGBToHSV(this.color.r, this.color.g, this.color.b);
      hsv.v = value / 100;
      var rgba = HSVToRGB(hsv.h, hsv.s, hsv.v);
      rgba["a"] = this.color.a;
      this.color = rgba;
      this._updatePicker();
    }
  }, {
    key: "_updatePicker",
    value: function _updatePicker() {
      var rgba = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.color;
      var hsv = RGBToHSV(rgba.r, rgba.g, rgba.b);
      var ctx = this.colorPickerCanvas.getContext("2d");
      if (this.pixelRation === void 0) {
        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
      }
      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
      var w = this.colorPickerCanvas.clientWidth;
      var h = this.colorPickerCanvas.clientHeight;
      ctx.clearRect(0, 0, w, h);
      ctx.putImageData(this.hueCircle, 0, 0);
      ctx.fillStyle = "rgba(0,0,0," + (1 - hsv.v) + ")";
      ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
      fill4(ctx).call(ctx);
      this.brightnessRange.value = 100 * hsv.v;
      this.opacityRange.value = 100 * rgba.a;
      this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")";
      this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
    }
  }, {
    key: "_setSize",
    value: function _setSize() {
      this.colorPickerCanvas.style.width = "100%";
      this.colorPickerCanvas.style.height = "100%";
      this.colorPickerCanvas.width = 289 * this.pixelRatio;
      this.colorPickerCanvas.height = 289 * this.pixelRatio;
    }
  }, {
    key: "_create",
    value: function _create() {
      var _context16, _context17, _context18, _context19;
      this.frame = document.createElement("div");
      this.frame.className = "vis-color-picker";
      this.colorPickerDiv = document.createElement("div");
      this.colorPickerSelector = document.createElement("div");
      this.colorPickerSelector.className = "vis-selector";
      this.colorPickerDiv.appendChild(this.colorPickerSelector);
      this.colorPickerCanvas = document.createElement("canvas");
      this.colorPickerDiv.appendChild(this.colorPickerCanvas);
      if (!this.colorPickerCanvas.getContext) {
        var noCanvas = document.createElement("DIV");
        noCanvas.style.color = "red";
        noCanvas.style.fontWeight = "bold";
        noCanvas.style.padding = "10px";
        noCanvas.innerText = "Error: your browser does not support HTML canvas";
        this.colorPickerCanvas.appendChild(noCanvas);
      } else {
        var ctx = this.colorPickerCanvas.getContext("2d");
        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
        this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
      }
      this.colorPickerDiv.className = "vis-color";
      this.opacityDiv = document.createElement("div");
      this.opacityDiv.className = "vis-opacity";
      this.brightnessDiv = document.createElement("div");
      this.brightnessDiv.className = "vis-brightness";
      this.arrowDiv = document.createElement("div");
      this.arrowDiv.className = "vis-arrow";
      this.opacityRange = document.createElement("input");
      try {
        this.opacityRange.type = "range";
        this.opacityRange.min = "0";
        this.opacityRange.max = "100";
      } catch (err) {
      }
      this.opacityRange.value = "100";
      this.opacityRange.className = "vis-range";
      this.brightnessRange = document.createElement("input");
      try {
        this.brightnessRange.type = "range";
        this.brightnessRange.min = "0";
        this.brightnessRange.max = "100";
      } catch (err) {
      }
      this.brightnessRange.value = "100";
      this.brightnessRange.className = "vis-range";
      this.opacityDiv.appendChild(this.opacityRange);
      this.brightnessDiv.appendChild(this.brightnessRange);
      var me = this;
      this.opacityRange.onchange = function() {
        me._setOpacity(this.value);
      };
      this.opacityRange.oninput = function() {
        me._setOpacity(this.value);
      };
      this.brightnessRange.onchange = function() {
        me._setBrightness(this.value);
      };
      this.brightnessRange.oninput = function() {
        me._setBrightness(this.value);
      };
      this.brightnessLabel = document.createElement("div");
      this.brightnessLabel.className = "vis-label vis-brightness";
      this.brightnessLabel.innerText = "brightness:";
      this.opacityLabel = document.createElement("div");
      this.opacityLabel.className = "vis-label vis-opacity";
      this.opacityLabel.innerText = "opacity:";
      this.newColorDiv = document.createElement("div");
      this.newColorDiv.className = "vis-new-color";
      this.newColorDiv.innerText = "new";
      this.initialColorDiv = document.createElement("div");
      this.initialColorDiv.className = "vis-initial-color";
      this.initialColorDiv.innerText = "initial";
      this.cancelButton = document.createElement("div");
      this.cancelButton.className = "vis-button vis-cancel";
      this.cancelButton.innerText = "cancel";
      this.cancelButton.onclick = bind$52(_context16 = this._hide).call(_context16, this, false);
      this.applyButton = document.createElement("div");
      this.applyButton.className = "vis-button vis-apply";
      this.applyButton.innerText = "apply";
      this.applyButton.onclick = bind$52(_context17 = this._apply).call(_context17, this);
      this.saveButton = document.createElement("div");
      this.saveButton.className = "vis-button vis-save";
      this.saveButton.innerText = "save";
      this.saveButton.onclick = bind$52(_context18 = this._save).call(_context18, this);
      this.loadButton = document.createElement("div");
      this.loadButton.className = "vis-button vis-load";
      this.loadButton.innerText = "load last";
      this.loadButton.onclick = bind$52(_context19 = this._loadLast).call(_context19, this);
      this.frame.appendChild(this.colorPickerDiv);
      this.frame.appendChild(this.arrowDiv);
      this.frame.appendChild(this.brightnessLabel);
      this.frame.appendChild(this.brightnessDiv);
      this.frame.appendChild(this.opacityLabel);
      this.frame.appendChild(this.opacityDiv);
      this.frame.appendChild(this.newColorDiv);
      this.frame.appendChild(this.initialColorDiv);
      this.frame.appendChild(this.cancelButton);
      this.frame.appendChild(this.applyButton);
      this.frame.appendChild(this.saveButton);
      this.frame.appendChild(this.loadButton);
    }
  }, {
    key: "_bindHammer",
    value: function _bindHammer() {
      var _this3 = this;
      this.drag = {};
      this.pinch = {};
      this.hammer = new Hammer$12(this.colorPickerCanvas);
      this.hammer.get("pinch").set({
        enable: true
      });
      this.hammer.on("hammer.input", function(event) {
        if (event.isFirst) {
          _this3._moveSelector(event);
        }
      });
      this.hammer.on("tap", function(event) {
        _this3._moveSelector(event);
      });
      this.hammer.on("panstart", function(event) {
        _this3._moveSelector(event);
      });
      this.hammer.on("panmove", function(event) {
        _this3._moveSelector(event);
      });
      this.hammer.on("panend", function(event) {
        _this3._moveSelector(event);
      });
    }
  }, {
    key: "_generateHueCircle",
    value: function _generateHueCircle() {
      if (this.generated === false) {
        var ctx = this.colorPickerCanvas.getContext("2d");
        if (this.pixelRation === void 0) {
          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
        }
        ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
        var w = this.colorPickerCanvas.clientWidth;
        var h = this.colorPickerCanvas.clientHeight;
        ctx.clearRect(0, 0, w, h);
        var x, y, hue, sat;
        this.centerCoordinates = {
          x: w * 0.5,
          y: h * 0.5
        };
        this.r = 0.49 * w;
        var angleConvert = 2 * Math.PI / 360;
        var hfac = 1 / 360;
        var sfac = 1 / this.r;
        var rgb;
        for (hue = 0; hue < 360; hue++) {
          for (sat = 0; sat < this.r; sat++) {
            x = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);
            y = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);
            rgb = HSVToRGB(hue * hfac, sat * sfac, 1);
            ctx.fillStyle = "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
            ctx.fillRect(x - 0.5, y - 0.5, 2, 2);
          }
        }
        ctx.strokeStyle = "rgba(0,0,0,1)";
        ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
        ctx.stroke();
        this.hueCircle = ctx.getImageData(0, 0, w, h);
      }
      this.generated = true;
    }
  }, {
    key: "_moveSelector",
    value: function _moveSelector(event) {
      var rect = this.colorPickerDiv.getBoundingClientRect();
      var left = event.center.x - rect.left;
      var top = event.center.y - rect.top;
      var centerY = 0.5 * this.colorPickerDiv.clientHeight;
      var centerX = 0.5 * this.colorPickerDiv.clientWidth;
      var x = left - centerX;
      var y = top - centerY;
      var angle = Math.atan2(x, y);
      var radius = 0.98 * Math.min(Math.sqrt(x * x + y * y), centerX);
      var newTop = Math.cos(angle) * radius + centerY;
      var newLeft = Math.sin(angle) * radius + centerX;
      this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + "px";
      this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + "px";
      var h = angle / (2 * Math.PI);
      h = h < 0 ? h + 1 : h;
      var s = radius / this.r;
      var hsv = RGBToHSV(this.color.r, this.color.g, this.color.b);
      hsv.h = h;
      hsv.s = s;
      var rgba = HSVToRGB(hsv.h, hsv.s, hsv.v);
      rgba["a"] = this.color.a;
      this.color = rgba;
      this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")";
      this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
    }
  }]);
  return ColorPicker$12;
}();
function wrapInTag() {
  for (var _len5 = arguments.length, rest = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    rest[_key5] = arguments[_key5];
  }
  if (rest.length < 1) {
    throw new TypeError("Invalid arguments.");
  } else if (rest.length === 1) {
    return document.createTextNode(rest[0]);
  } else {
    var element = document.createElement(rest[0]);
    element.appendChild(wrapInTag.apply(void 0, _toConsumableArray2(slice4(rest).call(rest, 1))));
    return element;
  }
}
var Configurator$1 = function() {
  function Configurator$12(parentModule, defaultContainer, configureOptions2) {
    var pixelRatio = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    var hideOption = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : function() {
      return false;
    };
    _classCallCheck2(this, Configurator$12);
    this.parent = parentModule;
    this.changedOptions = [];
    this.container = defaultContainer;
    this.allowCreation = false;
    this.hideOption = hideOption;
    this.options = {};
    this.initialized = false;
    this.popupCounter = 0;
    this.defaultOptions = {
      enabled: false,
      filter: true,
      container: void 0,
      showButton: true
    };
    assign$22(this.options, this.defaultOptions);
    this.configureOptions = configureOptions2;
    this.moduleOptions = {};
    this.domElements = [];
    this.popupDiv = {};
    this.popupLimit = 5;
    this.popupHistory = {};
    this.colorPicker = new ColorPicker$1(pixelRatio);
    this.wrapper = void 0;
  }
  _createClass2(Configurator$12, [{
    key: "setOptions",
    value: function setOptions(options2) {
      if (options2 !== void 0) {
        this.popupHistory = {};
        this._removePopup();
        var enabled = true;
        if (typeof options2 === "string") {
          this.options.filter = options2;
        } else if (isArray$12(options2)) {
          this.options.filter = options2.join();
        } else if (_typeof2(options2) === "object") {
          if (options2 == null) {
            throw new TypeError("options cannot be null");
          }
          if (options2.container !== void 0) {
            this.options.container = options2.container;
          }
          if (filter4(options2) !== void 0) {
            this.options.filter = filter4(options2);
          }
          if (options2.showButton !== void 0) {
            this.options.showButton = options2.showButton;
          }
          if (options2.enabled !== void 0) {
            enabled = options2.enabled;
          }
        } else if (typeof options2 === "boolean") {
          this.options.filter = true;
          enabled = options2;
        } else if (typeof options2 === "function") {
          this.options.filter = options2;
          enabled = true;
        }
        if (filter4(this.options) === false) {
          enabled = false;
        }
        this.options.enabled = enabled;
      }
      this._clean();
    }
  }, {
    key: "setModuleOptions",
    value: function setModuleOptions(moduleOptions) {
      this.moduleOptions = moduleOptions;
      if (this.options.enabled === true) {
        this._clean();
        if (this.options.container !== void 0) {
          this.container = this.options.container;
        }
        this._create();
      }
    }
  }, {
    key: "_create",
    value: function _create() {
      this._clean();
      this.changedOptions = [];
      var filter$13 = filter4(this.options);
      var counter = 0;
      var show = false;
      for (var _option in this.configureOptions) {
        if (Object.prototype.hasOwnProperty.call(this.configureOptions, _option)) {
          this.allowCreation = false;
          show = false;
          if (typeof filter$13 === "function") {
            show = filter$13(_option, []);
            show = show || this._handleObject(this.configureOptions[_option], [_option], true);
          } else if (filter$13 === true || indexOf4(filter$13).call(filter$13, _option) !== -1) {
            show = true;
          }
          if (show !== false) {
            this.allowCreation = true;
            if (counter > 0) {
              this._makeItem([]);
            }
            this._makeHeader(_option);
            this._handleObject(this.configureOptions[_option], [_option]);
          }
          counter++;
        }
      }
      this._makeButton();
      this._push();
    }
  }, {
    key: "_push",
    value: function _push() {
      this.wrapper = document.createElement("div");
      this.wrapper.className = "vis-configuration-wrapper";
      this.container.appendChild(this.wrapper);
      for (var i = 0; i < this.domElements.length; i++) {
        this.wrapper.appendChild(this.domElements[i]);
      }
      this._showPopupIfNeeded();
    }
  }, {
    key: "_clean",
    value: function _clean() {
      for (var i = 0; i < this.domElements.length; i++) {
        this.wrapper.removeChild(this.domElements[i]);
      }
      if (this.wrapper !== void 0) {
        this.container.removeChild(this.wrapper);
        this.wrapper = void 0;
      }
      this.domElements = [];
      this._removePopup();
    }
  }, {
    key: "_getValue",
    value: function _getValue(path3) {
      var base = this.moduleOptions;
      for (var i = 0; i < path3.length; i++) {
        if (base[path3[i]] !== void 0) {
          base = base[path3[i]];
        } else {
          base = void 0;
          break;
        }
      }
      return base;
    }
  }, {
    key: "_makeItem",
    value: function _makeItem(path3) {
      if (this.allowCreation === true) {
        var item = document.createElement("div");
        item.className = "vis-configuration vis-config-item vis-config-s" + path3.length;
        for (var _len6 = arguments.length, domElements = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          domElements[_key6 - 1] = arguments[_key6];
        }
        forEach$22(domElements).call(domElements, function(element) {
          item.appendChild(element);
        });
        this.domElements.push(item);
        return this.domElements.length;
      }
      return 0;
    }
  }, {
    key: "_makeHeader",
    value: function _makeHeader(name) {
      var div = document.createElement("div");
      div.className = "vis-configuration vis-config-header";
      div.innerText = name;
      this._makeItem([], div);
    }
  }, {
    key: "_makeLabel",
    value: function _makeLabel(name, path3) {
      var objectLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var div = document.createElement("div");
      div.className = "vis-configuration vis-config-label vis-config-s" + path3.length;
      if (objectLabel === true) {
        while (div.firstChild) {
          div.removeChild(div.firstChild);
        }
        div.appendChild(wrapInTag("i", "b", name));
      } else {
        div.innerText = name + ":";
      }
      return div;
    }
  }, {
    key: "_makeDropdown",
    value: function _makeDropdown(arr, value, path3) {
      var select = document.createElement("select");
      select.className = "vis-configuration vis-config-select";
      var selectedValue = 0;
      if (value !== void 0) {
        if (indexOf4(arr).call(arr, value) !== -1) {
          selectedValue = indexOf4(arr).call(arr, value);
        }
      }
      for (var i = 0; i < arr.length; i++) {
        var _option2 = document.createElement("option");
        _option2.value = arr[i];
        if (i === selectedValue) {
          _option2.selected = "selected";
        }
        _option2.innerText = arr[i];
        select.appendChild(_option2);
      }
      var me = this;
      select.onchange = function() {
        me._update(this.value, path3);
      };
      var label = this._makeLabel(path3[path3.length - 1], path3);
      this._makeItem(path3, label, select);
    }
  }, {
    key: "_makeRange",
    value: function _makeRange(arr, value, path3) {
      var defaultValue = arr[0];
      var min3 = arr[1];
      var max3 = arr[2];
      var step = arr[3];
      var range = document.createElement("input");
      range.className = "vis-configuration vis-config-range";
      try {
        range.type = "range";
        range.min = min3;
        range.max = max3;
      } catch (err) {
      }
      range.step = step;
      var popupString = "";
      var popupValue = 0;
      if (value !== void 0) {
        var factor = 1.2;
        if (value < 0 && value * factor < min3) {
          range.min = Math.ceil(value * factor);
          popupValue = range.min;
          popupString = "range increased";
        } else if (value / factor < min3) {
          range.min = Math.ceil(value / factor);
          popupValue = range.min;
          popupString = "range increased";
        }
        if (value * factor > max3 && max3 !== 1) {
          range.max = Math.ceil(value * factor);
          popupValue = range.max;
          popupString = "range increased";
        }
        range.value = value;
      } else {
        range.value = defaultValue;
      }
      var input = document.createElement("input");
      input.className = "vis-configuration vis-config-rangeinput";
      input.value = range.value;
      var me = this;
      range.onchange = function() {
        input.value = this.value;
        me._update(Number(this.value), path3);
      };
      range.oninput = function() {
        input.value = this.value;
      };
      var label = this._makeLabel(path3[path3.length - 1], path3);
      var itemIndex = this._makeItem(path3, label, range, input);
      if (popupString !== "" && this.popupHistory[itemIndex] !== popupValue) {
        this.popupHistory[itemIndex] = popupValue;
        this._setupPopup(popupString, itemIndex);
      }
    }
  }, {
    key: "_makeButton",
    value: function _makeButton() {
      var _this4 = this;
      if (this.options.showButton === true) {
        var generateButton = document.createElement("div");
        generateButton.className = "vis-configuration vis-config-button";
        generateButton.innerText = "generate options";
        generateButton.onclick = function() {
          _this4._printOptions();
        };
        generateButton.onmouseover = function() {
          generateButton.className = "vis-configuration vis-config-button hover";
        };
        generateButton.onmouseout = function() {
          generateButton.className = "vis-configuration vis-config-button";
        };
        this.optionsContainer = document.createElement("div");
        this.optionsContainer.className = "vis-configuration vis-config-option-container";
        this.domElements.push(this.optionsContainer);
        this.domElements.push(generateButton);
      }
    }
  }, {
    key: "_setupPopup",
    value: function _setupPopup(string2, index2) {
      var _this5 = this;
      if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {
        var div = document.createElement("div");
        div.id = "vis-configuration-popup";
        div.className = "vis-configuration-popup";
        div.innerText = string2;
        div.onclick = function() {
          _this5._removePopup();
        };
        this.popupCounter += 1;
        this.popupDiv = {
          html: div,
          index: index2
        };
      }
    }
  }, {
    key: "_removePopup",
    value: function _removePopup() {
      if (this.popupDiv.html !== void 0) {
        this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);
        clearTimeout(this.popupDiv.hideTimeout);
        clearTimeout(this.popupDiv.deleteTimeout);
        this.popupDiv = {};
      }
    }
  }, {
    key: "_showPopupIfNeeded",
    value: function _showPopupIfNeeded() {
      var _this6 = this;
      if (this.popupDiv.html !== void 0) {
        var correspondingElement = this.domElements[this.popupDiv.index];
        var rect = correspondingElement.getBoundingClientRect();
        this.popupDiv.html.style.left = rect.left + "px";
        this.popupDiv.html.style.top = rect.top - 30 + "px";
        document.body.appendChild(this.popupDiv.html);
        this.popupDiv.hideTimeout = setTimeout$12(function() {
          _this6.popupDiv.html.style.opacity = 0;
        }, 1500);
        this.popupDiv.deleteTimeout = setTimeout$12(function() {
          _this6._removePopup();
        }, 1800);
      }
    }
  }, {
    key: "_makeCheckbox",
    value: function _makeCheckbox(defaultValue, value, path3) {
      var checkbox = document.createElement("input");
      checkbox.type = "checkbox";
      checkbox.className = "vis-configuration vis-config-checkbox";
      checkbox.checked = defaultValue;
      if (value !== void 0) {
        checkbox.checked = value;
        if (value !== defaultValue) {
          if (_typeof2(defaultValue) === "object") {
            if (value !== defaultValue.enabled) {
              this.changedOptions.push({
                path: path3,
                value
              });
            }
          } else {
            this.changedOptions.push({
              path: path3,
              value
            });
          }
        }
      }
      var me = this;
      checkbox.onchange = function() {
        me._update(this.checked, path3);
      };
      var label = this._makeLabel(path3[path3.length - 1], path3);
      this._makeItem(path3, label, checkbox);
    }
  }, {
    key: "_makeTextInput",
    value: function _makeTextInput(defaultValue, value, path3) {
      var checkbox = document.createElement("input");
      checkbox.type = "text";
      checkbox.className = "vis-configuration vis-config-text";
      checkbox.value = value;
      if (value !== defaultValue) {
        this.changedOptions.push({
          path: path3,
          value
        });
      }
      var me = this;
      checkbox.onchange = function() {
        me._update(this.value, path3);
      };
      var label = this._makeLabel(path3[path3.length - 1], path3);
      this._makeItem(path3, label, checkbox);
    }
  }, {
    key: "_makeColorField",
    value: function _makeColorField(arr, value, path3) {
      var _this7 = this;
      var defaultColor = arr[1];
      var div = document.createElement("div");
      value = value === void 0 ? defaultColor : value;
      if (value !== "none") {
        div.className = "vis-configuration vis-config-colorBlock";
        div.style.backgroundColor = value;
      } else {
        div.className = "vis-configuration vis-config-colorBlock none";
      }
      value = value === void 0 ? defaultColor : value;
      div.onclick = function() {
        _this7._showColorPicker(value, div, path3);
      };
      var label = this._makeLabel(path3[path3.length - 1], path3);
      this._makeItem(path3, label, div);
    }
  }, {
    key: "_showColorPicker",
    value: function _showColorPicker(value, div, path3) {
      var _this8 = this;
      div.onclick = function() {
      };
      this.colorPicker.insertTo(div);
      this.colorPicker.show();
      this.colorPicker.setColor(value);
      this.colorPicker.setUpdateCallback(function(color) {
        var colorString = "rgba(" + color.r + "," + color.g + "," + color.b + "," + color.a + ")";
        div.style.backgroundColor = colorString;
        _this8._update(colorString, path3);
      });
      this.colorPicker.setCloseCallback(function() {
        div.onclick = function() {
          _this8._showColorPicker(value, div, path3);
        };
      });
    }
  }, {
    key: "_handleObject",
    value: function _handleObject(obj) {
      var path3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var checkOnly = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var show = false;
      var filter$13 = filter4(this.options);
      var visibleInSet = false;
      for (var subObj in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, subObj)) {
          show = true;
          var item = obj[subObj];
          var newPath = copyAndExtendArray(path3, subObj);
          if (typeof filter$13 === "function") {
            show = filter$13(subObj, path3);
            if (show === false) {
              if (!isArray$12(item) && typeof item !== "string" && typeof item !== "boolean" && item instanceof Object) {
                this.allowCreation = false;
                show = this._handleObject(item, newPath, true);
                this.allowCreation = checkOnly === false;
              }
            }
          }
          if (show !== false) {
            visibleInSet = true;
            var value = this._getValue(newPath);
            if (isArray$12(item)) {
              this._handleArray(item, value, newPath);
            } else if (typeof item === "string") {
              this._makeTextInput(item, value, newPath);
            } else if (typeof item === "boolean") {
              this._makeCheckbox(item, value, newPath);
            } else if (item instanceof Object) {
              if (!this.hideOption(path3, subObj, this.moduleOptions)) {
                if (item.enabled !== void 0) {
                  var enabledPath = copyAndExtendArray(newPath, "enabled");
                  var enabledValue = this._getValue(enabledPath);
                  if (enabledValue === true) {
                    var label = this._makeLabel(subObj, newPath, true);
                    this._makeItem(newPath, label);
                    visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                  } else {
                    this._makeCheckbox(item, enabledValue, newPath);
                  }
                } else {
                  var _label = this._makeLabel(subObj, newPath, true);
                  this._makeItem(newPath, _label);
                  visibleInSet = this._handleObject(item, newPath) || visibleInSet;
                }
              }
            } else {
              console.error("dont know how to handle", item, subObj, newPath);
            }
          }
        }
      }
      return visibleInSet;
    }
  }, {
    key: "_handleArray",
    value: function _handleArray(arr, value, path3) {
      if (typeof arr[0] === "string" && arr[0] === "color") {
        this._makeColorField(arr, value, path3);
        if (arr[1] !== value) {
          this.changedOptions.push({
            path: path3,
            value
          });
        }
      } else if (typeof arr[0] === "string") {
        this._makeDropdown(arr, value, path3);
        if (arr[0] !== value) {
          this.changedOptions.push({
            path: path3,
            value
          });
        }
      } else if (typeof arr[0] === "number") {
        this._makeRange(arr, value, path3);
        if (arr[0] !== value) {
          this.changedOptions.push({
            path: path3,
            value: Number(value)
          });
        }
      }
    }
  }, {
    key: "_update",
    value: function _update(value, path3) {
      var options2 = this._constructOptions(value, path3);
      if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {
        this.parent.body.emitter.emit("configChange", options2);
      }
      this.initialized = true;
      this.parent.setOptions(options2);
    }
  }, {
    key: "_constructOptions",
    value: function _constructOptions(value, path3) {
      var optionsObj = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var pointer = optionsObj;
      value = value === "true" ? true : value;
      value = value === "false" ? false : value;
      for (var i = 0; i < path3.length; i++) {
        if (path3[i] !== "global") {
          if (pointer[path3[i]] === void 0) {
            pointer[path3[i]] = {};
          }
          if (i !== path3.length - 1) {
            pointer = pointer[path3[i]];
          } else {
            pointer[path3[i]] = value;
          }
        }
      }
      return optionsObj;
    }
  }, {
    key: "_printOptions",
    value: function _printOptions() {
      var options2 = this.getOptions();
      while (this.optionsContainer.firstChild) {
        this.optionsContainer.removeChild(this.optionsContainer.firstChild);
      }
      this.optionsContainer.appendChild(wrapInTag("pre", "const options = " + stringify$12(options2, null, 2)));
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      var options2 = {};
      for (var i = 0; i < this.changedOptions.length; i++) {
        this._constructOptions(this.changedOptions[i].value, this.changedOptions[i].path, options2);
      }
      return options2;
    }
  }]);
  return Configurator$12;
}();
var Popup$1 = function() {
  function Popup$12(container, overflowMethod) {
    _classCallCheck2(this, Popup$12);
    this.container = container;
    this.overflowMethod = overflowMethod || "cap";
    this.x = 0;
    this.y = 0;
    this.padding = 5;
    this.hidden = false;
    this.frame = document.createElement("div");
    this.frame.className = "vis-tooltip";
    this.container.appendChild(this.frame);
  }
  _createClass2(Popup$12, [{
    key: "setPosition",
    value: function setPosition(x, y) {
      this.x = _parseInt(x);
      this.y = _parseInt(y);
    }
  }, {
    key: "setText",
    value: function setText(content) {
      if (content instanceof Element) {
        while (this.frame.firstChild) {
          this.frame.removeChild(this.frame.firstChild);
        }
        this.frame.appendChild(content);
      } else {
        this.frame.innerText = content;
      }
    }
  }, {
    key: "show",
    value: function show(doShow) {
      if (doShow === void 0) {
        doShow = true;
      }
      if (doShow === true) {
        var height = this.frame.clientHeight;
        var width = this.frame.clientWidth;
        var maxHeight = this.frame.parentNode.clientHeight;
        var maxWidth = this.frame.parentNode.clientWidth;
        var left = 0, top = 0;
        if (this.overflowMethod == "flip") {
          var isLeft = false, isTop = true;
          if (this.y - height < this.padding) {
            isTop = false;
          }
          if (this.x + width > maxWidth - this.padding) {
            isLeft = true;
          }
          if (isLeft) {
            left = this.x - width;
          } else {
            left = this.x;
          }
          if (isTop) {
            top = this.y - height;
          } else {
            top = this.y;
          }
        } else {
          top = this.y - height;
          if (top + height + this.padding > maxHeight) {
            top = maxHeight - height - this.padding;
          }
          if (top < this.padding) {
            top = this.padding;
          }
          left = this.x;
          if (left + width + this.padding > maxWidth) {
            left = maxWidth - width - this.padding;
          }
          if (left < this.padding) {
            left = this.padding;
          }
        }
        this.frame.style.left = left + "px";
        this.frame.style.top = top + "px";
        this.frame.style.visibility = "visible";
        this.hidden = false;
      } else {
        this.hide();
      }
    }
  }, {
    key: "hide",
    value: function hide() {
      this.hidden = true;
      this.frame.style.left = "0";
      this.frame.style.top = "0";
      this.frame.style.visibility = "hidden";
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.frame.parentNode.removeChild(this.frame);
    }
  }]);
  return Popup$12;
}();
var errorFound = false;
var allOptions$1;
var VALIDATOR_PRINT_STYLE$1 = "background: #FFeeee; color: #dd0000";
var Validator$1 = function() {
  function Validator$12() {
    _classCallCheck2(this, Validator$12);
  }
  _createClass2(Validator$12, null, [{
    key: "validate",
    value: function validate3(options2, referenceOptions, subObject) {
      errorFound = false;
      allOptions$1 = referenceOptions;
      var usedOptions = referenceOptions;
      if (subObject !== void 0) {
        usedOptions = referenceOptions[subObject];
      }
      Validator$12.parse(options2, usedOptions, []);
      return errorFound;
    }
  }, {
    key: "parse",
    value: function parse(options2, referenceOptions, path3) {
      for (var _option3 in options2) {
        if (Object.prototype.hasOwnProperty.call(options2, _option3)) {
          Validator$12.check(_option3, options2, referenceOptions, path3);
        }
      }
    }
  }, {
    key: "check",
    value: function check3(option, options2, referenceOptions, path3) {
      if (referenceOptions[option] === void 0 && referenceOptions.__any__ === void 0) {
        Validator$12.getSuggestion(option, referenceOptions, path3);
        return;
      }
      var referenceOption = option;
      var is_object = true;
      if (referenceOptions[option] === void 0 && referenceOptions.__any__ !== void 0) {
        referenceOption = "__any__";
        is_object = Validator$12.getType(options2[option]) === "object";
      }
      var refOptionObj = referenceOptions[referenceOption];
      if (is_object && refOptionObj.__type__ !== void 0) {
        refOptionObj = refOptionObj.__type__;
      }
      Validator$12.checkFields(option, options2, referenceOptions, referenceOption, refOptionObj, path3);
    }
  }, {
    key: "checkFields",
    value: function checkFields(option, options2, referenceOptions, referenceOption, refOptionObj, path3) {
      var log = function log2(message) {
        console.error("%c" + message + Validator$12.printLocation(path3, option), VALIDATOR_PRINT_STYLE$1);
      };
      var optionType = Validator$12.getType(options2[option]);
      var refOptionType = refOptionObj[optionType];
      if (refOptionType !== void 0) {
        if (Validator$12.getType(refOptionType) === "array" && indexOf4(refOptionType).call(refOptionType, options2[option]) === -1) {
          log('Invalid option detected in "' + option + '". Allowed values are:' + Validator$12.print(refOptionType) + ' not "' + options2[option] + '". ');
          errorFound = true;
        } else if (optionType === "object" && referenceOption !== "__any__") {
          path3 = copyAndExtendArray(path3, option);
          Validator$12.parse(options2[option], referenceOptions[referenceOption], path3);
        }
      } else if (refOptionObj["any"] === void 0) {
        log('Invalid type received for "' + option + '". Expected: ' + Validator$12.print(keys6(refOptionObj)) + ". Received [" + optionType + '] "' + options2[option] + '"');
        errorFound = true;
      }
    }
  }, {
    key: "getType",
    value: function getType(object2) {
      var type = _typeof2(object2);
      if (type === "object") {
        if (object2 === null) {
          return "null";
        }
        if (object2 instanceof Boolean) {
          return "boolean";
        }
        if (object2 instanceof Number) {
          return "number";
        }
        if (object2 instanceof String) {
          return "string";
        }
        if (isArray$12(object2)) {
          return "array";
        }
        if (object2 instanceof Date) {
          return "date";
        }
        if (object2.nodeType !== void 0) {
          return "dom";
        }
        if (object2._isAMomentObject === true) {
          return "moment";
        }
        return "object";
      } else if (type === "number") {
        return "number";
      } else if (type === "boolean") {
        return "boolean";
      } else if (type === "string") {
        return "string";
      } else if (type === void 0) {
        return "undefined";
      }
      return type;
    }
  }, {
    key: "getSuggestion",
    value: function getSuggestion(option, options2, path3) {
      var localSearch = Validator$12.findInOptions(option, options2, path3, false);
      var globalSearch = Validator$12.findInOptions(option, allOptions$1, [], true);
      var localSearchThreshold = 8;
      var globalSearchThreshold = 4;
      var msg;
      if (localSearch.indexMatch !== void 0) {
        msg = " in " + Validator$12.printLocation(localSearch.path, option, "") + 'Perhaps it was incomplete? Did you mean: "' + localSearch.indexMatch + '"?\n\n';
      } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {
        msg = " in " + Validator$12.printLocation(localSearch.path, option, "") + "Perhaps it was misplaced? Matching option found at: " + Validator$12.printLocation(globalSearch.path, globalSearch.closestMatch, "");
      } else if (localSearch.distance <= localSearchThreshold) {
        msg = '. Did you mean "' + localSearch.closestMatch + '"?' + Validator$12.printLocation(localSearch.path, option);
      } else {
        msg = ". Did you mean one of these: " + Validator$12.print(keys6(options2)) + Validator$12.printLocation(path3, option);
      }
      console.error('%cUnknown option detected: "' + option + '"' + msg, VALIDATOR_PRINT_STYLE$1);
      errorFound = true;
    }
  }, {
    key: "findInOptions",
    value: function findInOptions(option, options2, path3) {
      var recursive = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var min3 = 1e9;
      var closestMatch = "";
      var closestMatchPath = [];
      var lowerCaseOption = option.toLowerCase();
      var indexMatch = void 0;
      for (var op in options2) {
        var distance = void 0;
        if (options2[op].__type__ !== void 0 && recursive === true) {
          var result = Validator$12.findInOptions(option, options2[op], copyAndExtendArray(path3, op));
          if (min3 > result.distance) {
            closestMatch = result.closestMatch;
            closestMatchPath = result.path;
            min3 = result.distance;
            indexMatch = result.indexMatch;
          }
        } else {
          var _context20;
          if (indexOf4(_context20 = op.toLowerCase()).call(_context20, lowerCaseOption) !== -1) {
            indexMatch = op;
          }
          distance = Validator$12.levenshteinDistance(option, op);
          if (min3 > distance) {
            closestMatch = op;
            closestMatchPath = copyArray(path3);
            min3 = distance;
          }
        }
      }
      return {
        closestMatch,
        path: closestMatchPath,
        distance: min3,
        indexMatch
      };
    }
  }, {
    key: "printLocation",
    value: function printLocation(path3, option) {
      var prefix = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "Problem value found at: \n";
      var str = "\n\n" + prefix + "options = {\n";
      for (var i = 0; i < path3.length; i++) {
        for (var j = 0; j < i + 1; j++) {
          str += "  ";
        }
        str += path3[i] + ": {\n";
      }
      for (var _j = 0; _j < path3.length + 1; _j++) {
        str += "  ";
      }
      str += option + "\n";
      for (var _i3 = 0; _i3 < path3.length + 1; _i3++) {
        for (var _j2 = 0; _j2 < path3.length - _i3; _j2++) {
          str += "  ";
        }
        str += "}\n";
      }
      return str + "\n\n";
    }
  }, {
    key: "print",
    value: function print(options2) {
      return stringify$12(options2).replace(/(")|(\[)|(\])|(,"__type__")/g, "").replace(/(,)/g, ", ");
    }
  }, {
    key: "levenshteinDistance",
    value: function levenshteinDistance(a, b) {
      if (a.length === 0)
        return b.length;
      if (b.length === 0)
        return a.length;
      var matrix = [];
      var i;
      for (i = 0; i <= b.length; i++) {
        matrix[i] = [i];
      }
      var j;
      for (j = 0; j <= a.length; j++) {
        matrix[0][j] = j;
      }
      for (i = 1; i <= b.length; i++) {
        for (j = 1; j <= a.length; j++) {
          if (b.charAt(i - 1) == a.charAt(j - 1)) {
            matrix[i][j] = matrix[i - 1][j - 1];
          } else {
            matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, Math.min(matrix[i][j - 1] + 1, matrix[i - 1][j] + 1));
          }
        }
      }
      return matrix[b.length][a.length];
    }
  }]);
  return Validator$12;
}();
var Activator = Activator$12;
var Configurator = Configurator$1;
var Hammer2 = Hammer$12;
var Popup = Popup$1;
var VALIDATOR_PRINT_STYLE = VALIDATOR_PRINT_STYLE$1;
var Validator = Validator$1;
function parseDOT(data3) {
  dot = data3;
  return parseGraph();
}
var NODE_ATTR_MAPPING = {
  fontsize: "font.size",
  fontcolor: "font.color",
  labelfontcolor: "font.color",
  fontname: "font.face",
  color: ["color.border", "color.background"],
  fillcolor: "color.background",
  tooltip: "title",
  labeltooltip: "title"
};
var EDGE_ATTR_MAPPING = create$52(NODE_ATTR_MAPPING);
EDGE_ATTR_MAPPING.color = "color.color";
EDGE_ATTR_MAPPING.style = "dashes";
var TOKENTYPE = {
  NULL: 0,
  DELIMITER: 1,
  IDENTIFIER: 2,
  UNKNOWN: 3
};
var DELIMITERS = {
  "{": true,
  "}": true,
  "[": true,
  "]": true,
  ";": true,
  "=": true,
  ",": true,
  "->": true,
  "--": true
};
var dot = "";
var index = 0;
var c = "";
var token = "";
var tokenType = TOKENTYPE.NULL;
function first() {
  index = 0;
  c = dot.charAt(0);
}
function next3() {
  index++;
  c = dot.charAt(index);
}
function nextPreview() {
  return dot.charAt(index + 1);
}
function isAlphaNumeric(c2) {
  var charCode = c2.charCodeAt(0);
  if (charCode < 47) {
    return charCode === 35 || charCode === 46;
  }
  if (charCode < 59) {
    return charCode > 47;
  }
  if (charCode < 91) {
    return charCode > 64;
  }
  if (charCode < 96) {
    return charCode === 95;
  }
  if (charCode < 123) {
    return charCode > 96;
  }
  return false;
}
function merge$12(a, b) {
  if (!a) {
    a = {};
  }
  if (b) {
    for (var name in b) {
      if (b.hasOwnProperty(name)) {
        a[name] = b[name];
      }
    }
  }
  return a;
}
function setValue(obj, path3, value) {
  var keys7 = path3.split(".");
  var o = obj;
  while (keys7.length) {
    var key = keys7.shift();
    if (keys7.length) {
      if (!o[key]) {
        o[key] = {};
      }
      o = o[key];
    } else {
      o[key] = value;
    }
  }
}
function addNode(graph, node) {
  var i, len;
  var current = null;
  var graphs = [graph];
  var root = graph;
  while (root.parent) {
    graphs.push(root.parent);
    root = root.parent;
  }
  if (root.nodes) {
    for (i = 0, len = root.nodes.length; i < len; i++) {
      if (node.id === root.nodes[i].id) {
        current = root.nodes[i];
        break;
      }
    }
  }
  if (!current) {
    current = {
      id: node.id
    };
    if (graph.node) {
      current.attr = merge$12(current.attr, graph.node);
    }
  }
  for (i = graphs.length - 1; i >= 0; i--) {
    var _context;
    var g = graphs[i];
    if (!g.nodes) {
      g.nodes = [];
    }
    if (indexOf4(_context = g.nodes).call(_context, current) === -1) {
      g.nodes.push(current);
    }
  }
  if (node.attr) {
    current.attr = merge$12(current.attr, node.attr);
  }
}
function addEdge(graph, edge) {
  if (!graph.edges) {
    graph.edges = [];
  }
  graph.edges.push(edge);
  if (graph.edge) {
    var attr = merge$12({}, graph.edge);
    edge.attr = merge$12(attr, edge.attr);
  }
}
function createEdge(graph, from5, to, type, attr) {
  var edge = {
    from: from5,
    to,
    type
  };
  if (graph.edge) {
    edge.attr = merge$12({}, graph.edge);
  }
  edge.attr = merge$12(edge.attr || {}, attr);
  if (attr != null) {
    if (attr.hasOwnProperty("arrows") && attr["arrows"] != null) {
      edge["arrows"] = {
        to: {
          enabled: true,
          type: attr.arrows.type
        }
      };
      attr["arrows"] = null;
    }
  }
  return edge;
}
function getToken() {
  tokenType = TOKENTYPE.NULL;
  token = "";
  while (c === " " || c === "	" || c === "\n" || c === "\r") {
    next3();
  }
  do {
    var isComment = false;
    if (c === "#") {
      var i = index - 1;
      while (dot.charAt(i) === " " || dot.charAt(i) === "	") {
        i--;
      }
      if (dot.charAt(i) === "\n" || dot.charAt(i) === "") {
        while (c != "" && c != "\n") {
          next3();
        }
        isComment = true;
      }
    }
    if (c === "/" && nextPreview() === "/") {
      while (c != "" && c != "\n") {
        next3();
      }
      isComment = true;
    }
    if (c === "/" && nextPreview() === "*") {
      while (c != "") {
        if (c === "*" && nextPreview() === "/") {
          next3();
          next3();
          break;
        } else {
          next3();
        }
      }
      isComment = true;
    }
    while (c === " " || c === "	" || c === "\n" || c === "\r") {
      next3();
    }
  } while (isComment);
  if (c === "") {
    tokenType = TOKENTYPE.DELIMITER;
    return;
  }
  var c2 = c + nextPreview();
  if (DELIMITERS[c2]) {
    tokenType = TOKENTYPE.DELIMITER;
    token = c2;
    next3();
    next3();
    return;
  }
  if (DELIMITERS[c]) {
    tokenType = TOKENTYPE.DELIMITER;
    token = c;
    next3();
    return;
  }
  if (isAlphaNumeric(c) || c === "-") {
    token += c;
    next3();
    while (isAlphaNumeric(c)) {
      token += c;
      next3();
    }
    if (token === "false") {
      token = false;
    } else if (token === "true") {
      token = true;
    } else if (!isNaN(Number(token))) {
      token = Number(token);
    }
    tokenType = TOKENTYPE.IDENTIFIER;
    return;
  }
  if (c === '"') {
    next3();
    while (c != "" && (c != '"' || c === '"' && nextPreview() === '"')) {
      if (c === '"') {
        token += c;
        next3();
      } else if (c === "\\" && nextPreview() === "n") {
        token += "\n";
        next3();
      } else {
        token += c;
      }
      next3();
    }
    if (c != '"') {
      throw newSyntaxError('End of string " expected');
    }
    next3();
    tokenType = TOKENTYPE.IDENTIFIER;
    return;
  }
  tokenType = TOKENTYPE.UNKNOWN;
  while (c != "") {
    token += c;
    next3();
  }
  throw new SyntaxError('Syntax error in part "' + chop(token, 30) + '"');
}
function parseGraph() {
  var graph = {};
  first();
  getToken();
  if (token === "strict") {
    graph.strict = true;
    getToken();
  }
  if (token === "graph" || token === "digraph") {
    graph.type = token;
    getToken();
  }
  if (tokenType === TOKENTYPE.IDENTIFIER) {
    graph.id = token;
    getToken();
  }
  if (token != "{") {
    throw newSyntaxError("Angle bracket { expected");
  }
  getToken();
  parseStatements(graph);
  if (token != "}") {
    throw newSyntaxError("Angle bracket } expected");
  }
  getToken();
  if (token !== "") {
    throw newSyntaxError("End of file expected");
  }
  getToken();
  delete graph.node;
  delete graph.edge;
  delete graph.graph;
  return graph;
}
function parseStatements(graph) {
  while (token !== "" && token != "}") {
    parseStatement(graph);
    if (token === ";") {
      getToken();
    }
  }
}
function parseStatement(graph) {
  var subgraph = parseSubgraph(graph);
  if (subgraph) {
    parseEdge(graph, subgraph);
    return;
  }
  var attr = parseAttributeStatement(graph);
  if (attr) {
    return;
  }
  if (tokenType != TOKENTYPE.IDENTIFIER) {
    throw newSyntaxError("Identifier expected");
  }
  var id3 = token;
  getToken();
  if (token === "=") {
    getToken();
    if (tokenType != TOKENTYPE.IDENTIFIER) {
      throw newSyntaxError("Identifier expected");
    }
    graph[id3] = token;
    getToken();
  } else {
    parseNodeStatement(graph, id3);
  }
}
function parseSubgraph(graph) {
  var subgraph = null;
  if (token === "subgraph") {
    subgraph = {};
    subgraph.type = "subgraph";
    getToken();
    if (tokenType === TOKENTYPE.IDENTIFIER) {
      subgraph.id = token;
      getToken();
    }
  }
  if (token === "{") {
    getToken();
    if (!subgraph) {
      subgraph = {};
    }
    subgraph.parent = graph;
    subgraph.node = graph.node;
    subgraph.edge = graph.edge;
    subgraph.graph = graph.graph;
    parseStatements(subgraph);
    if (token != "}") {
      throw newSyntaxError("Angle bracket } expected");
    }
    getToken();
    delete subgraph.node;
    delete subgraph.edge;
    delete subgraph.graph;
    delete subgraph.parent;
    if (!graph.subgraphs) {
      graph.subgraphs = [];
    }
    graph.subgraphs.push(subgraph);
  }
  return subgraph;
}
function parseAttributeStatement(graph) {
  if (token === "node") {
    getToken();
    graph.node = parseAttributeList();
    return "node";
  } else if (token === "edge") {
    getToken();
    graph.edge = parseAttributeList();
    return "edge";
  } else if (token === "graph") {
    getToken();
    graph.graph = parseAttributeList();
    return "graph";
  }
  return null;
}
function parseNodeStatement(graph, id3) {
  var node = {
    id: id3
  };
  var attr = parseAttributeList();
  if (attr) {
    node.attr = attr;
  }
  addNode(graph, node);
  parseEdge(graph, id3);
}
function parseEdge(graph, from5) {
  while (token === "->" || token === "--") {
    var to;
    var type = token;
    getToken();
    var subgraph = parseSubgraph(graph);
    if (subgraph) {
      to = subgraph;
    } else {
      if (tokenType != TOKENTYPE.IDENTIFIER) {
        throw newSyntaxError("Identifier or subgraph expected");
      }
      to = token;
      addNode(graph, {
        id: to
      });
      getToken();
    }
    var attr = parseAttributeList();
    var edge = createEdge(graph, from5, to, type, attr);
    addEdge(graph, edge);
    from5 = to;
  }
}
function parseAttributeList() {
  var i;
  var attr = null;
  var edgeStyles = {
    dashed: true,
    solid: false,
    dotted: [1, 5]
  };
  var arrowTypes = {
    dot: "circle",
    box: "box",
    crow: "crow",
    curve: "curve",
    icurve: "inv_curve",
    normal: "triangle",
    inv: "inv_triangle",
    diamond: "diamond",
    tee: "bar",
    vee: "vee"
  };
  var attr_list = new Array();
  var attr_names = new Array();
  while (token === "[") {
    getToken();
    attr = {};
    while (token !== "" && token != "]") {
      if (tokenType != TOKENTYPE.IDENTIFIER) {
        throw newSyntaxError("Attribute name expected");
      }
      var name = token;
      getToken();
      if (token != "=") {
        throw newSyntaxError("Equal sign = expected");
      }
      getToken();
      if (tokenType != TOKENTYPE.IDENTIFIER) {
        throw newSyntaxError("Attribute value expected");
      }
      var value = token;
      if (name === "style") {
        value = edgeStyles[value];
      }
      var arrowType;
      if (name === "arrowhead") {
        arrowType = arrowTypes[value];
        name = "arrows";
        value = {
          to: {
            enabled: true,
            type: arrowType
          }
        };
      }
      if (name === "arrowtail") {
        arrowType = arrowTypes[value];
        name = "arrows";
        value = {
          from: {
            enabled: true,
            type: arrowType
          }
        };
      }
      attr_list.push({
        attr,
        name,
        value
      });
      attr_names.push(name);
      getToken();
      if (token == ",") {
        getToken();
      }
    }
    if (token != "]") {
      throw newSyntaxError("Bracket ] expected");
    }
    getToken();
  }
  if (includes5(attr_names).call(attr_names, "dir")) {
    var idx = {};
    idx.arrows = {};
    for (i = 0; i < attr_list.length; i++) {
      if (attr_list[i].name === "arrows") {
        if (attr_list[i].value.to != null) {
          idx.arrows.to = i;
        } else if (attr_list[i].value.from != null) {
          idx.arrows.from = i;
        } else {
          throw newSyntaxError("Invalid value of arrows");
        }
      } else if (attr_list[i].name === "dir") {
        idx.dir = i;
      }
    }
    var dir_type = attr_list[idx.dir].value;
    if (!includes5(attr_names).call(attr_names, "arrows")) {
      if (dir_type === "both") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            to: {
              enabled: true
            }
          }
        });
        idx.arrows.to = attr_list.length - 1;
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            from: {
              enabled: true
            }
          }
        });
        idx.arrows.from = attr_list.length - 1;
      } else if (dir_type === "forward") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            to: {
              enabled: true
            }
          }
        });
        idx.arrows.to = attr_list.length - 1;
      } else if (dir_type === "back") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: {
            from: {
              enabled: true
            }
          }
        });
        idx.arrows.from = attr_list.length - 1;
      } else if (dir_type === "none") {
        attr_list.push({
          attr: attr_list[idx.dir].attr,
          name: "arrows",
          value: ""
        });
        idx.arrows.to = attr_list.length - 1;
      } else {
        throw newSyntaxError('Invalid dir type "' + dir_type + '"');
      }
    }
    var from_type;
    var to_type;
    if (dir_type === "both") {
      if (idx.arrows.to && idx.arrows.from) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
        splice$12(attr_list).call(attr_list, idx.arrows.from, 1);
      } else if (idx.arrows.to) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = "arrow";
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.from) {
        to_type = "arrow";
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.from] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      }
    } else if (dir_type === "back") {
      if (idx.arrows.to && idx.arrows.from) {
        to_type = "";
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.from] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.to) {
        to_type = "";
        from_type = "arrow";
        idx.arrows.from = idx.arrows.to;
        attr_list[idx.arrows.from] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.from) {
        to_type = "";
        from_type = attr_list[idx.arrows.from].value.from.type;
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.from].attr,
          name: attr_list[idx.arrows.from].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      }
      attr_list[idx.arrows.from] = {
        attr: attr_list[idx.arrows.from].attr,
        name: attr_list[idx.arrows.from].name,
        value: {
          from: {
            enabled: true,
            type: attr_list[idx.arrows.from].value.from.type
          }
        }
      };
    } else if (dir_type === "none") {
      var idx_arrow;
      if (idx.arrows.to) {
        idx_arrow = idx.arrows.to;
      } else {
        idx_arrow = idx.arrows.from;
      }
      attr_list[idx_arrow] = {
        attr: attr_list[idx_arrow].attr,
        name: attr_list[idx_arrow].name,
        value: ""
      };
    } else if (dir_type === "forward") {
      if (idx.arrows.to && idx.arrows.from) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = "";
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.to) {
        to_type = attr_list[idx.arrows.to].value.to.type;
        from_type = "";
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      } else if (idx.arrows.from) {
        to_type = "arrow";
        from_type = "";
        idx.arrows.to = idx.arrows.from;
        attr_list[idx.arrows.to] = {
          attr: attr_list[idx.arrows.to].attr,
          name: attr_list[idx.arrows.to].name,
          value: {
            to: {
              enabled: true,
              type: to_type
            },
            from: {
              enabled: true,
              type: from_type
            }
          }
        };
      }
      attr_list[idx.arrows.to] = {
        attr: attr_list[idx.arrows.to].attr,
        name: attr_list[idx.arrows.to].name,
        value: {
          to: {
            enabled: true,
            type: attr_list[idx.arrows.to].value.to.type
          }
        }
      };
    } else {
      throw newSyntaxError('Invalid dir type "' + dir_type + '"');
    }
    splice$12(attr_list).call(attr_list, idx.dir, 1);
  }
  var nof_attr_list;
  if (includes5(attr_names).call(attr_names, "penwidth")) {
    var tmp_attr_list = [];
    nof_attr_list = attr_list.length;
    for (i = 0; i < nof_attr_list; i++) {
      if (attr_list[i].name !== "width") {
        if (attr_list[i].name === "penwidth") {
          attr_list[i].name = "width";
        }
        tmp_attr_list.push(attr_list[i]);
      }
    }
    attr_list = tmp_attr_list;
  }
  nof_attr_list = attr_list.length;
  for (i = 0; i < nof_attr_list; i++) {
    setValue(attr_list[i].attr, attr_list[i].name, attr_list[i].value);
  }
  return attr;
}
function newSyntaxError(message) {
  return new SyntaxError(message + ', got "' + chop(token, 30) + '" (char ' + index + ")");
}
function chop(text, maxLength) {
  return text.length <= maxLength ? text : text.substr(0, 27) + "...";
}
function forEach22(array1, array2, fn) {
  if (isArray$12(array1)) {
    forEach$22(array1).call(array1, function(elem1) {
      if (isArray$12(array2)) {
        forEach$22(array2).call(array2, function(elem2) {
          fn(elem1, elem2);
        });
      } else {
        fn(elem1, array2);
      }
    });
  } else {
    if (isArray$12(array2)) {
      forEach$22(array2).call(array2, function(elem2) {
        fn(array1, elem2);
      });
    } else {
      fn(array1, array2);
    }
  }
}
function setProp(object2, path3, value) {
  var names = path3.split(".");
  var prop = names.pop();
  var obj = object2;
  for (var i = 0; i < names.length; i++) {
    var name = names[i];
    if (!(name in obj)) {
      obj[name] = {};
    }
    obj = obj[name];
  }
  obj[prop] = value;
  return object2;
}
function convertAttr(attr, mapping) {
  var converted = {};
  for (var prop in attr) {
    if (attr.hasOwnProperty(prop)) {
      var visProp = mapping[prop];
      if (isArray$12(visProp)) {
        forEach$22(visProp).call(visProp, function(visPropI) {
          setProp(converted, visPropI, attr[prop]);
        });
      } else if (typeof visProp === "string") {
        setProp(converted, visProp, attr[prop]);
      } else {
        setProp(converted, prop, attr[prop]);
      }
    }
  }
  return converted;
}
function DOTToGraph(data3) {
  var dotData = parseDOT(data3);
  var graphData = {
    nodes: [],
    edges: [],
    options: {}
  };
  if (dotData.nodes) {
    var _context2;
    forEach$22(_context2 = dotData.nodes).call(_context2, function(dotNode) {
      var graphNode = {
        id: dotNode.id,
        label: String(dotNode.label || dotNode.id)
      };
      merge$12(graphNode, convertAttr(dotNode.attr, NODE_ATTR_MAPPING));
      if (graphNode.image) {
        graphNode.shape = "image";
      }
      graphData.nodes.push(graphNode);
    });
  }
  if (dotData.edges) {
    var _context3;
    var convertEdge = function convertEdge2(dotEdge) {
      var graphEdge = {
        from: dotEdge.from,
        to: dotEdge.to
      };
      merge$12(graphEdge, convertAttr(dotEdge.attr, EDGE_ATTR_MAPPING));
      if (graphEdge.arrows == null && dotEdge.type === "->") {
        graphEdge.arrows = "to";
      }
      return graphEdge;
    };
    forEach$22(_context3 = dotData.edges).call(_context3, function(dotEdge) {
      var from5, to;
      if (dotEdge.from instanceof Object) {
        from5 = dotEdge.from.nodes;
      } else {
        from5 = {
          id: dotEdge.from
        };
      }
      if (dotEdge.to instanceof Object) {
        to = dotEdge.to.nodes;
      } else {
        to = {
          id: dotEdge.to
        };
      }
      if (dotEdge.from instanceof Object && dotEdge.from.edges) {
        var _context4;
        forEach$22(_context4 = dotEdge.from.edges).call(_context4, function(subEdge) {
          var graphEdge = convertEdge(subEdge);
          graphData.edges.push(graphEdge);
        });
      }
      forEach22(from5, to, function(from6, to2) {
        var subEdge = createEdge(graphData, from6.id, to2.id, dotEdge.type, dotEdge.attr);
        var graphEdge = convertEdge(subEdge);
        graphData.edges.push(graphEdge);
      });
      if (dotEdge.to instanceof Object && dotEdge.to.edges) {
        var _context5;
        forEach$22(_context5 = dotEdge.to.edges).call(_context5, function(subEdge) {
          var graphEdge = convertEdge(subEdge);
          graphData.edges.push(graphEdge);
        });
      }
    });
  }
  if (dotData.attr) {
    graphData.options = dotData.attr;
  }
  return graphData;
}
var dotparser = Object.freeze({
  __proto__: null,
  parseDOT,
  DOTToGraph
});
function parseGephi(gephiJSON, optionsObj) {
  var _context;
  var options2 = {
    edges: {
      inheritColor: false
    },
    nodes: {
      fixed: false,
      parseColor: false
    }
  };
  if (optionsObj != null) {
    if (optionsObj.fixed != null) {
      options2.nodes.fixed = optionsObj.fixed;
    }
    if (optionsObj.parseColor != null) {
      options2.nodes.parseColor = optionsObj.parseColor;
    }
    if (optionsObj.inheritColor != null) {
      options2.edges.inheritColor = optionsObj.inheritColor;
    }
  }
  var gEdges = gephiJSON.edges;
  var vEdges = map$32(gEdges).call(gEdges, function(gEdge) {
    var vEdge = {
      from: gEdge.source,
      id: gEdge.id,
      to: gEdge.target
    };
    if (gEdge.attributes != null) {
      vEdge.attributes = gEdge.attributes;
    }
    if (gEdge.label != null) {
      vEdge.label = gEdge.label;
    }
    if (gEdge.attributes != null && gEdge.attributes.title != null) {
      vEdge.title = gEdge.attributes.title;
    }
    if (gEdge.type === "Directed") {
      vEdge.arrows = "to";
    }
    if (gEdge.color && options2.edges.inheritColor === false) {
      vEdge.color = gEdge.color;
    }
    return vEdge;
  });
  var vNodes = map$32(_context = gephiJSON.nodes).call(_context, function(gNode) {
    var vNode = {
      id: gNode.id,
      fixed: options2.nodes.fixed && gNode.x != null && gNode.y != null
    };
    if (gNode.attributes != null) {
      vNode.attributes = gNode.attributes;
    }
    if (gNode.label != null) {
      vNode.label = gNode.label;
    }
    if (gNode.size != null) {
      vNode.size = gNode.size;
    }
    if (gNode.attributes != null && gNode.attributes.title != null) {
      vNode.title = gNode.attributes.title;
    }
    if (gNode.title != null) {
      vNode.title = gNode.title;
    }
    if (gNode.x != null) {
      vNode.x = gNode.x;
    }
    if (gNode.y != null) {
      vNode.y = gNode.y;
    }
    if (gNode.color != null) {
      if (options2.nodes.parseColor === true) {
        vNode.color = gNode.color;
      } else {
        vNode.color = {
          background: gNode.color,
          border: gNode.color,
          highlight: {
            background: gNode.color,
            border: gNode.color
          },
          hover: {
            background: gNode.color,
            border: gNode.color
          }
        };
      }
    }
    return vNode;
  });
  return {
    nodes: vNodes,
    edges: vEdges
  };
}
var gephiParser = Object.freeze({
  __proto__: null,
  parseGephi
});
var en = {
  addDescription: "Click in an empty space to place a new node.",
  addEdge: "Add Edge",
  addNode: "Add Node",
  back: "Back",
  close: "Close",
  createEdgeError: "Cannot link edges to a cluster.",
  del: "Delete selected",
  deleteClusterError: "Clusters cannot be deleted.",
  edgeDescription: "Click on a node and drag the edge to another node to connect them.",
  edit: "Edit",
  editClusterError: "Clusters cannot be edited.",
  editEdge: "Edit Edge",
  editEdgeDescription: "Click on the control points and drag them to a node to connect to it.",
  editNode: "Edit Node"
};
var de = {
  addDescription: "Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.",
  addEdge: "Kante hinzuf\xFCgen",
  addNode: "Knoten hinzuf\xFCgen",
  back: "Zur\xFCck",
  close: "Schlie\xDFen",
  createEdgeError: "Es ist nicht m\xF6glich, Kanten mit Clustern zu verbinden.",
  del: "L\xF6sche Auswahl",
  deleteClusterError: "Cluster k\xF6nnen nicht gel\xF6scht werden.",
  edgeDescription: "Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.",
  edit: "Editieren",
  editClusterError: "Cluster k\xF6nnen nicht editiert werden.",
  editEdge: "Kante editieren",
  editEdgeDescription: "Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.",
  editNode: "Knoten editieren"
};
var es = {
  addDescription: "Haga clic en un lugar vac\xEDo para colocar un nuevo nodo.",
  addEdge: "A\xF1adir arista",
  addNode: "A\xF1adir nodo",
  back: "Atr\xE1s",
  close: "Cerrar",
  createEdgeError: "No se puede conectar una arista a un grupo.",
  del: "Eliminar selecci\xF3n",
  deleteClusterError: "No es posible eliminar grupos.",
  edgeDescription: "Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.",
  edit: "Editar",
  editClusterError: "No es posible editar grupos.",
  editEdge: "Editar arista",
  editEdgeDescription: "Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.",
  editNode: "Editar nodo"
};
var it = {
  addDescription: "Clicca per aggiungere un nuovo nodo",
  addEdge: "Aggiungi un vertice",
  addNode: "Aggiungi un nodo",
  back: "Indietro",
  close: "Chiudere",
  createEdgeError: "Non si possono collegare vertici ad un cluster",
  del: "Cancella la selezione",
  deleteClusterError: "I cluster non possono essere cancellati",
  edgeDescription: "Clicca su un nodo e trascinalo ad un altro nodo per connetterli.",
  edit: "Modifica",
  editClusterError: "I clusters non possono essere modificati.",
  editEdge: "Modifica il vertice",
  editEdgeDescription: "Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.",
  editNode: "Modifica il nodo"
};
var nl = {
  addDescription: "Klik op een leeg gebied om een nieuwe node te maken.",
  addEdge: "Link toevoegen",
  addNode: "Node toevoegen",
  back: "Terug",
  close: "Sluiten",
  createEdgeError: "Kan geen link maken naar een cluster.",
  del: "Selectie verwijderen",
  deleteClusterError: "Clusters kunnen niet worden verwijderd.",
  edgeDescription: "Klik op een node en sleep de link naar een andere node om ze te verbinden.",
  edit: "Wijzigen",
  editClusterError: "Clusters kunnen niet worden aangepast.",
  editEdge: "Link wijzigen",
  editEdgeDescription: "Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.",
  editNode: "Node wijzigen"
};
var pt = {
  addDescription: "Clique em um espa\xE7o em branco para adicionar um novo n\xF3",
  addEdge: "Adicionar aresta",
  addNode: "Adicionar n\xF3",
  back: "Voltar",
  close: "Fechar",
  createEdgeError: "N\xE3o foi poss\xEDvel linkar arestas a um cluster.",
  del: "Remover selecionado",
  deleteClusterError: "Clusters n\xE3o puderam ser removidos.",
  edgeDescription: "Clique em um n\xF3 e arraste a aresta at\xE9 outro n\xF3 para conect\xE1-los",
  edit: "Editar",
  editClusterError: "Clusters n\xE3o puderam ser editados.",
  editEdge: "Editar aresta",
  editEdgeDescription: "Clique nos pontos de controle e os arraste para um n\xF3 para conect\xE1-los",
  editNode: "Editar n\xF3"
};
var ru = {
  addDescription: "\u041A\u043B\u0438\u043A\u043D\u0438\u0442\u0435 \u0432 \u0441\u0432\u043E\u0431\u043E\u0434\u043D\u043E\u0435 \u043C\u0435\u0441\u0442\u043E, \u0447\u0442\u043E\u0431\u044B \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043D\u043E\u0432\u044B\u0439 \u0443\u0437\u0435\u043B.",
  addEdge: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0440\u0435\u0431\u0440\u043E",
  addNode: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0443\u0437\u0435\u043B",
  back: "\u041D\u0430\u0437\u0430\u0434",
  close: "\u0417\u0430\u043A\u0440\u044B\u0432\u0430\u0442\u044C",
  createEdgeError: "\u041D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u044C \u0440\u0435\u0431\u0440\u0430 \u0432 \u043A\u043B\u0430\u0441\u0442\u0435\u0440.",
  del: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u043E\u0435",
  deleteClusterError: "\u041A\u043B\u0430\u0441\u0442\u0435\u0440\u044B \u043D\u0435 \u043C\u043E\u0433\u0443\u0442 \u0431\u044B\u0442\u044C \u0443\u0434\u0430\u043B\u0435\u043D\u044B",
  edgeDescription: "\u041A\u043B\u0438\u043A\u043D\u0438\u0442\u0435 \u043D\u0430 \u0443\u0437\u0435\u043B \u0438 \u043F\u0440\u043E\u0442\u044F\u043D\u0438\u0442\u0435 \u0440\u0435\u0431\u0440\u043E \u043A \u0434\u0440\u0443\u0433\u043E\u043C\u0443 \u0443\u0437\u043B\u0443, \u0447\u0442\u043E\u0431\u044B \u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u044C \u0438\u0445.",
  edit: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C",
  editClusterError: "\u041A\u043B\u0430\u0441\u0442\u0435\u0440\u044B \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B \u0434\u043B\u044F \u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F.",
  editEdge: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0440\u0435\u0431\u0440\u043E",
  editEdgeDescription: "\u041A\u043B\u0438\u043A\u043D\u0438\u0442\u0435 \u043D\u0430 \u043A\u043E\u043D\u0442\u0440\u043E\u043B\u044C\u043D\u044B\u0435 \u0442\u043E\u0447\u043A\u0438 \u0438 \u043F\u0435\u0440\u0435\u0442\u0430\u0449\u0438\u0442\u0435 \u0438\u0445 \u0432 \u0443\u0437\u0435\u043B, \u0447\u0442\u043E\u0431\u044B \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0441\u044F \u043A \u043D\u0435\u043C\u0443.",
  editNode: "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0443\u0437\u0435\u043B"
};
var cn = {
  addDescription: "\u5355\u51FB\u7A7A\u767D\u5904\u653E\u7F6E\u65B0\u8282\u70B9\u3002",
  addEdge: "\u6DFB\u52A0\u8FDE\u63A5\u7EBF",
  addNode: "\u6DFB\u52A0\u8282\u70B9",
  back: "\u8FD4\u56DE",
  close: "\u95DC\u9589",
  createEdgeError: "\u65E0\u6CD5\u5C06\u8FDE\u63A5\u7EBF\u8FDE\u63A5\u5230\u7FA4\u96C6\u3002",
  del: "\u5220\u9664\u9009\u5B9A",
  deleteClusterError: "\u65E0\u6CD5\u5220\u9664\u7FA4\u96C6\u3002",
  edgeDescription: "\u5355\u51FB\u67D0\u4E2A\u8282\u70B9\u5E76\u5C06\u8BE5\u8FDE\u63A5\u7EBF\u62D6\u52A8\u5230\u53E6\u4E00\u4E2A\u8282\u70B9\u4EE5\u8FDE\u63A5\u5B83\u4EEC\u3002",
  edit: "\u7F16\u8F91",
  editClusterError: "\u65E0\u6CD5\u7F16\u8F91\u7FA4\u96C6\u3002",
  editEdge: "\u7F16\u8F91\u8FDE\u63A5\u7EBF",
  editEdgeDescription: "\u5355\u51FB\u63A7\u5236\u8282\u70B9\u5E76\u5C06\u5B83\u4EEC\u62D6\u5230\u8282\u70B9\u4E0A\u8FDE\u63A5\u3002",
  editNode: "\u7F16\u8F91\u8282\u70B9"
};
var uk = {
  addDescription: "K\u043B\u0456\u043A\u043D\u0456\u0442\u044C \u043D\u0430 \u0432\u0456\u043B\u044C\u043D\u0435 \u043C\u0456\u0441\u0446\u0435, \u0449\u043E\u0431 \u0434\u043E\u0434\u0430\u0442\u0438 \u043D\u043E\u0432\u0438\u0439 \u0432\u0443\u0437\u043E\u043B.",
  addEdge: "\u0414\u043E\u0434\u0430\u0442\u0438 \u043A\u0440\u0430\u0439",
  addNode: "\u0414\u043E\u0434\u0430\u0442\u0438 \u0432\u0443\u0437\u043E\u043B",
  back: "\u041D\u0430\u0437\u0430\u0434",
  close: "\u0417\u0430\u043A\u0440\u0438\u0442\u0438",
  createEdgeError: "\u041D\u0435 \u043C\u043E\u0436\u043B\u0438\u0432\u043E \u043E\u0431'\u0454\u0434\u043D\u0430\u0442\u0438 \u043A\u0440\u0430\u0457 \u0432 \u0433\u0440\u0443\u043F\u0443.",
  del: "\u0412\u0438\u0434\u0430\u043B\u0438\u0442\u0438 \u043E\u0431\u0440\u0430\u043D\u0435",
  deleteClusterError: "\u0413\u0440\u0443\u043F\u0438 \u043D\u0435 \u043C\u043E\u0436\u0443\u0442\u044C \u0431\u0443\u0442\u0438 \u0432\u0438\u0434\u0430\u043B\u0435\u043D\u0456.",
  edgeDescription: "\u041A\u043B\u0456\u043A\u043D\u0456\u0442\u044C \u043D\u0430 \u0432\u0443\u0437\u043E\u043B \u0456 \u043F\u0435\u0440\u0435\u0442\u044F\u0433\u043D\u0456\u0442\u044C \u043A\u0440\u0430\u0439 \u0434\u043E \u0456\u043D\u0448\u043E\u0433\u043E \u0432\u0443\u0437\u043B\u0430, \u0449\u043E\u0431 \u0457\u0445 \u0437'\u0454\u0434\u043D\u0430\u0442\u0438.",
  edit: "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438",
  editClusterError: "\u0413\u0440\u0443\u043F\u0438 \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u043D\u0456 \u0434\u043B\u044F \u0440\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u043D\u043D\u044F.",
  editEdge: "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438 \u043A\u0440\u0430\u0439",
  editEdgeDescription: "\u041A\u043B\u0456\u043A\u043D\u0456\u0442\u044C \u043D\u0430 \u043A\u043E\u043D\u0442\u0440\u043E\u043B\u044C\u043D\u0456 \u0442\u043E\u0447\u043A\u0438 \u0456 \u043F\u0435\u0440\u0435\u0442\u044F\u0433\u043D\u0456\u0442\u044C \u0457\u0445 \u0443 \u0432\u0443\u0437\u043E\u043B, \u0449\u043E\u0431 \u043F\u0456\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u0438\u0441\u044F \u0434\u043E \u043D\u044C\u043E\u0433\u043E.",
  editNode: "\u0420\u0435\u0434\u0430\u0433\u0443\u0432\u0430\u0442\u0438 \u0432\u0443\u0437\u043E\u043B"
};
var fr = {
  addDescription: "Cliquez dans un endroit vide pour placer un n\u0153ud.",
  addEdge: "Ajouter un lien",
  addNode: "Ajouter un n\u0153ud",
  back: "Retour",
  close: "Fermer",
  createEdgeError: "Impossible de cr\xE9er un lien vers un cluster.",
  del: "Effacer la s\xE9lection",
  deleteClusterError: "Les clusters ne peuvent pas \xEAtre effac\xE9s.",
  edgeDescription: "Cliquez sur un n\u0153ud et glissez le lien vers un autre n\u0153ud pour les connecter.",
  edit: "\xC9diter",
  editClusterError: "Les clusters ne peuvent pas \xEAtre \xE9dit\xE9s.",
  editEdge: "\xC9diter le lien",
  editEdgeDescription: "Cliquez sur les points de contr\xF4le et glissez-les pour connecter un n\u0153ud.",
  editNode: "\xC9diter le n\u0153ud"
};
var cs = {
  addDescription: "Kluknut\xEDm do pr\xE1zdn\xE9ho prostoru m\u016F\u017Eete p\u0159idat nov\xFD vrchol.",
  addEdge: "P\u0159idat hranu",
  addNode: "P\u0159idat vrchol",
  back: "Zp\u011Bt",
  close: "Zav\u0159\xEDt",
  createEdgeError: "Nelze p\u0159ipojit hranu ke shluku.",
  del: "Smazat v\xFDb\u011Br",
  deleteClusterError: "Nelze mazat shluky.",
  edgeDescription: "P\u0159eta\u017Een\xEDm z jednoho vrcholu do druh\xE9ho m\u016F\u017Eete spojit tyto vrcholy novou hranou.",
  edit: "Upravit",
  editClusterError: "Nelze upravovat shluky.",
  editEdge: "Upravit hranu",
  editEdgeDescription: "P\u0159eta\u017Een\xEDm kontroln\xEDho vrcholu hrany ji m\u016F\u017Eete p\u0159ipojit k jin\xE9mu vrcholu.",
  editNode: "Upravit vrchol"
};
var locales = Object.freeze({
  __proto__: null,
  en,
  de,
  es,
  it,
  nl,
  pt,
  ru,
  cn,
  uk,
  fr,
  cs
});
function normalizeLanguageCode(locales2, rawCode) {
  try {
    var _rawCode$split = rawCode.split(/[-_ /]/, 2), _rawCode$split2 = _slicedToArray2(_rawCode$split, 2), rawLanguage = _rawCode$split2[0], rawCountry = _rawCode$split2[1];
    var language = rawLanguage != null ? rawLanguage.toLowerCase() : null;
    var country = rawCountry != null ? rawCountry.toUpperCase() : null;
    if (language && country) {
      var code = language + "-" + country;
      if (Object.prototype.hasOwnProperty.call(locales2, code)) {
        return code;
      } else {
        var _context;
        console.warn(concat4(_context = "Unknown variant ".concat(country, " of language ")).call(_context, language, "."));
      }
    }
    if (language) {
      var _code = language;
      if (Object.prototype.hasOwnProperty.call(locales2, _code)) {
        return _code;
      } else {
        console.warn("Unknown language ".concat(language));
      }
    }
    console.warn("Unknown locale ".concat(rawCode, ", falling back to English."));
    return "en";
  } catch (error) {
    console.error(error);
    console.warn("Unexpected error while normalizing locale ".concat(rawCode, ", falling back to English."));
    return "en";
  }
}
var CachedImage = function() {
  function CachedImage2() {
    _classCallCheck2(this, CachedImage2);
    this.NUM_ITERATIONS = 4;
    this.image = new Image();
    this.canvas = document.createElement("canvas");
  }
  _createClass2(CachedImage2, [{
    key: "init",
    value: function init() {
      if (this.initialized())
        return;
      this.src = this.image.src;
      var w = this.image.width;
      var h = this.image.height;
      this.width = w;
      this.height = h;
      var h2 = Math.floor(h / 2);
      var h4 = Math.floor(h / 4);
      var h8 = Math.floor(h / 8);
      var h16 = Math.floor(h / 16);
      var w2 = Math.floor(w / 2);
      var w4 = Math.floor(w / 4);
      var w8 = Math.floor(w / 8);
      var w16 = Math.floor(w / 16);
      this.canvas.width = 3 * w4;
      this.canvas.height = h2;
      this.coordinates = [[0, 0, w2, h2], [w2, 0, w4, h4], [w2, h4, w8, h8], [5 * w8, h4, w16, h16]];
      this._fillMipMap();
    }
  }, {
    key: "initialized",
    value: function initialized() {
      return this.coordinates !== void 0;
    }
  }, {
    key: "_fillMipMap",
    value: function _fillMipMap() {
      var ctx = this.canvas.getContext("2d");
      var to = this.coordinates[0];
      ctx.drawImage(this.image, to[0], to[1], to[2], to[3]);
      for (var iterations = 1; iterations < this.NUM_ITERATIONS; iterations++) {
        var from5 = this.coordinates[iterations - 1];
        var _to = this.coordinates[iterations];
        ctx.drawImage(this.canvas, from5[0], from5[1], from5[2], from5[3], _to[0], _to[1], _to[2], _to[3]);
      }
    }
  }, {
    key: "drawImageAtPosition",
    value: function drawImageAtPosition(ctx, factor, left, top, width, height) {
      if (!this.initialized())
        return;
      if (factor > 2) {
        factor *= 0.5;
        var iterations = 0;
        while (factor > 2 && iterations < this.NUM_ITERATIONS) {
          factor *= 0.5;
          iterations += 1;
        }
        if (iterations >= this.NUM_ITERATIONS) {
          iterations = this.NUM_ITERATIONS - 1;
        }
        var from5 = this.coordinates[iterations];
        ctx.drawImage(this.canvas, from5[0], from5[1], from5[2], from5[3], left, top, width, height);
      } else {
        ctx.drawImage(this.image, left, top, width, height);
      }
    }
  }]);
  return CachedImage2;
}();
var Images = function() {
  function Images2(callback) {
    _classCallCheck2(this, Images2);
    this.images = {};
    this.imageBroken = {};
    this.callback = callback;
  }
  _createClass2(Images2, [{
    key: "_tryloadBrokenUrl",
    value: function _tryloadBrokenUrl(url, brokenUrl, imageToLoadBrokenUrlOn) {
      if (url === void 0 || imageToLoadBrokenUrlOn === void 0)
        return;
      if (brokenUrl === void 0) {
        console.warn("No broken url image defined");
        return;
      }
      imageToLoadBrokenUrlOn.image.onerror = function() {
        console.error("Could not load brokenImage:", brokenUrl);
      };
      imageToLoadBrokenUrlOn.image.src = brokenUrl;
    }
  }, {
    key: "_redrawWithImage",
    value: function _redrawWithImage(imageToRedrawWith) {
      if (this.callback) {
        this.callback(imageToRedrawWith);
      }
    }
  }, {
    key: "load",
    value: function load(url, brokenUrl) {
      var _this = this;
      var cachedImage = this.images[url];
      if (cachedImage)
        return cachedImage;
      var img = new CachedImage();
      this.images[url] = img;
      img.image.onload = function() {
        _this._fixImageCoordinates(img.image);
        img.init();
        _this._redrawWithImage(img);
      };
      img.image.onerror = function() {
        console.error("Could not load image:", url);
        _this._tryloadBrokenUrl(url, brokenUrl, img);
      };
      img.image.src = url;
      return img;
    }
  }, {
    key: "_fixImageCoordinates",
    value: function _fixImageCoordinates(imageToCache) {
      if (imageToCache.width === 0) {
        document.body.appendChild(imageToCache);
        imageToCache.width = imageToCache.offsetWidth;
        imageToCache.height = imageToCache.offsetHeight;
        document.body.removeChild(imageToCache);
      }
    }
  }]);
  return Images2;
}();
var internalMetadata2 = { exports: {} };
var fails$72 = fails$t;
var arrayBufferNonExtensible2 = fails$72(function() {
  if (typeof ArrayBuffer == "function") {
    var buffer = new ArrayBuffer(8);
    if (Object.isExtensible(buffer))
      Object.defineProperty(buffer, "a", {
        value: 8
      });
  }
});
var fails$62 = fails$t;
var isObject$62 = isObject$j;
var classof$22 = classofRaw$12;
var ARRAY_BUFFER_NON_EXTENSIBLE2 = arrayBufferNonExtensible2;
var $isExtensible2 = Object.isExtensible;
var FAILS_ON_PRIMITIVES$12 = fails$62(function() {
  $isExtensible2(1);
});
var objectIsExtensible2 = FAILS_ON_PRIMITIVES$12 || ARRAY_BUFFER_NON_EXTENSIBLE2 ? function isExtensible3(it2) {
  if (!isObject$62(it2))
    return false;
  if (ARRAY_BUFFER_NON_EXTENSIBLE2 && classof$22(it2) == "ArrayBuffer")
    return false;
  return $isExtensible2 ? $isExtensible2(it2) : true;
} : $isExtensible2;
var fails$52 = fails$t;
var freezing2 = !fails$52(function() {
  return Object.isExtensible(Object.preventExtensions({}));
});
var $$d2 = _export2;
var uncurryThis$42 = functionUncurryThis2;
var hiddenKeys2 = hiddenKeys$62;
var isObject$52 = isObject$j;
var hasOwn$32 = hasOwnProperty_12;
var defineProperty$22 = objectDefineProperty2.f;
var getOwnPropertyNamesModule2 = objectGetOwnPropertyNames2;
var getOwnPropertyNamesExternalModule2 = objectGetOwnPropertyNamesExternal2;
var isExtensible$1 = objectIsExtensible2;
var uid2 = uid$42;
var FREEZING2 = freezing2;
var REQUIRED2 = false;
var METADATA2 = uid2("meta");
var id$12 = 0;
var setMetadata2 = function(it2) {
  defineProperty$22(it2, METADATA2, {
    value: {
      objectID: "O" + id$12++,
      weakData: {}
    }
  });
};
var fastKey$12 = function(it2, create9) {
  if (!isObject$52(it2))
    return typeof it2 == "symbol" ? it2 : (typeof it2 == "string" ? "S" : "P") + it2;
  if (!hasOwn$32(it2, METADATA2)) {
    if (!isExtensible$1(it2))
      return "F";
    if (!create9)
      return "E";
    setMetadata2(it2);
  }
  return it2[METADATA2].objectID;
};
var getWeakData$1 = function(it2, create9) {
  if (!hasOwn$32(it2, METADATA2)) {
    if (!isExtensible$1(it2))
      return true;
    if (!create9)
      return false;
    setMetadata2(it2);
  }
  return it2[METADATA2].weakData;
};
var onFreeze2 = function(it2) {
  if (FREEZING2 && REQUIRED2 && isExtensible$1(it2) && !hasOwn$32(it2, METADATA2))
    setMetadata2(it2);
  return it2;
};
var enable2 = function() {
  meta2.enable = function() {
  };
  REQUIRED2 = true;
  var getOwnPropertyNames9 = getOwnPropertyNamesModule2.f;
  var splice5 = uncurryThis$42([].splice);
  var test3 = {};
  test3[METADATA2] = 1;
  if (getOwnPropertyNames9(test3).length) {
    getOwnPropertyNamesModule2.f = function(it2) {
      var result = getOwnPropertyNames9(it2);
      for (var i = 0, length2 = result.length; i < length2; i++) {
        if (result[i] === METADATA2) {
          splice5(result, i, 1);
          break;
        }
      }
      return result;
    };
    $$d2({
      target: "Object",
      stat: true,
      forced: true
    }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule2.f
    });
  }
};
var meta2 = internalMetadata2.exports = {
  enable: enable2,
  fastKey: fastKey$12,
  getWeakData: getWeakData$1,
  onFreeze: onFreeze2
};
hiddenKeys2[METADATA2] = true;
var global$92 = global$O;
var bind$22 = functionBindContext2;
var call$12 = functionCall2;
var anObject$32 = anObject$d;
var tryToString$12 = tryToString$42;
var isArrayIteratorMethod2 = isArrayIteratorMethod$22;
var lengthOfArrayLike$22 = lengthOfArrayLike$b2;
var isPrototypeOf$62 = objectIsPrototypeOf2;
var getIterator2 = getIterator$22;
var getIteratorMethod2 = getIteratorMethod$82;
var iteratorClose2 = iteratorClose$22;
var TypeError$42 = global$92.TypeError;
var Result2 = function(stopped, result) {
  this.stopped = stopped;
  this.result = result;
};
var ResultPrototype2 = Result2.prototype;
var iterate$3 = function(iterable, unboundFunction, options2) {
  var that = options2 && options2.that;
  var AS_ENTRIES = !!(options2 && options2.AS_ENTRIES);
  var IS_ITERATOR = !!(options2 && options2.IS_ITERATOR);
  var INTERRUPTED = !!(options2 && options2.INTERRUPTED);
  var fn = bind$22(unboundFunction, that);
  var iterator3, iterFn, index2, length2, result, next4, step;
  var stop = function(condition) {
    if (iterator3)
      iteratorClose2(iterator3, "normal", condition);
    return new Result2(true, condition);
  };
  var callFn = function(value) {
    if (AS_ENTRIES) {
      anObject$32(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    }
    return INTERRUPTED ? fn(value, stop) : fn(value);
  };
  if (IS_ITERATOR) {
    iterator3 = iterable;
  } else {
    iterFn = getIteratorMethod2(iterable);
    if (!iterFn)
      throw TypeError$42(tryToString$12(iterable) + " is not iterable");
    if (isArrayIteratorMethod2(iterFn)) {
      for (index2 = 0, length2 = lengthOfArrayLike$22(iterable); length2 > index2; index2++) {
        result = callFn(iterable[index2]);
        if (result && isPrototypeOf$62(ResultPrototype2, result))
          return result;
      }
      return new Result2(false);
    }
    iterator3 = getIterator2(iterable, iterFn);
  }
  next4 = iterator3.next;
  while (!(step = call$12(next4, iterator3)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose2(iterator3, "throw", error);
    }
    if (typeof result == "object" && result && isPrototypeOf$62(ResultPrototype2, result))
      return result;
  }
  return new Result2(false);
};
var global$82 = global$O;
var isPrototypeOf$52 = objectIsPrototypeOf2;
var TypeError$32 = global$82.TypeError;
var anInstance$3 = function(it2, Prototype) {
  if (isPrototypeOf$52(Prototype, it2))
    return it2;
  throw TypeError$32("Incorrect invocation");
};
var $$c2 = _export2;
var global$72 = global$O;
var InternalMetadataModule$1 = internalMetadata2.exports;
var fails$42 = fails$t;
var createNonEnumerableProperty2 = createNonEnumerableProperty$62;
var iterate$22 = iterate$3;
var anInstance$22 = anInstance$3;
var isCallable2 = isCallable$h2;
var isObject$42 = isObject$j;
var setToStringTag2 = setToStringTag$52;
var defineProperty$12 = objectDefineProperty2.f;
var forEach4 = arrayIteration2.forEach;
var DESCRIPTORS$22 = descriptors2;
var InternalStateModule$22 = internalState2;
var setInternalState$22 = InternalStateModule$22.set;
var internalStateGetterFor$2 = InternalStateModule$22.getterFor;
var collection$3 = function(CONSTRUCTOR_NAME, wrapper2, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
  var ADDER = IS_MAP ? "set" : "add";
  var NativeConstructor = global$72[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var exported = {};
  var Constructor;
  if (!DESCRIPTORS$22 || !isCallable2(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails$42(function() {
    new NativeConstructor().entries().next();
  }))) {
    Constructor = common.getConstructor(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule$1.enable();
  } else {
    Constructor = wrapper2(function(target, iterable) {
      setInternalState$22(anInstance$22(target, Prototype), {
        type: CONSTRUCTOR_NAME,
        collection: new NativeConstructor()
      });
      if (iterable != void 0)
        iterate$22(iterable, target[ADDER], {
          that: target,
          AS_ENTRIES: IS_MAP
        });
    });
    var Prototype = Constructor.prototype;
    var getInternalState3 = internalStateGetterFor$2(CONSTRUCTOR_NAME);
    forEach4(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(KEY) {
      var IS_ADDER = KEY == "add" || KEY == "set";
      if (KEY in NativePrototype && !(IS_WEAK && KEY == "clear")) {
        createNonEnumerableProperty2(Prototype, KEY, function(a, b) {
          var collection3 = getInternalState3(this).collection;
          if (!IS_ADDER && IS_WEAK && !isObject$42(a))
            return KEY == "get" ? void 0 : false;
          var result = collection3[KEY](a === 0 ? 0 : a, b);
          return IS_ADDER ? this : result;
        });
      }
    });
    IS_WEAK || defineProperty$12(Prototype, "size", {
      configurable: true,
      get: function() {
        return getInternalState3(this).collection.size;
      }
    });
  }
  setToStringTag2(Constructor, CONSTRUCTOR_NAME, false, true);
  exported[CONSTRUCTOR_NAME] = Constructor;
  $$c2({
    global: true,
    forced: true
  }, exported);
  if (!IS_WEAK)
    common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
  return Constructor;
};
var redefine2 = redefine$42;
var redefineAll$3 = function(target, src, options2) {
  for (var key in src) {
    if (options2 && options2.unsafe && target[key])
      target[key] = src[key];
    else
      redefine2(target, key, src[key], options2);
  }
  return target;
};
var getBuiltIn$12 = getBuiltIn$92;
var definePropertyModule2 = objectDefineProperty2;
var wellKnownSymbol2 = wellKnownSymbol$j2;
var DESCRIPTORS$12 = descriptors2;
var SPECIES2 = wellKnownSymbol2("species");
var setSpecies$12 = function(CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn$12(CONSTRUCTOR_NAME);
  var defineProperty11 = definePropertyModule2.f;
  if (DESCRIPTORS$12 && Constructor && !Constructor[SPECIES2]) {
    defineProperty11(Constructor, SPECIES2, {
      configurable: true,
      get: function() {
        return this;
      }
    });
  }
};
var defineProperty10 = objectDefineProperty2.f;
var create$42 = objectCreate2;
var redefineAll$2 = redefineAll$3;
var bind$12 = functionBindContext2;
var anInstance$12 = anInstance$3;
var iterate$12 = iterate$3;
var defineIterator2 = defineIterator$32;
var setSpecies2 = setSpecies$12;
var DESCRIPTORS2 = descriptors2;
var fastKey2 = internalMetadata2.exports.fastKey;
var InternalStateModule$12 = internalState2;
var setInternalState$12 = InternalStateModule$12.set;
var internalStateGetterFor$12 = InternalStateModule$12.getterFor;
var collectionStrong$22 = {
  getConstructor: function(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper2(function(that, iterable) {
      anInstance$12(that, Prototype);
      setInternalState$12(that, {
        type: CONSTRUCTOR_NAME,
        index: create$42(null),
        first: void 0,
        last: void 0,
        size: 0
      });
      if (!DESCRIPTORS2)
        that.size = 0;
      if (iterable != void 0)
        iterate$12(iterable, that[ADDER], {
          that,
          AS_ENTRIES: IS_MAP
        });
    });
    var Prototype = Constructor.prototype;
    var getInternalState3 = internalStateGetterFor$12(CONSTRUCTOR_NAME);
    var define = function(that, key, value) {
      var state = getInternalState3(that);
      var entry = getEntry(that, key);
      var previous, index2;
      if (entry) {
        entry.value = value;
      } else {
        state.last = entry = {
          index: index2 = fastKey2(key, true),
          key,
          value,
          previous: previous = state.last,
          next: void 0,
          removed: false
        };
        if (!state.first)
          state.first = entry;
        if (previous)
          previous.next = entry;
        if (DESCRIPTORS2)
          state.size++;
        else
          that.size++;
        if (index2 !== "F")
          state.index[index2] = entry;
      }
      return that;
    };
    var getEntry = function(that, key) {
      var state = getInternalState3(that);
      var index2 = fastKey2(key);
      var entry;
      if (index2 !== "F")
        return state.index[index2];
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key)
          return entry;
      }
    };
    redefineAll$2(Prototype, {
      clear: function clear() {
        var that = this;
        var state = getInternalState3(that);
        var data3 = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous)
            entry.previous = entry.previous.next = void 0;
          delete data3[entry.index];
          entry = entry.next;
        }
        state.first = state.last = void 0;
        if (DESCRIPTORS2)
          state.size = 0;
        else
          that.size = 0;
      },
      "delete": function(key) {
        var that = this;
        var state = getInternalState3(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next4 = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev)
            prev.next = next4;
          if (next4)
            next4.previous = prev;
          if (state.first == entry)
            state.first = next4;
          if (state.last == entry)
            state.last = prev;
          if (DESCRIPTORS2)
            state.size--;
          else
            that.size--;
        }
        return !!entry;
      },
      forEach: function forEach5(callbackfn) {
        var state = getInternalState3(this);
        var boundFunction = bind$12(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          while (entry && entry.removed)
            entry = entry.previous;
        }
      },
      has: function has3(key) {
        return !!getEntry(this, key);
      }
    });
    redefineAll$2(Prototype, IS_MAP ? {
      get: function get3(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      set: function set3(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS2)
      defineProperty10(Prototype, "size", {
        get: function() {
          return getInternalState3(this).size;
        }
      });
    return Constructor;
  },
  setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
    var getInternalCollectionState = internalStateGetterFor$12(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor$12(ITERATOR_NAME);
    defineIterator2(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
      setInternalState$12(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind,
        last: void 0
      });
    }, function() {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      while (entry && entry.removed)
        entry = entry.previous;
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        state.target = void 0;
        return {
          value: void 0,
          done: true
        };
      }
      if (kind == "keys")
        return {
          value: entry.key,
          done: false
        };
      if (kind == "values")
        return {
          value: entry.value,
          done: false
        };
      return {
        value: [entry.key, entry.value],
        done: false
      };
    }, IS_MAP ? "entries" : "values", !IS_MAP, true);
    setSpecies2(CONSTRUCTOR_NAME);
  }
};
var collection$22 = collection$3;
var collectionStrong$12 = collectionStrong$22;
collection$22("Map", function(init) {
  return function Map() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
}, collectionStrong$12);
var path$b2 = path$y;
var map$22 = path$b2.Map;
var parent$p2 = map$22;
var map$12 = parent$p2;
var map4 = map$12;
var Groups = function() {
  function Groups2() {
    _classCallCheck2(this, Groups2);
    this.clear();
    this._defaultIndex = 0;
    this._groupIndex = 0;
    this._defaultGroups = [
      {
        border: "#2B7CE9",
        background: "#97C2FC",
        highlight: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        },
        hover: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        }
      },
      {
        border: "#FFA500",
        background: "#FFFF00",
        highlight: {
          border: "#FFA500",
          background: "#FFFFA3"
        },
        hover: {
          border: "#FFA500",
          background: "#FFFFA3"
        }
      },
      {
        border: "#FA0A10",
        background: "#FB7E81",
        highlight: {
          border: "#FA0A10",
          background: "#FFAFB1"
        },
        hover: {
          border: "#FA0A10",
          background: "#FFAFB1"
        }
      },
      {
        border: "#41A906",
        background: "#7BE141",
        highlight: {
          border: "#41A906",
          background: "#A1EC76"
        },
        hover: {
          border: "#41A906",
          background: "#A1EC76"
        }
      },
      {
        border: "#E129F0",
        background: "#EB7DF4",
        highlight: {
          border: "#E129F0",
          background: "#F0B3F5"
        },
        hover: {
          border: "#E129F0",
          background: "#F0B3F5"
        }
      },
      {
        border: "#7C29F0",
        background: "#AD85E4",
        highlight: {
          border: "#7C29F0",
          background: "#D3BDF0"
        },
        hover: {
          border: "#7C29F0",
          background: "#D3BDF0"
        }
      },
      {
        border: "#C37F00",
        background: "#FFA807",
        highlight: {
          border: "#C37F00",
          background: "#FFCA66"
        },
        hover: {
          border: "#C37F00",
          background: "#FFCA66"
        }
      },
      {
        border: "#4220FB",
        background: "#6E6EFD",
        highlight: {
          border: "#4220FB",
          background: "#9B9BFD"
        },
        hover: {
          border: "#4220FB",
          background: "#9B9BFD"
        }
      },
      {
        border: "#FD5A77",
        background: "#FFC0CB",
        highlight: {
          border: "#FD5A77",
          background: "#FFD1D9"
        },
        hover: {
          border: "#FD5A77",
          background: "#FFD1D9"
        }
      },
      {
        border: "#4AD63A",
        background: "#C2FABC",
        highlight: {
          border: "#4AD63A",
          background: "#E6FFE3"
        },
        hover: {
          border: "#4AD63A",
          background: "#E6FFE3"
        }
      },
      {
        border: "#990000",
        background: "#EE0000",
        highlight: {
          border: "#BB0000",
          background: "#FF3333"
        },
        hover: {
          border: "#BB0000",
          background: "#FF3333"
        }
      },
      {
        border: "#FF6000",
        background: "#FF6000",
        highlight: {
          border: "#FF6000",
          background: "#FF6000"
        },
        hover: {
          border: "#FF6000",
          background: "#FF6000"
        }
      },
      {
        border: "#97C2FC",
        background: "#2B7CE9",
        highlight: {
          border: "#D2E5FF",
          background: "#2B7CE9"
        },
        hover: {
          border: "#D2E5FF",
          background: "#2B7CE9"
        }
      },
      {
        border: "#399605",
        background: "#255C03",
        highlight: {
          border: "#399605",
          background: "#255C03"
        },
        hover: {
          border: "#399605",
          background: "#255C03"
        }
      },
      {
        border: "#B70054",
        background: "#FF007E",
        highlight: {
          border: "#B70054",
          background: "#FF007E"
        },
        hover: {
          border: "#B70054",
          background: "#FF007E"
        }
      },
      {
        border: "#AD85E4",
        background: "#7C29F0",
        highlight: {
          border: "#D3BDF0",
          background: "#7C29F0"
        },
        hover: {
          border: "#D3BDF0",
          background: "#7C29F0"
        }
      },
      {
        border: "#4557FA",
        background: "#000EA1",
        highlight: {
          border: "#6E6EFD",
          background: "#000EA1"
        },
        hover: {
          border: "#6E6EFD",
          background: "#000EA1"
        }
      },
      {
        border: "#FFC0CB",
        background: "#FD5A77",
        highlight: {
          border: "#FFD1D9",
          background: "#FD5A77"
        },
        hover: {
          border: "#FFD1D9",
          background: "#FD5A77"
        }
      },
      {
        border: "#C2FABC",
        background: "#74D66A",
        highlight: {
          border: "#E6FFE3",
          background: "#74D66A"
        },
        hover: {
          border: "#E6FFE3",
          background: "#74D66A"
        }
      },
      {
        border: "#EE0000",
        background: "#990000",
        highlight: {
          border: "#FF3333",
          background: "#BB0000"
        },
        hover: {
          border: "#FF3333",
          background: "#BB0000"
        }
      }
    ];
    this.options = {};
    this.defaultOptions = {
      useDefaultGroups: true
    };
    assign$22(this.options, this.defaultOptions);
  }
  _createClass2(Groups2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      var optionFields = ["useDefaultGroups"];
      if (options2 !== void 0) {
        for (var groupName in options2) {
          if (Object.prototype.hasOwnProperty.call(options2, groupName)) {
            if (indexOf4(optionFields).call(optionFields, groupName) === -1) {
              var group = options2[groupName];
              this.add(groupName, group);
            }
          }
        }
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      this._groups = new map4();
      this._groupNames = [];
    }
  }, {
    key: "get",
    value: function get3(groupname) {
      var shouldCreate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var group = this._groups.get(groupname);
      if (group === void 0 && shouldCreate) {
        if (this.options.useDefaultGroups === false && this._groupNames.length > 0) {
          var index2 = this._groupIndex % this._groupNames.length;
          ++this._groupIndex;
          group = {};
          group.color = this._groups.get(this._groupNames[index2]);
          this._groups.set(groupname, group);
        } else {
          var _index = this._defaultIndex % this._defaultGroups.length;
          this._defaultIndex++;
          group = {};
          group.color = this._defaultGroups[_index];
          this._groups.set(groupname, group);
        }
      }
      return group;
    }
  }, {
    key: "add",
    value: function add(groupName, style) {
      if (!this._groups.has(groupName)) {
        this._groupNames.push(groupName);
      }
      this._groups.set(groupName, style);
      return style;
    }
  }]);
  return Groups2;
}();
var $$b2 = _export2;
$$b2({
  target: "Number",
  stat: true
}, {
  isNaN: function isNaN2(number2) {
    return number2 != number2;
  }
});
var path$a2 = path$y;
var isNan$2 = path$a2.Number.isNaN;
var parent$o2 = isNan$2;
var isNan$1 = parent$o2;
var isNan = isNan$1;
var global$62 = global$O;
var globalIsFinite = global$62.isFinite;
var numberIsFinite$1 = Number.isFinite || function isFinite(it2) {
  return typeof it2 == "number" && globalIsFinite(it2);
};
var $$a2 = _export2;
var numberIsFinite = numberIsFinite$1;
$$a2({
  target: "Number",
  stat: true
}, {
  isFinite: numberIsFinite
});
var path$92 = path$y;
var _isFinite$2 = path$92.Number.isFinite;
var parent$n2 = _isFinite$2;
var _isFinite$1 = parent$n2;
var _isFinite = _isFinite$1;
var $$92 = _export2;
var $some2 = arrayIteration2.some;
var arrayMethodIsStrict$32 = arrayMethodIsStrict$6;
var STRICT_METHOD$32 = arrayMethodIsStrict$32("some");
$$92({
  target: "Array",
  proto: true,
  forced: !STRICT_METHOD$32
}, {
  some: function some3(callbackfn) {
    return $some2(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$42 = entryVirtual$i2;
var some$32 = entryVirtual$42("Array").some;
var isPrototypeOf$42 = objectIsPrototypeOf2;
var method$42 = some$32;
var ArrayPrototype$42 = Array.prototype;
var some$22 = function(it2) {
  var own = it2.some;
  return it2 === ArrayPrototype$42 || isPrototypeOf$42(ArrayPrototype$42, it2) && own === ArrayPrototype$42.some ? method$42 : own;
};
var parent$m2 = some$22;
var some$12 = parent$m2;
var some4 = some$12;
var global$52 = global$O;
var fails$32 = fails$t;
var uncurryThis$32 = functionUncurryThis2;
var toString$12 = toString$82;
var trim4 = stringTrim2.trim;
var whitespaces2 = whitespaces$4;
var charAt2 = uncurryThis$32("".charAt);
var n$ParseFloat = global$52.parseFloat;
var Symbol$12 = global$52.Symbol;
var ITERATOR2 = Symbol$12 && Symbol$12.iterator;
var FORCED$22 = 1 / n$ParseFloat(whitespaces2 + "-0") !== -Infinity || ITERATOR2 && !fails$32(function() {
  n$ParseFloat(Object(ITERATOR2));
});
var numberParseFloat = FORCED$22 ? function parseFloat2(string2) {
  var trimmedString = trim4(toString$12(string2));
  var result = n$ParseFloat(trimmedString);
  return result === 0 && charAt2(trimmedString, 0) == "-" ? -0 : result;
} : n$ParseFloat;
var $$82 = _export2;
var $parseFloat = numberParseFloat;
$$82({
  global: true,
  forced: parseFloat != $parseFloat
}, {
  parseFloat: $parseFloat
});
var path$82 = path$y;
var _parseFloat$2 = path$82.parseFloat;
var parent$l2 = _parseFloat$2;
var _parseFloat$1 = parent$l2;
var _parseFloat = _parseFloat$1;
var $$72 = _export2;
var fails$22 = fails$t;
var getOwnPropertyNames$3 = objectGetOwnPropertyNamesExternal2.f;
var FAILS_ON_PRIMITIVES2 = fails$22(function() {
  return !Object.getOwnPropertyNames(1);
});
$$72({
  target: "Object",
  stat: true,
  forced: FAILS_ON_PRIMITIVES2
}, {
  getOwnPropertyNames: getOwnPropertyNames$3
});
var path$72 = path$y;
var Object$12 = path$72.Object;
var getOwnPropertyNames$2 = function getOwnPropertyNames7(it2) {
  return Object$12.getOwnPropertyNames(it2);
};
var parent$k2 = getOwnPropertyNames$2;
var getOwnPropertyNames$1 = parent$k2;
var getOwnPropertyNames8 = getOwnPropertyNames$1;
function choosify(subOption, pile) {
  var allowed = ["node", "edge", "label"];
  var value = true;
  var chosen = topMost(pile, "chosen");
  if (typeof chosen === "boolean") {
    value = chosen;
  } else if (_typeof2(chosen) === "object") {
    if (indexOf4(allowed).call(allowed, subOption) === -1) {
      throw new Error("choosify: subOption '" + subOption + "' should be one of '" + allowed.join("', '") + "'");
    }
    var chosenEdge = topMost(pile, ["chosen", subOption]);
    if (typeof chosenEdge === "boolean" || typeof chosenEdge === "function") {
      value = chosenEdge;
    }
  }
  return value;
}
function pointInRect(rect, point, rotationPoint) {
  if (rect.width <= 0 || rect.height <= 0) {
    return false;
  }
  if (rotationPoint !== void 0) {
    var tmp = {
      x: point.x - rotationPoint.x,
      y: point.y - rotationPoint.y
    };
    if (rotationPoint.angle !== 0) {
      var angle = -rotationPoint.angle;
      var tmp2 = {
        x: Math.cos(angle) * tmp.x - Math.sin(angle) * tmp.y,
        y: Math.sin(angle) * tmp.x + Math.cos(angle) * tmp.y
      };
      point = tmp2;
    } else {
      point = tmp;
    }
  }
  var right = rect.x + rect.width;
  var bottom = rect.y + rect.width;
  return rect.left < point.x && right > point.x && rect.top < point.y && bottom > point.y;
}
function isValidLabel(text) {
  return typeof text === "string" && text !== "";
}
function getSelfRefCoordinates(ctx, angle, radius, node) {
  var x = node.x;
  var y = node.y;
  if (typeof node.distanceToBorder === "function") {
    var toBorderDist = node.distanceToBorder(ctx, angle);
    var yFromNodeCenter = Math.sin(angle) * toBorderDist;
    var xFromNodeCenter = Math.cos(angle) * toBorderDist;
    if (xFromNodeCenter === toBorderDist) {
      x += toBorderDist;
      y = node.y;
    } else if (yFromNodeCenter === toBorderDist) {
      x = node.x;
      y -= toBorderDist;
    } else {
      x += xFromNodeCenter;
      y -= yFromNodeCenter;
    }
  } else if (node.shape.width > node.shape.height) {
    x = node.x + node.shape.width * 0.5;
    y = node.y - radius;
  } else {
    x = node.x + radius;
    y = node.y - node.shape.height * 0.5;
  }
  return {
    x,
    y
  };
}
var entryVirtual$32 = entryVirtual$i2;
var values$32 = entryVirtual$32("Array").values;
var parent$j2 = values$32;
var values$22 = parent$j2;
var classof$12 = classof$c2;
var hasOwn$22 = hasOwnProperty_12;
var isPrototypeOf$32 = objectIsPrototypeOf2;
var method$32 = values$22;
var ArrayPrototype$32 = Array.prototype;
var DOMIterables2 = {
  DOMTokenList: true,
  NodeList: true
};
var values$12 = function(it2) {
  var own = it2.values;
  return it2 === ArrayPrototype$32 || isPrototypeOf$32(ArrayPrototype$32, it2) && own === ArrayPrototype$32.values || hasOwn$22(DOMIterables2, classof$12(it2)) ? method$32 : own;
};
var values4 = values$12;
var LabelAccumulator = function() {
  function LabelAccumulator2(measureText) {
    _classCallCheck2(this, LabelAccumulator2);
    this.measureText = measureText;
    this.current = 0;
    this.width = 0;
    this.height = 0;
    this.lines = [];
  }
  _createClass2(LabelAccumulator2, [{
    key: "_add",
    value: function _add(l, text) {
      var mod = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "normal";
      if (this.lines[l] === void 0) {
        this.lines[l] = {
          width: 0,
          height: 0,
          blocks: []
        };
      }
      var tmpText = text;
      if (text === void 0 || text === "")
        tmpText = " ";
      var result = this.measureText(tmpText, mod);
      var block = assign$22({}, values4(result));
      block.text = text;
      block.width = result.width;
      block.mod = mod;
      if (text === void 0 || text === "") {
        block.width = 0;
      }
      this.lines[l].blocks.push(block);
      this.lines[l].width += block.width;
    }
  }, {
    key: "curWidth",
    value: function curWidth() {
      var line = this.lines[this.current];
      if (line === void 0)
        return 0;
      return line.width;
    }
  }, {
    key: "append",
    value: function append(text) {
      var mod = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "normal";
      this._add(this.current, text, mod);
    }
  }, {
    key: "newLine",
    value: function newLine(text) {
      var mod = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "normal";
      this._add(this.current, text, mod);
      this.current++;
    }
  }, {
    key: "determineLineHeights",
    value: function determineLineHeights() {
      for (var k = 0; k < this.lines.length; k++) {
        var line = this.lines[k];
        var height = 0;
        if (line.blocks !== void 0) {
          for (var l = 0; l < line.blocks.length; l++) {
            var block = line.blocks[l];
            if (height < block.height) {
              height = block.height;
            }
          }
        }
        line.height = height;
      }
    }
  }, {
    key: "determineLabelSize",
    value: function determineLabelSize() {
      var width = 0;
      var height = 0;
      for (var k = 0; k < this.lines.length; k++) {
        var line = this.lines[k];
        if (line.width > width) {
          width = line.width;
        }
        height += line.height;
      }
      this.width = width;
      this.height = height;
    }
  }, {
    key: "removeEmptyBlocks",
    value: function removeEmptyBlocks() {
      var tmpLines = [];
      for (var k = 0; k < this.lines.length; k++) {
        var line = this.lines[k];
        if (line.blocks.length === 0)
          continue;
        if (k === this.lines.length - 1) {
          if (line.width === 0)
            continue;
        }
        var tmpLine = {};
        assign$22(tmpLine, line);
        tmpLine.blocks = [];
        var firstEmptyBlock = void 0;
        var tmpBlocks = [];
        for (var l = 0; l < line.blocks.length; l++) {
          var block = line.blocks[l];
          if (block.width !== 0) {
            tmpBlocks.push(block);
          } else {
            if (firstEmptyBlock === void 0) {
              firstEmptyBlock = block;
            }
          }
        }
        if (tmpBlocks.length === 0 && firstEmptyBlock !== void 0) {
          tmpBlocks.push(firstEmptyBlock);
        }
        tmpLine.blocks = tmpBlocks;
        tmpLines.push(tmpLine);
      }
      return tmpLines;
    }
  }, {
    key: "finalize",
    value: function finalize() {
      this.determineLineHeights();
      this.determineLabelSize();
      var tmpLines = this.removeEmptyBlocks();
      return {
        width: this.width,
        height: this.height,
        lines: tmpLines
      };
    }
  }]);
  return LabelAccumulator2;
}();
var tagPattern = {
  "<b>": /<b>/,
  "<i>": /<i>/,
  "<code>": /<code>/,
  "</b>": /<\/b>/,
  "</i>": /<\/i>/,
  "</code>": /<\/code>/,
  "*": /\*/,
  _: /_/,
  "`": /`/,
  afterBold: /[^*]/,
  afterItal: /[^_]/,
  afterMono: /[^`]/
};
var MarkupAccumulator = function() {
  function MarkupAccumulator2(text) {
    _classCallCheck2(this, MarkupAccumulator2);
    this.text = text;
    this.bold = false;
    this.ital = false;
    this.mono = false;
    this.spacing = false;
    this.position = 0;
    this.buffer = "";
    this.modStack = [];
    this.blocks = [];
  }
  _createClass2(MarkupAccumulator2, [{
    key: "mod",
    value: function mod() {
      return this.modStack.length === 0 ? "normal" : this.modStack[0];
    }
  }, {
    key: "modName",
    value: function modName() {
      if (this.modStack.length === 0)
        return "normal";
      else if (this.modStack[0] === "mono")
        return "mono";
      else {
        if (this.bold && this.ital) {
          return "boldital";
        } else if (this.bold) {
          return "bold";
        } else if (this.ital) {
          return "ital";
        }
      }
    }
  }, {
    key: "emitBlock",
    value: function emitBlock() {
      if (this.spacing) {
        this.add(" ");
        this.spacing = false;
      }
      if (this.buffer.length > 0) {
        this.blocks.push({
          text: this.buffer,
          mod: this.modName()
        });
        this.buffer = "";
      }
    }
  }, {
    key: "add",
    value: function add(text) {
      if (text === " ") {
        this.spacing = true;
      }
      if (this.spacing) {
        this.buffer += " ";
        this.spacing = false;
      }
      if (text != " ") {
        this.buffer += text;
      }
    }
  }, {
    key: "parseWS",
    value: function parseWS(ch) {
      if (/[ \t]/.test(ch)) {
        if (!this.mono) {
          this.spacing = true;
        } else {
          this.add(ch);
        }
        return true;
      }
      return false;
    }
  }, {
    key: "setTag",
    value: function setTag(tagName) {
      this.emitBlock();
      this[tagName] = true;
      this.modStack.unshift(tagName);
    }
  }, {
    key: "unsetTag",
    value: function unsetTag(tagName) {
      this.emitBlock();
      this[tagName] = false;
      this.modStack.shift();
    }
  }, {
    key: "parseStartTag",
    value: function parseStartTag(tagName, tag) {
      if (!this.mono && !this[tagName] && this.match(tag)) {
        this.setTag(tagName);
        return true;
      }
      return false;
    }
  }, {
    key: "match",
    value: function match3(tag) {
      var advance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var _this$prepareRegExp = this.prepareRegExp(tag), _this$prepareRegExp2 = _slicedToArray2(_this$prepareRegExp, 2), regExp = _this$prepareRegExp2[0], length2 = _this$prepareRegExp2[1];
      var matched = regExp.test(this.text.substr(this.position, length2));
      if (matched && advance) {
        this.position += length2 - 1;
      }
      return matched;
    }
  }, {
    key: "parseEndTag",
    value: function parseEndTag(tagName, tag, nextTag) {
      var checkTag = this.mod() === tagName;
      if (tagName === "mono") {
        checkTag = checkTag && this.mono;
      } else {
        checkTag = checkTag && !this.mono;
      }
      if (checkTag && this.match(tag)) {
        if (nextTag !== void 0) {
          if (this.position === this.text.length - 1 || this.match(nextTag, false)) {
            this.unsetTag(tagName);
          }
        } else {
          this.unsetTag(tagName);
        }
        return true;
      }
      return false;
    }
  }, {
    key: "replace",
    value: function replace3(tag, value) {
      if (this.match(tag)) {
        this.add(value);
        this.position += length - 1;
        return true;
      }
      return false;
    }
  }, {
    key: "prepareRegExp",
    value: function prepareRegExp(tag) {
      var length2;
      var regExp;
      if (tag instanceof RegExp) {
        regExp = tag;
        length2 = 1;
      } else {
        var prepared = tagPattern[tag];
        if (prepared !== void 0) {
          regExp = prepared;
        } else {
          regExp = new RegExp(tag);
        }
        length2 = tag.length;
      }
      return [regExp, length2];
    }
  }]);
  return MarkupAccumulator2;
}();
var LabelSplitter = function() {
  function LabelSplitter2(ctx, parent3, selected, hover) {
    var _this = this;
    _classCallCheck2(this, LabelSplitter2);
    this.ctx = ctx;
    this.parent = parent3;
    this.selected = selected;
    this.hover = hover;
    var textWidth = function textWidth2(text, mod) {
      if (text === void 0)
        return 0;
      var values5 = _this.parent.getFormattingValues(ctx, selected, hover, mod);
      var width = 0;
      if (text !== "") {
        var measure = _this.ctx.measureText(text);
        width = measure.width;
      }
      return {
        width,
        values: values5
      };
    };
    this.lines = new LabelAccumulator(textWidth);
  }
  _createClass2(LabelSplitter2, [{
    key: "process",
    value: function process3(text) {
      if (!isValidLabel(text)) {
        return this.lines.finalize();
      }
      var font = this.parent.fontOptions;
      text = text.replace(/\r\n/g, "\n");
      text = text.replace(/\r/g, "\n");
      var nlLines = String(text).split("\n");
      var lineCount = nlLines.length;
      if (font.multi) {
        for (var i = 0; i < lineCount; i++) {
          var blocks = this.splitBlocks(nlLines[i], font.multi);
          if (blocks === void 0)
            continue;
          if (blocks.length === 0) {
            this.lines.newLine("");
            continue;
          }
          if (font.maxWdt > 0) {
            for (var j = 0; j < blocks.length; j++) {
              var mod = blocks[j].mod;
              var _text = blocks[j].text;
              this.splitStringIntoLines(_text, mod, true);
            }
          } else {
            for (var _j = 0; _j < blocks.length; _j++) {
              var _mod = blocks[_j].mod;
              var _text2 = blocks[_j].text;
              this.lines.append(_text2, _mod);
            }
          }
          this.lines.newLine();
        }
      } else {
        if (font.maxWdt > 0) {
          for (var _i = 0; _i < lineCount; _i++) {
            this.splitStringIntoLines(nlLines[_i]);
          }
        } else {
          for (var _i2 = 0; _i2 < lineCount; _i2++) {
            this.lines.newLine(nlLines[_i2]);
          }
        }
      }
      return this.lines.finalize();
    }
  }, {
    key: "decodeMarkupSystem",
    value: function decodeMarkupSystem(markupSystem) {
      var system = "none";
      if (markupSystem === "markdown" || markupSystem === "md") {
        system = "markdown";
      } else if (markupSystem === true || markupSystem === "html") {
        system = "html";
      }
      return system;
    }
  }, {
    key: "splitHtmlBlocks",
    value: function splitHtmlBlocks(text) {
      var s = new MarkupAccumulator(text);
      var parseEntities = function parseEntities2(ch2) {
        if (/&/.test(ch2)) {
          var parsed2 = s.replace(s.text, "&lt;", "<") || s.replace(s.text, "&amp;", "&");
          if (!parsed2) {
            s.add("&");
          }
          return true;
        }
        return false;
      };
      while (s.position < s.text.length) {
        var ch = s.text.charAt(s.position);
        var parsed = s.parseWS(ch) || /</.test(ch) && (s.parseStartTag("bold", "<b>") || s.parseStartTag("ital", "<i>") || s.parseStartTag("mono", "<code>") || s.parseEndTag("bold", "</b>") || s.parseEndTag("ital", "</i>") || s.parseEndTag("mono", "</code>")) || parseEntities(ch);
        if (!parsed) {
          s.add(ch);
        }
        s.position++;
      }
      s.emitBlock();
      return s.blocks;
    }
  }, {
    key: "splitMarkdownBlocks",
    value: function splitMarkdownBlocks(text) {
      var _this2 = this;
      var s = new MarkupAccumulator(text);
      var beginable = true;
      var parseOverride = function parseOverride2(ch2) {
        if (/\\/.test(ch2)) {
          if (s.position < _this2.text.length + 1) {
            s.position++;
            ch2 = _this2.text.charAt(s.position);
            if (/ \t/.test(ch2)) {
              s.spacing = true;
            } else {
              s.add(ch2);
              beginable = false;
            }
          }
          return true;
        }
        return false;
      };
      while (s.position < s.text.length) {
        var ch = s.text.charAt(s.position);
        var parsed = s.parseWS(ch) || parseOverride(ch) || (beginable || s.spacing) && (s.parseStartTag("bold", "*") || s.parseStartTag("ital", "_") || s.parseStartTag("mono", "`")) || s.parseEndTag("bold", "*", "afterBold") || s.parseEndTag("ital", "_", "afterItal") || s.parseEndTag("mono", "`", "afterMono");
        if (!parsed) {
          s.add(ch);
          beginable = false;
        }
        s.position++;
      }
      s.emitBlock();
      return s.blocks;
    }
  }, {
    key: "splitBlocks",
    value: function splitBlocks(text, markupSystem) {
      var system = this.decodeMarkupSystem(markupSystem);
      if (system === "none") {
        return [{
          text,
          mod: "normal"
        }];
      } else if (system === "markdown") {
        return this.splitMarkdownBlocks(text);
      } else if (system === "html") {
        return this.splitHtmlBlocks(text);
      }
    }
  }, {
    key: "overMaxWidth",
    value: function overMaxWidth(text) {
      var width = this.ctx.measureText(text).width;
      return this.lines.curWidth() + width > this.parent.fontOptions.maxWdt;
    }
  }, {
    key: "getLongestFit",
    value: function getLongestFit(words) {
      var text = "";
      var w = 0;
      while (w < words.length) {
        var pre = text === "" ? "" : " ";
        var newText = text + pre + words[w];
        if (this.overMaxWidth(newText))
          break;
        text = newText;
        w++;
      }
      return w;
    }
  }, {
    key: "getLongestFitWord",
    value: function getLongestFitWord(words) {
      var w = 0;
      while (w < words.length) {
        if (this.overMaxWidth(slice4(words).call(words, 0, w)))
          break;
        w++;
      }
      return w;
    }
  }, {
    key: "splitStringIntoLines",
    value: function splitStringIntoLines(str) {
      var mod = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "normal";
      var appendLast = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      this.parent.getFormattingValues(this.ctx, this.selected, this.hover, mod);
      str = str.replace(/^( +)/g, "$1\r");
      str = str.replace(/([^\r][^ ]*)( +)/g, "$1\r$2\r");
      var words = str.split("\r");
      while (words.length > 0) {
        var w = this.getLongestFit(words);
        if (w === 0) {
          var word = words[0];
          var x = this.getLongestFitWord(word);
          this.lines.newLine(slice4(word).call(word, 0, x), mod);
          words[0] = slice4(word).call(word, x);
        } else {
          var newW = w;
          if (words[w - 1] === " ") {
            w--;
          } else if (words[newW] === " ") {
            newW++;
          }
          var text = slice4(words).call(words, 0, w).join("");
          if (w == words.length && appendLast) {
            this.lines.append(text, mod);
          } else {
            this.lines.newLine(text, mod);
          }
          words = slice4(words).call(words, newW);
        }
      }
    }
  }]);
  return LabelSplitter2;
}();
var multiFontStyle = ["bold", "ital", "boldital", "mono"];
var Label = function() {
  function Label2(body, options2) {
    var edgelabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    _classCallCheck2(this, Label2);
    this.body = body;
    this.pointToSelf = false;
    this.baseSize = void 0;
    this.fontOptions = {};
    this.setOptions(options2);
    this.size = {
      top: 0,
      left: 0,
      width: 0,
      height: 0,
      yLine: 0
    };
    this.isEdgeLabel = edgelabel;
  }
  _createClass2(Label2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      this.elementOptions = options2;
      this.initFontOptions(options2.font);
      if (isValidLabel(options2.label)) {
        this.labelDirty = true;
      } else {
        options2.label = void 0;
      }
      if (options2.font !== void 0 && options2.font !== null) {
        if (typeof options2.font === "string") {
          this.baseSize = this.fontOptions.size;
        } else if (_typeof2(options2.font) === "object") {
          var size = options2.font.size;
          if (size !== void 0) {
            this.baseSize = size;
          }
        }
      }
    }
  }, {
    key: "initFontOptions",
    value: function initFontOptions(newFontOptions) {
      var _this = this;
      forEach$12(multiFontStyle, function(style) {
        _this.fontOptions[style] = {};
      });
      if (Label2.parseFontString(this.fontOptions, newFontOptions)) {
        this.fontOptions.vadjust = 0;
        return;
      }
      forEach$12(newFontOptions, function(prop, n) {
        if (prop !== void 0 && prop !== null && _typeof2(prop) !== "object") {
          _this.fontOptions[n] = prop;
        }
      });
    }
  }, {
    key: "constrain",
    value: function constrain(pile) {
      var fontOptions = {
        constrainWidth: false,
        maxWdt: -1,
        minWdt: -1,
        constrainHeight: false,
        minHgt: -1,
        valign: "middle"
      };
      var widthConstraint = topMost(pile, "widthConstraint");
      if (typeof widthConstraint === "number") {
        fontOptions.maxWdt = Number(widthConstraint);
        fontOptions.minWdt = Number(widthConstraint);
      } else if (_typeof2(widthConstraint) === "object") {
        var widthConstraintMaximum = topMost(pile, ["widthConstraint", "maximum"]);
        if (typeof widthConstraintMaximum === "number") {
          fontOptions.maxWdt = Number(widthConstraintMaximum);
        }
        var widthConstraintMinimum = topMost(pile, ["widthConstraint", "minimum"]);
        if (typeof widthConstraintMinimum === "number") {
          fontOptions.minWdt = Number(widthConstraintMinimum);
        }
      }
      var heightConstraint = topMost(pile, "heightConstraint");
      if (typeof heightConstraint === "number") {
        fontOptions.minHgt = Number(heightConstraint);
      } else if (_typeof2(heightConstraint) === "object") {
        var heightConstraintMinimum = topMost(pile, ["heightConstraint", "minimum"]);
        if (typeof heightConstraintMinimum === "number") {
          fontOptions.minHgt = Number(heightConstraintMinimum);
        }
        var heightConstraintValign = topMost(pile, ["heightConstraint", "valign"]);
        if (typeof heightConstraintValign === "string") {
          if (heightConstraintValign === "top" || heightConstraintValign === "bottom") {
            fontOptions.valign = heightConstraintValign;
          }
        }
      }
      return fontOptions;
    }
  }, {
    key: "update",
    value: function update(options2, pile) {
      this.setOptions(options2, true);
      this.propagateFonts(pile);
      deepExtend(this.fontOptions, this.constrain(pile));
      this.fontOptions.chooser = choosify("label", pile);
    }
  }, {
    key: "adjustSizes",
    value: function adjustSizes(margins) {
      var widthBias = margins ? margins.right + margins.left : 0;
      if (this.fontOptions.constrainWidth) {
        this.fontOptions.maxWdt -= widthBias;
        this.fontOptions.minWdt -= widthBias;
      }
      var heightBias = margins ? margins.top + margins.bottom : 0;
      if (this.fontOptions.constrainHeight) {
        this.fontOptions.minHgt -= heightBias;
      }
    }
  }, {
    key: "addFontOptionsToPile",
    value: function addFontOptionsToPile(dstPile, srcPile) {
      for (var i = 0; i < srcPile.length; ++i) {
        this.addFontToPile(dstPile, srcPile[i]);
      }
    }
  }, {
    key: "addFontToPile",
    value: function addFontToPile(pile, options2) {
      if (options2 === void 0)
        return;
      if (options2.font === void 0 || options2.font === null)
        return;
      var item = options2.font;
      pile.push(item);
    }
  }, {
    key: "getBasicOptions",
    value: function getBasicOptions(pile) {
      var ret = {};
      for (var n = 0; n < pile.length; ++n) {
        var fontOptions = pile[n];
        var tmpShorthand = {};
        if (Label2.parseFontString(tmpShorthand, fontOptions)) {
          fontOptions = tmpShorthand;
        }
        forEach$12(fontOptions, function(opt, name) {
          if (opt === void 0)
            return;
          if (Object.prototype.hasOwnProperty.call(ret, name))
            return;
          if (indexOf4(multiFontStyle).call(multiFontStyle, name) !== -1) {
            ret[name] = {};
          } else {
            ret[name] = opt;
          }
        });
      }
      return ret;
    }
  }, {
    key: "getFontOption",
    value: function getFontOption(pile, multiName, option) {
      var multiFont;
      for (var n = 0; n < pile.length; ++n) {
        var fontOptions = pile[n];
        if (Object.prototype.hasOwnProperty.call(fontOptions, multiName)) {
          multiFont = fontOptions[multiName];
          if (multiFont === void 0 || multiFont === null)
            continue;
          var tmpShorthand = {};
          if (Label2.parseFontString(tmpShorthand, multiFont)) {
            multiFont = tmpShorthand;
          }
          if (Object.prototype.hasOwnProperty.call(multiFont, option)) {
            return multiFont[option];
          }
        }
      }
      if (Object.prototype.hasOwnProperty.call(this.fontOptions, option)) {
        return this.fontOptions[option];
      }
      throw new Error("Did not find value for multi-font for property: '" + option + "'");
    }
  }, {
    key: "getFontOptions",
    value: function getFontOptions(pile, multiName) {
      var result = {};
      var optionNames = ["color", "size", "face", "mod", "vadjust"];
      for (var i = 0; i < optionNames.length; ++i) {
        var mod = optionNames[i];
        result[mod] = this.getFontOption(pile, multiName, mod);
      }
      return result;
    }
  }, {
    key: "propagateFonts",
    value: function propagateFonts(pile) {
      var _this2 = this;
      var fontPile = [];
      this.addFontOptionsToPile(fontPile, pile);
      this.fontOptions = this.getBasicOptions(fontPile);
      var _loop = function _loop2(i2) {
        var mod = multiFontStyle[i2];
        var modOptions = _this2.fontOptions[mod];
        var tmpMultiFontOptions = _this2.getFontOptions(fontPile, mod);
        forEach$12(tmpMultiFontOptions, function(option, n) {
          modOptions[n] = option;
        });
        modOptions.size = Number(modOptions.size);
        modOptions.vadjust = Number(modOptions.vadjust);
      };
      for (var i = 0; i < multiFontStyle.length; ++i) {
        _loop(i);
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx, x, y, selected, hover) {
      var baseline = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : "middle";
      if (this.elementOptions.label === void 0)
        return;
      var viewFontSize = this.fontOptions.size * this.body.view.scale;
      if (this.elementOptions.label && viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1)
        return;
      if (viewFontSize >= this.elementOptions.scaling.label.maxVisible) {
        viewFontSize = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale;
      }
      this.calculateLabelSize(ctx, selected, hover, x, y, baseline);
      this._drawBackground(ctx);
      this._drawText(ctx, x, this.size.yLine, baseline, viewFontSize);
    }
  }, {
    key: "_drawBackground",
    value: function _drawBackground(ctx) {
      if (this.fontOptions.background !== void 0 && this.fontOptions.background !== "none") {
        ctx.fillStyle = this.fontOptions.background;
        var size = this.getSize();
        ctx.fillRect(size.left, size.top, size.width, size.height);
      }
    }
  }, {
    key: "_drawText",
    value: function _drawText(ctx, x, y) {
      var baseline = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "middle";
      var viewFontSize = arguments.length > 4 ? arguments[4] : void 0;
      var _this$_setAlignment = this._setAlignment(ctx, x, y, baseline);
      var _this$_setAlignment2 = _slicedToArray2(_this$_setAlignment, 2);
      x = _this$_setAlignment2[0];
      y = _this$_setAlignment2[1];
      ctx.textAlign = "left";
      x = x - this.size.width / 2;
      if (this.fontOptions.valign && this.size.height > this.size.labelHeight) {
        if (this.fontOptions.valign === "top") {
          y -= (this.size.height - this.size.labelHeight) / 2;
        }
        if (this.fontOptions.valign === "bottom") {
          y += (this.size.height - this.size.labelHeight) / 2;
        }
      }
      for (var i = 0; i < this.lineCount; i++) {
        var line = this.lines[i];
        if (line && line.blocks) {
          var width = 0;
          if (this.isEdgeLabel || this.fontOptions.align === "center") {
            width += (this.size.width - line.width) / 2;
          } else if (this.fontOptions.align === "right") {
            width += this.size.width - line.width;
          }
          for (var j = 0; j < line.blocks.length; j++) {
            var block = line.blocks[j];
            ctx.font = block.font;
            var _this$_getColor = this._getColor(block.color, viewFontSize, block.strokeColor), _this$_getColor2 = _slicedToArray2(_this$_getColor, 2), fontColor = _this$_getColor2[0], strokeColor = _this$_getColor2[1];
            if (block.strokeWidth > 0) {
              ctx.lineWidth = block.strokeWidth;
              ctx.strokeStyle = strokeColor;
              ctx.lineJoin = "round";
            }
            ctx.fillStyle = fontColor;
            if (block.strokeWidth > 0) {
              ctx.strokeText(block.text, x + width, y + block.vadjust);
            }
            ctx.fillText(block.text, x + width, y + block.vadjust);
            width += block.width;
          }
          y += line.height;
        }
      }
    }
  }, {
    key: "_setAlignment",
    value: function _setAlignment(ctx, x, y, baseline) {
      if (this.isEdgeLabel && this.fontOptions.align !== "horizontal" && this.pointToSelf === false) {
        x = 0;
        y = 0;
        var lineMargin = 2;
        if (this.fontOptions.align === "top") {
          ctx.textBaseline = "alphabetic";
          y -= 2 * lineMargin;
        } else if (this.fontOptions.align === "bottom") {
          ctx.textBaseline = "hanging";
          y += 2 * lineMargin;
        } else {
          ctx.textBaseline = "middle";
        }
      } else {
        ctx.textBaseline = baseline;
      }
      return [x, y];
    }
  }, {
    key: "_getColor",
    value: function _getColor(color, viewFontSize, initialStrokeColor) {
      var fontColor = color || "#000000";
      var strokeColor = initialStrokeColor || "#ffffff";
      if (viewFontSize <= this.elementOptions.scaling.label.drawThreshold) {
        var opacity = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - viewFontSize)));
        fontColor = overrideOpacity(fontColor, opacity);
        strokeColor = overrideOpacity(strokeColor, opacity);
      }
      return [fontColor, strokeColor];
    }
  }, {
    key: "getTextSize",
    value: function getTextSize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      this._processLabel(ctx, selected, hover);
      return {
        width: this.size.width,
        height: this.size.height,
        lineCount: this.lineCount
      };
    }
  }, {
    key: "getSize",
    value: function getSize() {
      var lineMargin = 2;
      var x = this.size.left;
      var y = this.size.top - 0.5 * lineMargin;
      if (this.isEdgeLabel) {
        var x2 = -this.size.width * 0.5;
        switch (this.fontOptions.align) {
          case "middle":
            x = x2;
            y = -this.size.height * 0.5;
            break;
          case "top":
            x = x2;
            y = -(this.size.height + lineMargin);
            break;
          case "bottom":
            x = x2;
            y = lineMargin;
            break;
        }
      }
      var ret = {
        left: x,
        top: y,
        width: this.size.width,
        height: this.size.height
      };
      return ret;
    }
  }, {
    key: "calculateLabelSize",
    value: function calculateLabelSize(ctx, selected, hover) {
      var x = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      var y = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
      var baseline = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : "middle";
      this._processLabel(ctx, selected, hover);
      this.size.left = x - this.size.width * 0.5;
      this.size.top = y - this.size.height * 0.5;
      this.size.yLine = y + (1 - this.lineCount) * 0.5 * this.fontOptions.size;
      if (baseline === "hanging") {
        this.size.top += 0.5 * this.fontOptions.size;
        this.size.top += 4;
        this.size.yLine += 4;
      }
    }
  }, {
    key: "getFormattingValues",
    value: function getFormattingValues(ctx, selected, hover, mod) {
      var getValue = function getValue2(fontOptions, mod2, option) {
        if (mod2 === "normal") {
          if (option === "mod")
            return "";
          return fontOptions[option];
        }
        if (fontOptions[mod2][option] !== void 0) {
          return fontOptions[mod2][option];
        } else {
          return fontOptions[option];
        }
      };
      var values5 = {
        color: getValue(this.fontOptions, mod, "color"),
        size: getValue(this.fontOptions, mod, "size"),
        face: getValue(this.fontOptions, mod, "face"),
        mod: getValue(this.fontOptions, mod, "mod"),
        vadjust: getValue(this.fontOptions, mod, "vadjust"),
        strokeWidth: this.fontOptions.strokeWidth,
        strokeColor: this.fontOptions.strokeColor
      };
      if (selected || hover) {
        if (mod === "normal" && this.fontOptions.chooser === true && this.elementOptions.labelHighlightBold) {
          values5.mod = "bold";
        } else {
          if (typeof this.fontOptions.chooser === "function") {
            this.fontOptions.chooser(values5, this.elementOptions.id, selected, hover);
          }
        }
      }
      var fontString = "";
      if (values5.mod !== void 0 && values5.mod !== "") {
        fontString += values5.mod + " ";
      }
      fontString += values5.size + "px " + values5.face;
      ctx.font = fontString.replace(/"/g, "");
      values5.font = ctx.font;
      values5.height = values5.size;
      return values5;
    }
  }, {
    key: "differentState",
    value: function differentState(selected, hover) {
      return selected !== this.selectedState || hover !== this.hoverState;
    }
  }, {
    key: "_processLabelText",
    value: function _processLabelText(ctx, selected, hover, inText) {
      var splitter = new LabelSplitter(ctx, this, selected, hover);
      return splitter.process(inText);
    }
  }, {
    key: "_processLabel",
    value: function _processLabel(ctx, selected, hover) {
      if (this.labelDirty === false && !this.differentState(selected, hover))
        return;
      var state = this._processLabelText(ctx, selected, hover, this.elementOptions.label);
      if (this.fontOptions.minWdt > 0 && state.width < this.fontOptions.minWdt) {
        state.width = this.fontOptions.minWdt;
      }
      this.size.labelHeight = state.height;
      if (this.fontOptions.minHgt > 0 && state.height < this.fontOptions.minHgt) {
        state.height = this.fontOptions.minHgt;
      }
      this.lines = state.lines;
      this.lineCount = state.lines.length;
      this.size.width = state.width;
      this.size.height = state.height;
      this.selectedState = selected;
      this.hoverState = hover;
      this.labelDirty = false;
    }
  }, {
    key: "visible",
    value: function visible() {
      if (this.size.width === 0 || this.size.height === 0 || this.elementOptions.label === void 0) {
        return false;
      }
      var viewFontSize = this.fontOptions.size * this.body.view.scale;
      if (viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) {
        return false;
      }
      return true;
    }
  }], [{
    key: "parseFontString",
    value: function parseFontString(outOptions, inOptions) {
      if (!inOptions || typeof inOptions !== "string")
        return false;
      var newOptionsArray = inOptions.split(" ");
      outOptions.size = +newOptionsArray[0].replace("px", "");
      outOptions.face = newOptionsArray[1];
      outOptions.color = newOptionsArray[2];
      return true;
    }
  }]);
  return Label2;
}();
var global$42 = global$O;
var isConstructor6 = isConstructor$42;
var tryToString2 = tryToString$42;
var TypeError$22 = global$42.TypeError;
var aConstructor$12 = function(argument) {
  if (isConstructor6(argument))
    return argument;
  throw TypeError$22(tryToString2(argument) + " is not a constructor");
};
var $$62 = _export2;
var getBuiltIn2 = getBuiltIn$92;
var apply2 = functionApply2;
var bind4 = functionBind2;
var aConstructor2 = aConstructor$12;
var anObject$22 = anObject$d;
var isObject$32 = isObject$j;
var create$32 = objectCreate2;
var fails$12 = fails$t;
var nativeConstruct2 = getBuiltIn2("Reflect", "construct");
var ObjectPrototype2 = Object.prototype;
var push$12 = [].push;
var NEW_TARGET_BUG2 = fails$12(function() {
  function F() {
  }
  return !(nativeConstruct2(function() {
  }, [], F) instanceof F);
});
var ARGS_BUG2 = !fails$12(function() {
  nativeConstruct2(function() {
  });
});
var FORCED$12 = NEW_TARGET_BUG2 || ARGS_BUG2;
$$62({
  target: "Reflect",
  stat: true,
  forced: FORCED$12,
  sham: FORCED$12
}, {
  construct: function construct3(Target, args) {
    aConstructor2(Target);
    anObject$22(args);
    var newTarget = arguments.length < 3 ? Target : aConstructor2(arguments[2]);
    if (ARGS_BUG2 && !NEW_TARGET_BUG2)
      return nativeConstruct2(Target, args, newTarget);
    if (Target == newTarget) {
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      var $args = [null];
      apply2(push$12, $args, args);
      return new (apply2(bind4, Target, $args))();
    }
    var proto = newTarget.prototype;
    var instance = create$32(isObject$32(proto) ? proto : ObjectPrototype2);
    var result = apply2(Target, instance, args);
    return isObject$32(result) ? result : instance;
  }
});
var path$62 = path$y;
var construct$22 = path$62.Reflect.construct;
var parent$i2 = construct$22;
var construct$12 = parent$i2;
var construct4 = construct$12;
var parent$h2 = create$62;
var create$22 = parent$h2;
var parent$g2 = create$22;
var create$12 = parent$g2;
var create8 = create$12;
var $$52 = _export2;
var setPrototypeOf$52 = objectSetPrototypeOf2;
$$52({
  target: "Object",
  stat: true
}, {
  setPrototypeOf: setPrototypeOf$52
});
var path$52 = path$y;
var setPrototypeOf$42 = path$52.Object.setPrototypeOf;
var parent$f2 = setPrototypeOf$42;
var setPrototypeOf$32 = parent$f2;
var parent$e2 = setPrototypeOf$32;
var setPrototypeOf$22 = parent$e2;
var parent$d2 = setPrototypeOf$22;
var setPrototypeOf$12 = parent$d2;
var setPrototypeOf2 = setPrototypeOf$12;
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = setPrototypeOf2 || function _setPrototypeOf3(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}
function _inherits2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = create8(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  defineProperty$32(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf2(subClass, superClass);
}
function _assertThisInitialized2(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn2(self2, call3) {
  if (call3 && (_typeof2(call3) === "object" || typeof call3 === "function")) {
    return call3;
  } else if (call3 !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized2(self2);
}
var parent$c2 = getPrototypeOf$52;
var getPrototypeOf$32 = parent$c2;
var parent$b2 = getPrototypeOf$32;
var getPrototypeOf$22 = parent$b2;
var getPrototypeOf$12 = getPrototypeOf$22;
function _getPrototypeOf2(o) {
  _getPrototypeOf2 = setPrototypeOf2 ? getPrototypeOf$12 : function _getPrototypeOf3(o2) {
    return o2.__proto__ || getPrototypeOf$12(o2);
  };
  return _getPrototypeOf2(o);
}
var NodeBase = function() {
  function NodeBase2(options2, body, labelModule) {
    _classCallCheck2(this, NodeBase2);
    this.body = body;
    this.labelModule = labelModule;
    this.setOptions(options2);
    this.top = void 0;
    this.left = void 0;
    this.height = void 0;
    this.width = void 0;
    this.radius = void 0;
    this.margin = void 0;
    this.refreshNeeded = true;
    this.boundingBox = {
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    };
  }
  _createClass2(NodeBase2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      this.options = options2;
    }
  }, {
    key: "_setMargins",
    value: function _setMargins(labelModule) {
      this.margin = {};
      if (this.options.margin) {
        if (_typeof2(this.options.margin) == "object") {
          this.margin.top = this.options.margin.top;
          this.margin.right = this.options.margin.right;
          this.margin.bottom = this.options.margin.bottom;
          this.margin.left = this.options.margin.left;
        } else {
          this.margin.top = this.options.margin;
          this.margin.right = this.options.margin;
          this.margin.bottom = this.options.margin;
          this.margin.left = this.options.margin;
        }
      }
      labelModule.adjustSizes(this.margin);
    }
  }, {
    key: "_distanceToBorder",
    value: function _distanceToBorder(ctx, angle) {
      var borderWidth = this.options.borderWidth;
      if (ctx) {
        this.resize(ctx);
      }
      return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
    }
  }, {
    key: "enableShadow",
    value: function enableShadow(ctx, values5) {
      if (values5.shadow) {
        ctx.shadowColor = values5.shadowColor;
        ctx.shadowBlur = values5.shadowSize;
        ctx.shadowOffsetX = values5.shadowX;
        ctx.shadowOffsetY = values5.shadowY;
      }
    }
  }, {
    key: "disableShadow",
    value: function disableShadow(ctx, values5) {
      if (values5.shadow) {
        ctx.shadowColor = "rgba(0,0,0,0)";
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
      }
    }
  }, {
    key: "enableBorderDashes",
    value: function enableBorderDashes(ctx, values5) {
      if (values5.borderDashes !== false) {
        if (ctx.setLineDash !== void 0) {
          var dashes = values5.borderDashes;
          if (dashes === true) {
            dashes = [5, 15];
          }
          ctx.setLineDash(dashes);
        } else {
          console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
          this.options.shapeProperties.borderDashes = false;
          values5.borderDashes = false;
        }
      }
    }
  }, {
    key: "disableBorderDashes",
    value: function disableBorderDashes(ctx, values5) {
      if (values5.borderDashes !== false) {
        if (ctx.setLineDash !== void 0) {
          ctx.setLineDash([0]);
        } else {
          console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
          this.options.shapeProperties.borderDashes = false;
          values5.borderDashes = false;
        }
      }
    }
  }, {
    key: "needsRefresh",
    value: function needsRefresh(selected, hover) {
      if (this.refreshNeeded === true) {
        this.refreshNeeded = false;
        return true;
      }
      return this.width === void 0 || this.labelModule.differentState(selected, hover);
    }
  }, {
    key: "initContextForDraw",
    value: function initContextForDraw(ctx, values5) {
      var borderWidth = values5.borderWidth / this.body.view.scale;
      ctx.lineWidth = Math.min(this.width, borderWidth);
      ctx.strokeStyle = values5.borderColor;
      ctx.fillStyle = values5.color;
    }
  }, {
    key: "performStroke",
    value: function performStroke(ctx, values5) {
      var borderWidth = values5.borderWidth / this.body.view.scale;
      ctx.save();
      if (borderWidth > 0) {
        this.enableBorderDashes(ctx, values5);
        ctx.stroke();
        this.disableBorderDashes(ctx, values5);
      }
      ctx.restore();
    }
  }, {
    key: "performFill",
    value: function performFill(ctx, values5) {
      ctx.save();
      ctx.fillStyle = values5.color;
      this.enableShadow(ctx, values5);
      fill4(ctx).call(ctx);
      this.disableShadow(ctx, values5);
      ctx.restore();
      this.performStroke(ctx, values5);
    }
  }, {
    key: "_addBoundingBoxMargin",
    value: function _addBoundingBoxMargin(margin) {
      this.boundingBox.left -= margin;
      this.boundingBox.top -= margin;
      this.boundingBox.bottom += margin;
      this.boundingBox.right += margin;
    }
  }, {
    key: "_updateBoundingBox",
    value: function _updateBoundingBox(x, y, ctx, selected, hover) {
      if (ctx !== void 0) {
        this.resize(ctx, selected, hover);
      }
      this.left = x - this.width / 2;
      this.top = y - this.height / 2;
      this.boundingBox.left = this.left;
      this.boundingBox.top = this.top;
      this.boundingBox.bottom = this.top + this.height;
      this.boundingBox.right = this.left + this.width;
    }
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x, y, ctx, selected, hover) {
      this._updateBoundingBox(x, y, ctx, selected, hover);
    }
  }, {
    key: "getDimensionsFromLabel",
    value: function getDimensionsFromLabel(ctx, selected, hover) {
      this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
      var width = this.textSize.width;
      var height = this.textSize.height;
      var DEFAULT_SIZE = 14;
      if (width === 0) {
        width = DEFAULT_SIZE;
        height = DEFAULT_SIZE;
      }
      return {
        width,
        height
      };
    }
  }]);
  return NodeBase2;
}();
function _createSuper$s(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$s();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$s() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Box$1 = function(_NodeBase) {
  _inherits2(Box2, _NodeBase);
  var _super = _createSuper$s(Box2);
  function Box2(options2, body, labelModule) {
    var _this;
    _classCallCheck2(this, Box2);
    _this = _super.call(this, options2, body, labelModule);
    _this._setMargins(labelModule);
    return _this;
  }
  _createClass2(Box2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      if (this.needsRefresh(selected, hover)) {
        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
        this.width = dimensions.width + this.margin.right + this.margin.left;
        this.height = dimensions.height + this.margin.top + this.margin.bottom;
        this.radius = this.width / 2;
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      this.resize(ctx, selected, hover);
      this.left = x - this.width / 2;
      this.top = y - this.height / 2;
      this.initContextForDraw(ctx, values5);
      drawRoundRect(ctx, this.left, this.top, this.width, this.height, values5.borderRadius);
      this.performFill(ctx, values5);
      this.updateBoundingBox(x, y, ctx, selected, hover);
      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
    }
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x, y, ctx, selected, hover) {
      this._updateBoundingBox(x, y, ctx, selected, hover);
      var borderRadius = this.options.shapeProperties.borderRadius;
      this._addBoundingBoxMargin(borderRadius);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      if (ctx) {
        this.resize(ctx);
      }
      var borderWidth = this.options.borderWidth;
      return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
    }
  }]);
  return Box2;
}(NodeBase);
function _createSuper$r(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$r();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$r() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var CircleImageBase = function(_NodeBase) {
  _inherits2(CircleImageBase2, _NodeBase);
  var _super = _createSuper$r(CircleImageBase2);
  function CircleImageBase2(options2, body, labelModule) {
    var _this;
    _classCallCheck2(this, CircleImageBase2);
    _this = _super.call(this, options2, body, labelModule);
    _this.labelOffset = 0;
    _this.selected = false;
    return _this;
  }
  _createClass2(CircleImageBase2, [{
    key: "setOptions",
    value: function setOptions(options2, imageObj, imageObjAlt) {
      this.options = options2;
      if (!(imageObj === void 0 && imageObjAlt === void 0)) {
        this.setImages(imageObj, imageObjAlt);
      }
    }
  }, {
    key: "setImages",
    value: function setImages(imageObj, imageObjAlt) {
      if (imageObjAlt && this.selected) {
        this.imageObj = imageObjAlt;
        this.imageObjAlt = imageObj;
      } else {
        this.imageObj = imageObj;
        this.imageObjAlt = imageObjAlt;
      }
    }
  }, {
    key: "switchImages",
    value: function switchImages(selected) {
      var selection_changed = selected && !this.selected || !selected && this.selected;
      this.selected = selected;
      if (this.imageObjAlt !== void 0 && selection_changed) {
        var imageTmp = this.imageObj;
        this.imageObj = this.imageObjAlt;
        this.imageObjAlt = imageTmp;
      }
    }
  }, {
    key: "_getImagePadding",
    value: function _getImagePadding() {
      var imgPadding = {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
      if (this.options.imagePadding) {
        var optImgPadding = this.options.imagePadding;
        if (_typeof2(optImgPadding) == "object") {
          imgPadding.top = optImgPadding.top;
          imgPadding.right = optImgPadding.right;
          imgPadding.bottom = optImgPadding.bottom;
          imgPadding.left = optImgPadding.left;
        } else {
          imgPadding.top = optImgPadding;
          imgPadding.right = optImgPadding;
          imgPadding.bottom = optImgPadding;
          imgPadding.left = optImgPadding;
        }
      }
      return imgPadding;
    }
  }, {
    key: "_resizeImage",
    value: function _resizeImage() {
      var width, height;
      if (this.options.shapeProperties.useImageSize === false) {
        var ratio_width = 1;
        var ratio_height = 1;
        if (this.imageObj.width && this.imageObj.height) {
          if (this.imageObj.width > this.imageObj.height) {
            ratio_width = this.imageObj.width / this.imageObj.height;
          } else {
            ratio_height = this.imageObj.height / this.imageObj.width;
          }
        }
        width = this.options.size * 2 * ratio_width;
        height = this.options.size * 2 * ratio_height;
      } else {
        var imgPadding = this._getImagePadding();
        width = this.imageObj.width + imgPadding.left + imgPadding.right;
        height = this.imageObj.height + imgPadding.top + imgPadding.bottom;
      }
      this.width = width;
      this.height = height;
      this.radius = 0.5 * this.width;
    }
  }, {
    key: "_drawRawCircle",
    value: function _drawRawCircle(ctx, x, y, values5) {
      this.initContextForDraw(ctx, values5);
      drawCircle(ctx, x, y, values5.size);
      this.performFill(ctx, values5);
    }
  }, {
    key: "_drawImageAtPosition",
    value: function _drawImageAtPosition(ctx, values5) {
      if (this.imageObj.width != 0) {
        ctx.globalAlpha = values5.opacity !== void 0 ? values5.opacity : 1;
        this.enableShadow(ctx, values5);
        var factor = 1;
        if (this.options.shapeProperties.interpolation === true) {
          factor = this.imageObj.width / this.width / this.body.view.scale;
        }
        var imgPadding = this._getImagePadding();
        var imgPosLeft = this.left + imgPadding.left;
        var imgPosTop = this.top + imgPadding.top;
        var imgWidth = this.width - imgPadding.left - imgPadding.right;
        var imgHeight = this.height - imgPadding.top - imgPadding.bottom;
        this.imageObj.drawImageAtPosition(ctx, factor, imgPosLeft, imgPosTop, imgWidth, imgHeight);
        this.disableShadow(ctx, values5);
      }
    }
  }, {
    key: "_drawImageLabel",
    value: function _drawImageLabel(ctx, x, y, selected, hover) {
      var offset = 0;
      if (this.height !== void 0) {
        offset = this.height * 0.5;
        var labelDimensions = this.labelModule.getTextSize(ctx, selected, hover);
        if (labelDimensions.lineCount >= 1) {
          offset += labelDimensions.height / 2;
        }
      }
      var yLabel = y + offset;
      if (this.options.label) {
        this.labelOffset = offset;
      }
      this.labelModule.draw(ctx, x, yLabel, selected, hover, "hanging");
    }
  }]);
  return CircleImageBase2;
}(NodeBase);
function _createSuper$q(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$q();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$q() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Circle$1 = function(_CircleImageBase) {
  _inherits2(Circle2, _CircleImageBase);
  var _super = _createSuper$q(Circle2);
  function Circle2(options2, body, labelModule) {
    var _this;
    _classCallCheck2(this, Circle2);
    _this = _super.call(this, options2, body, labelModule);
    _this._setMargins(labelModule);
    return _this;
  }
  _createClass2(Circle2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      if (this.needsRefresh(selected, hover)) {
        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
        var diameter = Math.max(dimensions.width + this.margin.right + this.margin.left, dimensions.height + this.margin.top + this.margin.bottom);
        this.options.size = diameter / 2;
        this.width = diameter;
        this.height = diameter;
        this.radius = this.width / 2;
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      this.resize(ctx, selected, hover);
      this.left = x - this.width / 2;
      this.top = y - this.height / 2;
      this._drawRawCircle(ctx, x, y, values5);
      this.updateBoundingBox(x, y);
      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, y, selected, hover);
    }
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x, y) {
      this.boundingBox.top = y - this.options.size;
      this.boundingBox.left = x - this.options.size;
      this.boundingBox.right = x + this.options.size;
      this.boundingBox.bottom = y + this.options.size;
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx) {
      if (ctx) {
        this.resize(ctx);
      }
      return this.width * 0.5;
    }
  }]);
  return Circle2;
}(CircleImageBase);
function _createSuper$p(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$p();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$p() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var CircularImage = function(_CircleImageBase) {
  _inherits2(CircularImage2, _CircleImageBase);
  var _super = _createSuper$p(CircularImage2);
  function CircularImage2(options2, body, labelModule, imageObj, imageObjAlt) {
    var _this;
    _classCallCheck2(this, CircularImage2);
    _this = _super.call(this, options2, body, labelModule);
    _this.setImages(imageObj, imageObjAlt);
    return _this;
  }
  _createClass2(CircularImage2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      var imageAbsent = this.imageObj.src === void 0 || this.imageObj.width === void 0 || this.imageObj.height === void 0;
      if (imageAbsent) {
        var diameter = this.options.size * 2;
        this.width = diameter;
        this.height = diameter;
        this.radius = 0.5 * this.width;
        return;
      }
      if (this.needsRefresh(selected, hover)) {
        this._resizeImage();
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      this.switchImages(selected);
      this.resize();
      var labelX = x, labelY = y;
      if (this.options.shapeProperties.coordinateOrigin === "top-left") {
        this.left = x;
        this.top = y;
        labelX += this.width / 2;
        labelY += this.height / 2;
      } else {
        this.left = x - this.width / 2;
        this.top = y - this.height / 2;
      }
      this._drawRawCircle(ctx, labelX, labelY, values5);
      ctx.save();
      ctx.clip();
      this._drawImageAtPosition(ctx, values5);
      ctx.restore();
      this._drawImageLabel(ctx, labelX, labelY, selected, hover);
      this.updateBoundingBox(x, y);
    }
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x, y) {
      if (this.options.shapeProperties.coordinateOrigin === "top-left") {
        this.boundingBox.top = y;
        this.boundingBox.left = x;
        this.boundingBox.right = x + this.options.size * 2;
        this.boundingBox.bottom = y + this.options.size * 2;
      } else {
        this.boundingBox.top = y - this.options.size;
        this.boundingBox.left = x - this.options.size;
        this.boundingBox.right = x + this.options.size;
        this.boundingBox.bottom = y + this.options.size;
      }
      this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
      this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
      this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx) {
      if (ctx) {
        this.resize(ctx);
      }
      return this.width * 0.5;
    }
  }]);
  return CircularImage2;
}(CircleImageBase);
function _createSuper$o(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$o();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$o() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ShapeBase = function(_NodeBase) {
  _inherits2(ShapeBase2, _NodeBase);
  var _super = _createSuper$o(ShapeBase2);
  function ShapeBase2(options2, body, labelModule) {
    _classCallCheck2(this, ShapeBase2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(ShapeBase2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      var values5 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
        size: this.options.size
      };
      if (this.needsRefresh(selected, hover)) {
        var _this$customSizeWidth, _this$customSizeHeigh;
        this.labelModule.getTextSize(ctx, selected, hover);
        var size = 2 * values5.size;
        this.width = (_this$customSizeWidth = this.customSizeWidth) !== null && _this$customSizeWidth !== void 0 ? _this$customSizeWidth : size;
        this.height = (_this$customSizeHeigh = this.customSizeHeight) !== null && _this$customSizeHeigh !== void 0 ? _this$customSizeHeigh : size;
        this.radius = 0.5 * this.width;
      }
    }
  }, {
    key: "_drawShape",
    value: function _drawShape(ctx, shape, sizeMultiplier, x, y, selected, hover, values5) {
      var _this = this;
      this.resize(ctx, selected, hover, values5);
      this.left = x - this.width / 2;
      this.top = y - this.height / 2;
      this.initContextForDraw(ctx, values5);
      getShape(shape)(ctx, x, y, values5.size);
      this.performFill(ctx, values5);
      if (this.options.icon !== void 0) {
        if (this.options.icon.code !== void 0) {
          ctx.font = (selected ? "bold " : "") + this.height / 2 + "px " + (this.options.icon.face || "FontAwesome");
          ctx.fillStyle = this.options.icon.color || "black";
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.fillText(this.options.icon.code, x, y);
        }
      }
      return {
        drawExternalLabel: function drawExternalLabel() {
          if (_this.options.label !== void 0) {
            _this.labelModule.calculateLabelSize(ctx, selected, hover, x, y, "hanging");
            var yLabel = y + 0.5 * _this.height + 0.5 * _this.labelModule.size.height;
            _this.labelModule.draw(ctx, x, yLabel, selected, hover, "hanging");
          }
          _this.updateBoundingBox(x, y);
        }
      };
    }
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x, y) {
      this.boundingBox.top = y - this.options.size;
      this.boundingBox.left = x - this.options.size;
      this.boundingBox.right = x + this.options.size;
      this.boundingBox.bottom = y + this.options.size;
      if (this.options.label !== void 0 && this.labelModule.size.width > 0) {
        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height);
      }
    }
  }]);
  return ShapeBase2;
}(NodeBase);
function ownKeys$32(object2, enumerableOnly) {
  var keys$13 = keys6(object2);
  if (getOwnPropertySymbols6) {
    var symbols = getOwnPropertySymbols6(object2);
    enumerableOnly && (symbols = filter4(symbols).call(symbols, function(sym) {
      return getOwnPropertyDescriptor$32(object2, sym).enumerable;
    })), keys$13.push.apply(keys$13, symbols);
  }
  return keys$13;
}
function _objectSpread$3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var _context, _context2;
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? forEach$22(_context = ownKeys$32(Object(source), true)).call(_context, function(key) {
      _defineProperty2(target, key, source[key]);
    }) : getOwnPropertyDescriptors4 ? defineProperties8(target, getOwnPropertyDescriptors4(source)) : forEach$22(_context2 = ownKeys$32(Object(source))).call(_context2, function(key) {
      defineProperty$62(target, key, getOwnPropertyDescriptor$32(source, key));
    });
  }
  return target;
}
function _createSuper$n(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$n();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$n() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var CustomShape = function(_ShapeBase) {
  _inherits2(CustomShape2, _ShapeBase);
  var _super = _createSuper$n(CustomShape2);
  function CustomShape2(options2, body, labelModule, ctxRenderer) {
    var _this;
    _classCallCheck2(this, CustomShape2);
    _this = _super.call(this, options2, body, labelModule, ctxRenderer);
    _this.ctxRenderer = ctxRenderer;
    return _this;
  }
  _createClass2(CustomShape2, [{
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      this.resize(ctx, selected, hover, values5);
      this.left = x - this.width / 2;
      this.top = y - this.height / 2;
      ctx.save();
      var drawLater = this.ctxRenderer({
        ctx,
        id: this.options.id,
        x,
        y,
        state: {
          selected,
          hover
        },
        style: _objectSpread$3({}, values5),
        label: this.options.label
      });
      if (drawLater.drawNode != null) {
        drawLater.drawNode();
      }
      ctx.restore();
      if (drawLater.drawExternalLabel) {
        var drawExternalLabel = drawLater.drawExternalLabel;
        drawLater.drawExternalLabel = function() {
          ctx.save();
          drawExternalLabel();
          ctx.restore();
        };
      }
      if (drawLater.nodeDimensions) {
        this.customSizeWidth = drawLater.nodeDimensions.width;
        this.customSizeHeight = drawLater.nodeDimensions.height;
      }
      return drawLater;
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return CustomShape2;
}(ShapeBase);
function _createSuper$m(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$m();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$m() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Database = function(_NodeBase) {
  _inherits2(Database2, _NodeBase);
  var _super = _createSuper$m(Database2);
  function Database2(options2, body, labelModule) {
    var _this;
    _classCallCheck2(this, Database2);
    _this = _super.call(this, options2, body, labelModule);
    _this._setMargins(labelModule);
    return _this;
  }
  _createClass2(Database2, [{
    key: "resize",
    value: function resize(ctx, selected, hover) {
      if (this.needsRefresh(selected, hover)) {
        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
        var size = dimensions.width + this.margin.right + this.margin.left;
        this.width = size;
        this.height = size;
        this.radius = this.width / 2;
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      this.resize(ctx, selected, hover);
      this.left = x - this.width / 2;
      this.top = y - this.height / 2;
      this.initContextForDraw(ctx, values5);
      drawDatabase(ctx, x - this.width / 2, y - this.height / 2, this.width, this.height);
      this.performFill(ctx, values5);
      this.updateBoundingBox(x, y, ctx, selected, hover);
      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Database2;
}(NodeBase);
function _createSuper$l(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$l();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$l() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Diamond$1 = function(_ShapeBase) {
  _inherits2(Diamond2, _ShapeBase);
  var _super = _createSuper$l(Diamond2);
  function Diamond2(options2, body, labelModule) {
    _classCallCheck2(this, Diamond2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(Diamond2, [{
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      return this._drawShape(ctx, "diamond", 4, x, y, selected, hover, values5);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Diamond2;
}(ShapeBase);
function _createSuper$k(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$k();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$k() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Dot = function(_ShapeBase) {
  _inherits2(Dot2, _ShapeBase);
  var _super = _createSuper$k(Dot2);
  function Dot2(options2, body, labelModule) {
    _classCallCheck2(this, Dot2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(Dot2, [{
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      return this._drawShape(ctx, "circle", 2, x, y, selected, hover, values5);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx) {
      if (ctx) {
        this.resize(ctx);
      }
      return this.options.size;
    }
  }]);
  return Dot2;
}(ShapeBase);
function _createSuper$j(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$j();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$j() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Ellipse = function(_NodeBase) {
  _inherits2(Ellipse2, _NodeBase);
  var _super = _createSuper$j(Ellipse2);
  function Ellipse2(options2, body, labelModule) {
    _classCallCheck2(this, Ellipse2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(Ellipse2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      if (this.needsRefresh(selected, hover)) {
        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
        this.height = dimensions.height * 2;
        this.width = dimensions.width + dimensions.height;
        this.radius = 0.5 * this.width;
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      this.resize(ctx, selected, hover);
      this.left = x - this.width * 0.5;
      this.top = y - this.height * 0.5;
      this.initContextForDraw(ctx, values5);
      drawEllipse(ctx, this.left, this.top, this.width, this.height);
      this.performFill(ctx, values5);
      this.updateBoundingBox(x, y, ctx, selected, hover);
      this.labelModule.draw(ctx, x, y, selected, hover);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      if (ctx) {
        this.resize(ctx);
      }
      var a = this.width * 0.5;
      var b = this.height * 0.5;
      var w = Math.sin(angle) * a;
      var h = Math.cos(angle) * b;
      return a * b / Math.sqrt(w * w + h * h);
    }
  }]);
  return Ellipse2;
}(NodeBase);
function _createSuper$i(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$i();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$i() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Icon = function(_NodeBase) {
  _inherits2(Icon2, _NodeBase);
  var _super = _createSuper$i(Icon2);
  function Icon2(options2, body, labelModule) {
    var _this;
    _classCallCheck2(this, Icon2);
    _this = _super.call(this, options2, body, labelModule);
    _this._setMargins(labelModule);
    return _this;
  }
  _createClass2(Icon2, [{
    key: "resize",
    value: function resize(ctx, selected, hover) {
      if (this.needsRefresh(selected, hover)) {
        this.iconSize = {
          width: Number(this.options.icon.size),
          height: Number(this.options.icon.size)
        };
        this.width = this.iconSize.width + this.margin.right + this.margin.left;
        this.height = this.iconSize.height + this.margin.top + this.margin.bottom;
        this.radius = 0.5 * this.width;
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      var _this2 = this;
      this.resize(ctx, selected, hover);
      this.options.icon.size = this.options.icon.size || 50;
      this.left = x - this.width / 2;
      this.top = y - this.height / 2;
      this._icon(ctx, x, y, selected, hover, values5);
      return {
        drawExternalLabel: function drawExternalLabel() {
          if (_this2.options.label !== void 0) {
            var iconTextSpacing = 5;
            _this2.labelModule.draw(ctx, _this2.left + _this2.iconSize.width / 2 + _this2.margin.left, y + _this2.height / 2 + iconTextSpacing, selected);
          }
          _this2.updateBoundingBox(x, y);
        }
      };
    }
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x, y) {
      this.boundingBox.top = y - this.options.icon.size * 0.5;
      this.boundingBox.left = x - this.options.icon.size * 0.5;
      this.boundingBox.right = x + this.options.icon.size * 0.5;
      this.boundingBox.bottom = y + this.options.icon.size * 0.5;
      if (this.options.label !== void 0 && this.labelModule.size.width > 0) {
        var iconTextSpacing = 5;
        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + iconTextSpacing);
      }
    }
  }, {
    key: "_icon",
    value: function _icon(ctx, x, y, selected, hover, values5) {
      var iconSize = Number(this.options.icon.size);
      if (this.options.icon.code !== void 0) {
        ctx.font = [
          this.options.icon.weight != null ? this.options.icon.weight : selected ? "bold" : "",
          (this.options.icon.weight != null && selected ? 5 : 0) + iconSize + "px",
          this.options.icon.face
        ].join(" ");
        ctx.fillStyle = this.options.icon.color || "black";
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        this.enableShadow(ctx, values5);
        ctx.fillText(this.options.icon.code, x, y);
        this.disableShadow(ctx, values5);
      } else {
        console.error("When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.");
      }
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Icon2;
}(NodeBase);
function _createSuper$h(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$h();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$h() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Image$2 = function(_CircleImageBase) {
  _inherits2(Image2, _CircleImageBase);
  var _super = _createSuper$h(Image2);
  function Image2(options2, body, labelModule, imageObj, imageObjAlt) {
    var _this;
    _classCallCheck2(this, Image2);
    _this = _super.call(this, options2, body, labelModule);
    _this.setImages(imageObj, imageObjAlt);
    return _this;
  }
  _createClass2(Image2, [{
    key: "resize",
    value: function resize(ctx) {
      var selected = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.selected;
      var hover = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hover;
      var imageAbsent = this.imageObj.src === void 0 || this.imageObj.width === void 0 || this.imageObj.height === void 0;
      if (imageAbsent) {
        var side = this.options.size * 2;
        this.width = side;
        this.height = side;
        return;
      }
      if (this.needsRefresh(selected, hover)) {
        this._resizeImage();
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      ctx.save();
      this.switchImages(selected);
      this.resize();
      var labelX = x, labelY = y;
      if (this.options.shapeProperties.coordinateOrigin === "top-left") {
        this.left = x;
        this.top = y;
        labelX += this.width / 2;
        labelY += this.height / 2;
      } else {
        this.left = x - this.width / 2;
        this.top = y - this.height / 2;
      }
      if (this.options.shapeProperties.useBorderWithImage === true) {
        var neutralborderWidth = this.options.borderWidth;
        var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;
        var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;
        ctx.lineWidth = Math.min(this.width, borderWidth);
        ctx.beginPath();
        var strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;
        var fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;
        if (values5.opacity !== void 0) {
          strokeStyle = overrideOpacity(strokeStyle, values5.opacity);
          fillStyle = overrideOpacity(fillStyle, values5.opacity);
        }
        ctx.strokeStyle = strokeStyle;
        ctx.fillStyle = fillStyle;
        ctx.rect(this.left - 0.5 * ctx.lineWidth, this.top - 0.5 * ctx.lineWidth, this.width + ctx.lineWidth, this.height + ctx.lineWidth);
        fill4(ctx).call(ctx);
        this.performStroke(ctx, values5);
        ctx.closePath();
      }
      this._drawImageAtPosition(ctx, values5);
      this._drawImageLabel(ctx, labelX, labelY, selected, hover);
      this.updateBoundingBox(x, y);
      ctx.restore();
    }
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(x, y) {
      this.resize();
      if (this.options.shapeProperties.coordinateOrigin === "top-left") {
        this.left = x;
        this.top = y;
      } else {
        this.left = x - this.width / 2;
        this.top = y - this.height / 2;
      }
      this.boundingBox.left = this.left;
      this.boundingBox.top = this.top;
      this.boundingBox.bottom = this.top + this.height;
      this.boundingBox.right = this.left + this.width;
      if (this.options.label !== void 0 && this.labelModule.size.width > 0) {
        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
      }
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Image2;
}(CircleImageBase);
function _createSuper$g(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$g();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$g() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Square = function(_ShapeBase) {
  _inherits2(Square2, _ShapeBase);
  var _super = _createSuper$g(Square2);
  function Square2(options2, body, labelModule) {
    _classCallCheck2(this, Square2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(Square2, [{
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      return this._drawShape(ctx, "square", 2, x, y, selected, hover, values5);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Square2;
}(ShapeBase);
function _createSuper$f(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$f();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$f() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Hexagon = function(_ShapeBase) {
  _inherits2(Hexagon2, _ShapeBase);
  var _super = _createSuper$f(Hexagon2);
  function Hexagon2(options2, body, labelModule) {
    _classCallCheck2(this, Hexagon2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(Hexagon2, [{
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      return this._drawShape(ctx, "hexagon", 4, x, y, selected, hover, values5);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Hexagon2;
}(ShapeBase);
function _createSuper$e(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$e();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$e() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Star = function(_ShapeBase) {
  _inherits2(Star2, _ShapeBase);
  var _super = _createSuper$e(Star2);
  function Star2(options2, body, labelModule) {
    _classCallCheck2(this, Star2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(Star2, [{
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      return this._drawShape(ctx, "star", 4, x, y, selected, hover, values5);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Star2;
}(ShapeBase);
function _createSuper$d(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$d();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$d() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Text = function(_NodeBase) {
  _inherits2(Text2, _NodeBase);
  var _super = _createSuper$d(Text2);
  function Text2(options2, body, labelModule) {
    var _this;
    _classCallCheck2(this, Text2);
    _this = _super.call(this, options2, body, labelModule);
    _this._setMargins(labelModule);
    return _this;
  }
  _createClass2(Text2, [{
    key: "resize",
    value: function resize(ctx, selected, hover) {
      if (this.needsRefresh(selected, hover)) {
        this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
        this.width = this.textSize.width + this.margin.right + this.margin.left;
        this.height = this.textSize.height + this.margin.top + this.margin.bottom;
        this.radius = 0.5 * this.width;
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      this.resize(ctx, selected, hover);
      this.left = x - this.width / 2;
      this.top = y - this.height / 2;
      this.enableShadow(ctx, values5);
      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
      this.disableShadow(ctx, values5);
      this.updateBoundingBox(x, y, ctx, selected, hover);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Text2;
}(NodeBase);
function _createSuper$c(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$c();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$c() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Triangle$1 = function(_ShapeBase) {
  _inherits2(Triangle2, _ShapeBase);
  var _super = _createSuper$c(Triangle2);
  function Triangle2(options2, body, labelModule) {
    _classCallCheck2(this, Triangle2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(Triangle2, [{
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      return this._drawShape(ctx, "triangle", 3, x, y, selected, hover, values5);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return Triangle2;
}(ShapeBase);
function _createSuper$b(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$b();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$b() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var TriangleDown = function(_ShapeBase) {
  _inherits2(TriangleDown2, _ShapeBase);
  var _super = _createSuper$b(TriangleDown2);
  function TriangleDown2(options2, body, labelModule) {
    _classCallCheck2(this, TriangleDown2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(TriangleDown2, [{
    key: "draw",
    value: function draw(ctx, x, y, selected, hover, values5) {
      return this._drawShape(ctx, "triangleDown", 3, x, y, selected, hover, values5);
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this._distanceToBorder(ctx, angle);
    }
  }]);
  return TriangleDown2;
}(ShapeBase);
function ownKeys$22(object2, enumerableOnly) {
  var keys$13 = keys6(object2);
  if (getOwnPropertySymbols6) {
    var symbols = getOwnPropertySymbols6(object2);
    enumerableOnly && (symbols = filter4(symbols).call(symbols, function(sym) {
      return getOwnPropertyDescriptor$32(object2, sym).enumerable;
    })), keys$13.push.apply(keys$13, symbols);
  }
  return keys$13;
}
function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var _context5, _context6;
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? forEach$22(_context5 = ownKeys$22(Object(source), true)).call(_context5, function(key) {
      _defineProperty2(target, key, source[key]);
    }) : getOwnPropertyDescriptors4 ? defineProperties8(target, getOwnPropertyDescriptors4(source)) : forEach$22(_context6 = ownKeys$22(Object(source))).call(_context6, function(key) {
      defineProperty$62(target, key, getOwnPropertyDescriptor$32(source, key));
    });
  }
  return target;
}
var Node = function() {
  function Node2(options2, body, imagelist, grouplist, globalOptions, defaultOptions) {
    _classCallCheck2(this, Node2);
    this.options = bridgeObject(globalOptions);
    this.globalOptions = globalOptions;
    this.defaultOptions = defaultOptions;
    this.body = body;
    this.edges = [];
    this.id = void 0;
    this.imagelist = imagelist;
    this.grouplist = grouplist;
    this.x = void 0;
    this.y = void 0;
    this.baseSize = this.options.size;
    this.baseFontSize = this.options.font.size;
    this.predefinedPosition = false;
    this.selected = false;
    this.hover = false;
    this.labelModule = new Label(this.body, this.options, false);
    this.setOptions(options2);
  }
  _createClass2(Node2, [{
    key: "attachEdge",
    value: function attachEdge(edge) {
      var _context;
      if (indexOf4(_context = this.edges).call(_context, edge) === -1) {
        this.edges.push(edge);
      }
    }
  }, {
    key: "detachEdge",
    value: function detachEdge(edge) {
      var _context2;
      var index2 = indexOf4(_context2 = this.edges).call(_context2, edge);
      if (index2 != -1) {
        var _context3;
        splice$12(_context3 = this.edges).call(_context3, index2, 1);
      }
    }
  }, {
    key: "setOptions",
    value: function setOptions(options2) {
      var currentShape = this.options.shape;
      if (!options2) {
        return;
      }
      if (typeof options2.color !== "undefined") {
        this._localColor = options2.color;
      }
      if (options2.id !== void 0) {
        this.id = options2.id;
      }
      if (this.id === void 0) {
        throw new Error("Node must have an id");
      }
      Node2.checkMass(options2, this.id);
      if (options2.x !== void 0) {
        if (options2.x === null) {
          this.x = void 0;
          this.predefinedPosition = false;
        } else {
          this.x = _parseInt(options2.x);
          this.predefinedPosition = true;
        }
      }
      if (options2.y !== void 0) {
        if (options2.y === null) {
          this.y = void 0;
          this.predefinedPosition = false;
        } else {
          this.y = _parseInt(options2.y);
          this.predefinedPosition = true;
        }
      }
      if (options2.size !== void 0) {
        this.baseSize = options2.size;
      }
      if (options2.value !== void 0) {
        options2.value = _parseFloat(options2.value);
      }
      Node2.parseOptions(this.options, options2, true, this.globalOptions, this.grouplist);
      var pile = [options2, this.options, this.defaultOptions];
      this.chooser = choosify("node", pile);
      this._load_images();
      this.updateLabelModule(options2);
      if (options2.opacity !== void 0 && Node2.checkOpacity(options2.opacity)) {
        this.options.opacity = options2.opacity;
      }
      this.updateShape(currentShape);
      return options2.hidden !== void 0 || options2.physics !== void 0;
    }
  }, {
    key: "_load_images",
    value: function _load_images() {
      if (this.options.shape === "circularImage" || this.options.shape === "image") {
        if (this.options.image === void 0) {
          throw new Error("Option image must be defined for node type '" + this.options.shape + "'");
        }
      }
      if (this.options.image === void 0) {
        return;
      }
      if (this.imagelist === void 0) {
        throw new Error("Internal Error: No images provided");
      }
      if (typeof this.options.image === "string") {
        this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);
      } else {
        if (this.options.image.unselected === void 0) {
          throw new Error("No unselected image provided");
        }
        this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id);
        if (this.options.image.selected !== void 0) {
          this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id);
        } else {
          this.imageObjAlt = void 0;
        }
      }
    }
  }, {
    key: "getFormattingValues",
    value: function getFormattingValues() {
      var values5 = {
        color: this.options.color.background,
        opacity: this.options.opacity,
        borderWidth: this.options.borderWidth,
        borderColor: this.options.color.border,
        size: this.options.size,
        borderDashes: this.options.shapeProperties.borderDashes,
        borderRadius: this.options.shapeProperties.borderRadius,
        shadow: this.options.shadow.enabled,
        shadowColor: this.options.shadow.color,
        shadowSize: this.options.shadow.size,
        shadowX: this.options.shadow.x,
        shadowY: this.options.shadow.y
      };
      if (this.selected || this.hover) {
        if (this.chooser === true) {
          if (this.selected) {
            if (this.options.borderWidthSelected != null) {
              values5.borderWidth = this.options.borderWidthSelected;
            } else {
              values5.borderWidth *= 2;
            }
            values5.color = this.options.color.highlight.background;
            values5.borderColor = this.options.color.highlight.border;
            values5.shadow = this.options.shadow.enabled;
          } else if (this.hover) {
            values5.color = this.options.color.hover.background;
            values5.borderColor = this.options.color.hover.border;
            values5.shadow = this.options.shadow.enabled;
          }
        } else if (typeof this.chooser === "function") {
          this.chooser(values5, this.options.id, this.selected, this.hover);
          if (values5.shadow === false) {
            if (values5.shadowColor !== this.options.shadow.color || values5.shadowSize !== this.options.shadow.size || values5.shadowX !== this.options.shadow.x || values5.shadowY !== this.options.shadow.y) {
              values5.shadow = true;
            }
          }
        }
      } else {
        values5.shadow = this.options.shadow.enabled;
      }
      if (this.options.opacity !== void 0) {
        var opacity = this.options.opacity;
        values5.borderColor = overrideOpacity(values5.borderColor, opacity);
        values5.color = overrideOpacity(values5.color, opacity);
        values5.shadowColor = overrideOpacity(values5.shadowColor, opacity);
      }
      return values5;
    }
  }, {
    key: "updateLabelModule",
    value: function updateLabelModule(options2) {
      if (this.options.label === void 0 || this.options.label === null) {
        this.options.label = "";
      }
      Node2.updateGroupOptions(this.options, _objectSpread$2(_objectSpread$2({}, options2), {}, {
        color: options2 && options2.color || this._localColor || void 0
      }), this.grouplist);
      var currentGroup = this.grouplist.get(this.options.group, false);
      var pile = [
        options2,
        this.options,
        currentGroup,
        this.globalOptions,
        this.defaultOptions
      ];
      this.labelModule.update(this.options, pile);
      if (this.labelModule.baseSize !== void 0) {
        this.baseFontSize = this.labelModule.baseSize;
      }
    }
  }, {
    key: "updateShape",
    value: function updateShape(currentShape) {
      if (currentShape === this.options.shape && this.shape) {
        this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);
      } else {
        switch (this.options.shape) {
          case "box":
            this.shape = new Box$1(this.options, this.body, this.labelModule);
            break;
          case "circle":
            this.shape = new Circle$1(this.options, this.body, this.labelModule);
            break;
          case "circularImage":
            this.shape = new CircularImage(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
            break;
          case "custom":
            this.shape = new CustomShape(this.options, this.body, this.labelModule, this.options.ctxRenderer);
            break;
          case "database":
            this.shape = new Database(this.options, this.body, this.labelModule);
            break;
          case "diamond":
            this.shape = new Diamond$1(this.options, this.body, this.labelModule);
            break;
          case "dot":
            this.shape = new Dot(this.options, this.body, this.labelModule);
            break;
          case "ellipse":
            this.shape = new Ellipse(this.options, this.body, this.labelModule);
            break;
          case "icon":
            this.shape = new Icon(this.options, this.body, this.labelModule);
            break;
          case "image":
            this.shape = new Image$2(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
            break;
          case "square":
            this.shape = new Square(this.options, this.body, this.labelModule);
            break;
          case "hexagon":
            this.shape = new Hexagon(this.options, this.body, this.labelModule);
            break;
          case "star":
            this.shape = new Star(this.options, this.body, this.labelModule);
            break;
          case "text":
            this.shape = new Text(this.options, this.body, this.labelModule);
            break;
          case "triangle":
            this.shape = new Triangle$1(this.options, this.body, this.labelModule);
            break;
          case "triangleDown":
            this.shape = new TriangleDown(this.options, this.body, this.labelModule);
            break;
          default:
            this.shape = new Ellipse(this.options, this.body, this.labelModule);
            break;
        }
      }
      this.needsRefresh();
    }
  }, {
    key: "select",
    value: function select() {
      this.selected = true;
      this.needsRefresh();
    }
  }, {
    key: "unselect",
    value: function unselect() {
      this.selected = false;
      this.needsRefresh();
    }
  }, {
    key: "needsRefresh",
    value: function needsRefresh() {
      this.shape.refreshNeeded = true;
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.options.title;
    }
  }, {
    key: "distanceToBorder",
    value: function distanceToBorder(ctx, angle) {
      return this.shape.distanceToBorder(ctx, angle);
    }
  }, {
    key: "isFixed",
    value: function isFixed() {
      return this.options.fixed.x && this.options.fixed.y;
    }
  }, {
    key: "isSelected",
    value: function isSelected() {
      return this.selected;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.options.value;
    }
  }, {
    key: "getLabelSize",
    value: function getLabelSize() {
      return this.labelModule.size();
    }
  }, {
    key: "setValueRange",
    value: function setValueRange(min3, max3, total) {
      if (this.options.value !== void 0) {
        var scale = this.options.scaling.customScalingFunction(min3, max3, total, this.options.value);
        var sizeDiff = this.options.scaling.max - this.options.scaling.min;
        if (this.options.scaling.label.enabled === true) {
          var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
          this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
        }
        this.options.size = this.options.scaling.min + scale * sizeDiff;
      } else {
        this.options.size = this.baseSize;
        this.options.font.size = this.baseFontSize;
      }
      this.updateLabelModule();
    }
  }, {
    key: "draw",
    value: function draw(ctx) {
      var values5 = this.getFormattingValues();
      return this.shape.draw(ctx, this.x, this.y, this.selected, this.hover, values5) || {};
    }
  }, {
    key: "updateBoundingBox",
    value: function updateBoundingBox(ctx) {
      this.shape.updateBoundingBox(this.x, this.y, ctx);
    }
  }, {
    key: "resize",
    value: function resize(ctx) {
      var values5 = this.getFormattingValues();
      this.shape.resize(ctx, this.selected, this.hover, values5);
    }
  }, {
    key: "getItemsOnPoint",
    value: function getItemsOnPoint(point) {
      var ret = [];
      if (this.labelModule.visible()) {
        if (pointInRect(this.labelModule.getSize(), point)) {
          ret.push({
            nodeId: this.id,
            labelId: 0
          });
        }
      }
      if (pointInRect(this.shape.boundingBox, point)) {
        ret.push({
          nodeId: this.id
        });
      }
      return ret;
    }
  }, {
    key: "isOverlappingWith",
    value: function isOverlappingWith(obj) {
      return this.shape.left < obj.right && this.shape.left + this.shape.width > obj.left && this.shape.top < obj.bottom && this.shape.top + this.shape.height > obj.top;
    }
  }, {
    key: "isBoundingBoxOverlappingWith",
    value: function isBoundingBoxOverlappingWith(obj) {
      return this.shape.boundingBox.left < obj.right && this.shape.boundingBox.right > obj.left && this.shape.boundingBox.top < obj.bottom && this.shape.boundingBox.bottom > obj.top;
    }
  }], [{
    key: "checkOpacity",
    value: function checkOpacity(opacity) {
      return 0 <= opacity && opacity <= 1;
    }
  }, {
    key: "checkCoordinateOrigin",
    value: function checkCoordinateOrigin(origin) {
      return origin === void 0 || origin === "center" || origin === "top-left";
    }
  }, {
    key: "updateGroupOptions",
    value: function updateGroupOptions(parentOptions, newOptions, groupList) {
      var _context4;
      if (groupList === void 0)
        return;
      var group = parentOptions.group;
      if (newOptions !== void 0 && newOptions.group !== void 0 && group !== newOptions.group) {
        throw new Error("updateGroupOptions: group values in options don't match.");
      }
      var hasGroup = typeof group === "number" || typeof group === "string" && group != "";
      if (!hasGroup)
        return;
      var groupObj = groupList.get(group);
      if (groupObj.opacity !== void 0 && newOptions.opacity === void 0) {
        if (!Node2.checkOpacity(groupObj.opacity)) {
          console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + groupObj.opacity);
          groupObj.opacity = void 0;
        }
      }
      var skipProperties = filter4(_context4 = getOwnPropertyNames8(newOptions)).call(_context4, function(p) {
        return newOptions[p] != null;
      });
      skipProperties.push("font");
      selectiveNotDeepExtend(skipProperties, parentOptions, groupObj);
      parentOptions.color = parseColor(parentOptions.color);
    }
  }, {
    key: "parseOptions",
    value: function parseOptions(parentOptions, newOptions) {
      var allowDeletion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var globalOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      var groupList = arguments.length > 4 ? arguments[4] : void 0;
      var fields = ["color", "fixed", "shadow"];
      selectiveNotDeepExtend(fields, parentOptions, newOptions, allowDeletion);
      Node2.checkMass(newOptions);
      if (parentOptions.opacity !== void 0) {
        if (!Node2.checkOpacity(parentOptions.opacity)) {
          console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + parentOptions.opacity);
          parentOptions.opacity = void 0;
        }
      }
      if (newOptions.opacity !== void 0) {
        if (!Node2.checkOpacity(newOptions.opacity)) {
          console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + newOptions.opacity);
          newOptions.opacity = void 0;
        }
      }
      if (newOptions.shapeProperties && !Node2.checkCoordinateOrigin(newOptions.shapeProperties.coordinateOrigin)) {
        console.error("Invalid option for node coordinateOrigin, found: " + newOptions.shapeProperties.coordinateOrigin);
      }
      mergeOptions(parentOptions, newOptions, "shadow", globalOptions);
      if (newOptions.color !== void 0 && newOptions.color !== null) {
        var parsedColor = parseColor(newOptions.color);
        fillIfDefined(parentOptions.color, parsedColor);
      } else if (allowDeletion === true && newOptions.color === null) {
        parentOptions.color = bridgeObject(globalOptions.color);
      }
      if (newOptions.fixed !== void 0 && newOptions.fixed !== null) {
        if (typeof newOptions.fixed === "boolean") {
          parentOptions.fixed.x = newOptions.fixed;
          parentOptions.fixed.y = newOptions.fixed;
        } else {
          if (newOptions.fixed.x !== void 0 && typeof newOptions.fixed.x === "boolean") {
            parentOptions.fixed.x = newOptions.fixed.x;
          }
          if (newOptions.fixed.y !== void 0 && typeof newOptions.fixed.y === "boolean") {
            parentOptions.fixed.y = newOptions.fixed.y;
          }
        }
      }
      if (allowDeletion === true && newOptions.font === null) {
        parentOptions.font = bridgeObject(globalOptions.font);
      }
      Node2.updateGroupOptions(parentOptions, newOptions, groupList);
      if (newOptions.scaling !== void 0) {
        mergeOptions(parentOptions.scaling, newOptions.scaling, "label", globalOptions.scaling);
      }
    }
  }, {
    key: "checkMass",
    value: function checkMass(options2, id3) {
      if (options2.mass !== void 0 && options2.mass <= 0) {
        var strId = "";
        if (id3 !== void 0) {
          strId = " in node id: " + id3;
        }
        console.error("%cNegative or zero mass disallowed" + strId + ", setting mass to 1.", VALIDATOR_PRINT_STYLE);
        options2.mass = 1;
      }
    }
  }]);
  return Node2;
}();
function _createForOfIteratorHelper$6(o, allowArrayLike) {
  var it2 = typeof symbol2 !== "undefined" && getIteratorMethod$12(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$12(o) || (it2 = _unsupportedIterableToArray$6(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$6(o, minLen) {
  var _context4;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$6(o, minLen);
  var n = slice4(_context4 = Object.prototype.toString.call(o)).call(_context4, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$32(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$6(o, minLen);
}
function _arrayLikeToArray$6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var NodesHandler = function() {
  function NodesHandler2(body, images, groups, layoutEngine) {
    var _context, _this = this;
    _classCallCheck2(this, NodesHandler2);
    this.body = body;
    this.images = images;
    this.groups = groups;
    this.layoutEngine = layoutEngine;
    this.body.functions.createNode = bind$52(_context = this.create).call(_context, this);
    this.nodesListeners = {
      add: function add(event, params) {
        _this.add(params.items);
      },
      update: function update(event, params) {
        _this.update(params.items, params.data, params.oldData);
      },
      remove: function remove(event, params) {
        _this.remove(params.items);
      }
    };
    this.defaultOptions = {
      borderWidth: 1,
      borderWidthSelected: void 0,
      brokenImage: void 0,
      color: {
        border: "#2B7CE9",
        background: "#97C2FC",
        highlight: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        },
        hover: {
          border: "#2B7CE9",
          background: "#D2E5FF"
        }
      },
      opacity: void 0,
      fixed: {
        x: false,
        y: false
      },
      font: {
        color: "#343434",
        size: 14,
        face: "arial",
        background: "none",
        strokeWidth: 0,
        strokeColor: "#ffffff",
        align: "center",
        vadjust: 0,
        multi: false,
        bold: {
          mod: "bold"
        },
        boldital: {
          mod: "bold italic"
        },
        ital: {
          mod: "italic"
        },
        mono: {
          mod: "",
          size: 15,
          face: "monospace",
          vadjust: 2
        }
      },
      group: void 0,
      hidden: false,
      icon: {
        face: "FontAwesome",
        code: void 0,
        size: 50,
        color: "#2B7CE9"
      },
      image: void 0,
      imagePadding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      },
      label: void 0,
      labelHighlightBold: true,
      level: void 0,
      margin: {
        top: 5,
        right: 5,
        bottom: 5,
        left: 5
      },
      mass: 1,
      physics: true,
      scaling: {
        min: 10,
        max: 30,
        label: {
          enabled: false,
          min: 14,
          max: 30,
          maxVisible: 30,
          drawThreshold: 5
        },
        customScalingFunction: function customScalingFunction(min3, max3, total, value) {
          if (max3 === min3) {
            return 0.5;
          } else {
            var scale = 1 / (max3 - min3);
            return Math.max(0, (value - min3) * scale);
          }
        }
      },
      shadow: {
        enabled: false,
        color: "rgba(0,0,0,0.5)",
        size: 10,
        x: 5,
        y: 5
      },
      shape: "ellipse",
      shapeProperties: {
        borderDashes: false,
        borderRadius: 6,
        interpolation: true,
        useImageSize: false,
        useBorderWithImage: false,
        coordinateOrigin: "center"
      },
      size: 25,
      title: void 0,
      value: void 0,
      x: void 0,
      y: void 0
    };
    if (this.defaultOptions.mass <= 0) {
      throw "Internal error: mass in defaultOptions of NodesHandler may not be zero or negative";
    }
    this.options = bridgeObject(this.defaultOptions);
    this.bindEventListeners();
  }
  _createClass2(NodesHandler2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _context2, _context3, _this2 = this;
      this.body.emitter.on("refreshNodes", bind$52(_context2 = this.refresh).call(_context2, this));
      this.body.emitter.on("refresh", bind$52(_context3 = this.refresh).call(_context3, this));
      this.body.emitter.on("destroy", function() {
        forEach$12(_this2.nodesListeners, function(callback, event) {
          if (_this2.body.data.nodes)
            _this2.body.data.nodes.off(event, callback);
        });
        delete _this2.body.functions.createNode;
        delete _this2.nodesListeners.add;
        delete _this2.nodesListeners.update;
        delete _this2.nodesListeners.remove;
        delete _this2.nodesListeners;
      });
    }
  }, {
    key: "setOptions",
    value: function setOptions(options2) {
      if (options2 !== void 0) {
        Node.parseOptions(this.options, options2);
        if (options2.opacity !== void 0) {
          if (isNan(options2.opacity) || !_isFinite(options2.opacity) || options2.opacity < 0 || options2.opacity > 1) {
            console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + options2.opacity);
          } else {
            this.options.opacity = options2.opacity;
          }
        }
        if (options2.shape !== void 0) {
          for (var nodeId in this.body.nodes) {
            if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
              this.body.nodes[nodeId].updateShape();
            }
          }
        }
        if (typeof options2.font !== "undefined" || typeof options2.widthConstraint !== "undefined" || typeof options2.heightConstraint !== "undefined") {
          for (var _i = 0, _Object$keys = keys6(this.body.nodes); _i < _Object$keys.length; _i++) {
            var _nodeId = _Object$keys[_i];
            this.body.nodes[_nodeId].updateLabelModule();
            this.body.nodes[_nodeId].needsRefresh();
          }
        }
        if (options2.size !== void 0) {
          for (var _nodeId2 in this.body.nodes) {
            if (Object.prototype.hasOwnProperty.call(this.body.nodes, _nodeId2)) {
              this.body.nodes[_nodeId2].needsRefresh();
            }
          }
        }
        if (options2.hidden !== void 0 || options2.physics !== void 0) {
          this.body.emitter.emit("_dataChanged");
        }
      }
    }
  }, {
    key: "setData",
    value: function setData(nodes) {
      var doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var oldNodesData = this.body.data.nodes;
      if (isDataViewLike("id", nodes)) {
        this.body.data.nodes = nodes;
      } else if (isArray$12(nodes)) {
        this.body.data.nodes = new DataSet();
        this.body.data.nodes.add(nodes);
      } else if (!nodes) {
        this.body.data.nodes = new DataSet();
      } else {
        throw new TypeError("Array or DataSet expected");
      }
      if (oldNodesData) {
        forEach$12(this.nodesListeners, function(callback, event) {
          oldNodesData.off(event, callback);
        });
      }
      this.body.nodes = {};
      if (this.body.data.nodes) {
        var me = this;
        forEach$12(this.nodesListeners, function(callback, event) {
          me.body.data.nodes.on(event, callback);
        });
        var ids = this.body.data.nodes.getIds();
        this.add(ids, true);
      }
      if (doNotEmit === false) {
        this.body.emitter.emit("_dataChanged");
      }
    }
  }, {
    key: "add",
    value: function add(ids) {
      var doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var id3;
      var newNodes = [];
      for (var i = 0; i < ids.length; i++) {
        id3 = ids[i];
        var properties = this.body.data.nodes.get(id3);
        var node = this.create(properties);
        newNodes.push(node);
        this.body.nodes[id3] = node;
      }
      this.layoutEngine.positionInitially(newNodes);
      if (doNotEmit === false) {
        this.body.emitter.emit("_dataChanged");
      }
    }
  }, {
    key: "update",
    value: function update(ids, changedData, oldData) {
      var nodes = this.body.nodes;
      var dataChanged = false;
      for (var i = 0; i < ids.length; i++) {
        var id3 = ids[i];
        var node = nodes[id3];
        var data3 = changedData[i];
        if (node !== void 0) {
          if (node.setOptions(data3)) {
            dataChanged = true;
          }
        } else {
          dataChanged = true;
          node = this.create(data3);
          nodes[id3] = node;
        }
      }
      if (!dataChanged && oldData !== void 0) {
        dataChanged = some4(changedData).call(changedData, function(newValue, index2) {
          var oldValue = oldData[index2];
          return oldValue && oldValue.level !== newValue.level;
        });
      }
      if (dataChanged === true) {
        this.body.emitter.emit("_dataChanged");
      } else {
        this.body.emitter.emit("_dataUpdated");
      }
    }
  }, {
    key: "remove",
    value: function remove(ids) {
      var nodes = this.body.nodes;
      for (var i = 0; i < ids.length; i++) {
        var id3 = ids[i];
        delete nodes[id3];
      }
      this.body.emitter.emit("_dataChanged");
    }
  }, {
    key: "create",
    value: function create9(properties) {
      var constructorClass = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Node;
      return new constructorClass(properties, this.body, this.images, this.groups, this.options, this.defaultOptions);
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var _this3 = this;
      var clearPositions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      forEach$12(this.body.nodes, function(node, nodeId) {
        var data3 = _this3.body.data.nodes.get(nodeId);
        if (data3 !== void 0) {
          if (clearPositions === true) {
            node.setOptions({
              x: null,
              y: null
            });
          }
          node.setOptions({
            fixed: false
          });
          node.setOptions(data3);
        }
      });
    }
  }, {
    key: "getPositions",
    value: function getPositions(ids) {
      var dataArray = {};
      if (ids !== void 0) {
        if (isArray$12(ids) === true) {
          for (var i = 0; i < ids.length; i++) {
            if (this.body.nodes[ids[i]] !== void 0) {
              var node = this.body.nodes[ids[i]];
              dataArray[ids[i]] = {
                x: Math.round(node.x),
                y: Math.round(node.y)
              };
            }
          }
        } else {
          if (this.body.nodes[ids] !== void 0) {
            var _node = this.body.nodes[ids];
            dataArray[ids] = {
              x: Math.round(_node.x),
              y: Math.round(_node.y)
            };
          }
        }
      } else {
        for (var _i2 = 0; _i2 < this.body.nodeIndices.length; _i2++) {
          var _node2 = this.body.nodes[this.body.nodeIndices[_i2]];
          dataArray[this.body.nodeIndices[_i2]] = {
            x: Math.round(_node2.x),
            y: Math.round(_node2.y)
          };
        }
      }
      return dataArray;
    }
  }, {
    key: "getPosition",
    value: function getPosition(id3) {
      if (id3 == void 0) {
        throw new TypeError("No id was specified for getPosition method.");
      } else if (this.body.nodes[id3] == void 0) {
        throw new ReferenceError("NodeId provided for getPosition does not exist. Provided: ".concat(id3));
      } else {
        return {
          x: Math.round(this.body.nodes[id3].x),
          y: Math.round(this.body.nodes[id3].y)
        };
      }
    }
  }, {
    key: "storePositions",
    value: function storePositions() {
      var dataArray = [];
      var dataset = this.body.data.nodes.getDataSet();
      var _iterator = _createForOfIteratorHelper$6(dataset.get()), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var dsNode = _step.value;
          var id3 = dsNode.id;
          var bodyNode = this.body.nodes[id3];
          var x = Math.round(bodyNode.x);
          var y = Math.round(bodyNode.y);
          if (dsNode.x !== x || dsNode.y !== y) {
            dataArray.push({
              id: id3,
              x,
              y
            });
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      dataset.update(dataArray);
    }
  }, {
    key: "getBoundingBox",
    value: function getBoundingBox(nodeId) {
      if (this.body.nodes[nodeId] !== void 0) {
        return this.body.nodes[nodeId].shape.boundingBox;
      }
    }
  }, {
    key: "getConnectedNodes",
    value: function getConnectedNodes(nodeId, direction) {
      var nodeList = [];
      if (this.body.nodes[nodeId] !== void 0) {
        var node = this.body.nodes[nodeId];
        var nodeObj = {};
        for (var i = 0; i < node.edges.length; i++) {
          var edge = node.edges[i];
          if (direction !== "to" && edge.toId == node.id) {
            if (nodeObj[edge.fromId] === void 0) {
              nodeList.push(edge.fromId);
              nodeObj[edge.fromId] = true;
            }
          } else if (direction !== "from" && edge.fromId == node.id) {
            if (nodeObj[edge.toId] === void 0) {
              nodeList.push(edge.toId);
              nodeObj[edge.toId] = true;
            }
          }
        }
      }
      return nodeList;
    }
  }, {
    key: "getConnectedEdges",
    value: function getConnectedEdges(nodeId) {
      var edgeList = [];
      if (this.body.nodes[nodeId] !== void 0) {
        var node = this.body.nodes[nodeId];
        for (var i = 0; i < node.edges.length; i++) {
          edgeList.push(node.edges[i].id);
        }
      } else {
        console.error("NodeId provided for getConnectedEdges does not exist. Provided: ", nodeId);
      }
      return edgeList;
    }
  }, {
    key: "moveNode",
    value: function moveNode(nodeId, x, y) {
      var _this4 = this;
      if (this.body.nodes[nodeId] !== void 0) {
        this.body.nodes[nodeId].x = Number(x);
        this.body.nodes[nodeId].y = Number(y);
        setTimeout$12(function() {
          _this4.body.emitter.emit("startSimulation");
        }, 0);
      } else {
        console.error("Node id supplied to moveNode does not exist. Provided: ", nodeId);
      }
    }
  }]);
  return NodesHandler2;
}();
var hasOwn$12 = hasOwnProperty_12;
var isDataDescriptor$1 = function(descriptor) {
  return descriptor !== void 0 && (hasOwn$12(descriptor, "value") || hasOwn$12(descriptor, "writable"));
};
var $$42 = _export2;
var call2 = functionCall2;
var isObject$22 = isObject$j;
var anObject$12 = anObject$d;
var isDataDescriptor = isDataDescriptor$1;
var getOwnPropertyDescriptorModule2 = objectGetOwnPropertyDescriptor2;
var getPrototypeOf4 = objectGetPrototypeOf2;
function get$5(target, propertyKey) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var descriptor, prototype;
  if (anObject$12(target) === receiver)
    return target[propertyKey];
  descriptor = getOwnPropertyDescriptorModule2.f(target, propertyKey);
  if (descriptor)
    return isDataDescriptor(descriptor) ? descriptor.value : descriptor.get === void 0 ? void 0 : call2(descriptor.get, receiver);
  if (isObject$22(prototype = getPrototypeOf4(target)))
    return get$5(prototype, propertyKey, receiver);
}
$$42({
  target: "Reflect",
  stat: true
}, {
  get: get$5
});
var path$42 = path$y;
var get$4 = path$42.Reflect.get;
var parent$a2 = get$4;
var get$3 = parent$a2;
var parent$92 = get$3;
var get$2 = parent$92;
var parent$82 = get$2;
var get$1 = parent$82;
var get2 = get$1;
var parent$72 = getOwnPropertyDescriptor$42;
var getOwnPropertyDescriptor$22 = parent$72;
var parent$62 = getOwnPropertyDescriptor$22;
var getOwnPropertyDescriptor$12 = parent$62;
var getOwnPropertyDescriptor10 = getOwnPropertyDescriptor$12;
function _superPropBase(object2, property) {
  while (!Object.prototype.hasOwnProperty.call(object2, property)) {
    object2 = _getPrototypeOf2(object2);
    if (object2 === null)
      break;
  }
  return object2;
}
function _get() {
  if (typeof Reflect !== "undefined" && get2) {
    _get = get2;
  } else {
    _get = function _get2(target, property, receiver) {
      var base = _superPropBase(target, property);
      if (!base)
        return;
      var desc = getOwnPropertyDescriptor10(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get.apply(this, arguments);
}
var $$32 = _export2;
var $hypot = Math.hypot;
var abs2 = Math.abs;
var sqrt = Math.sqrt;
var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;
$$32({
  target: "Math",
  stat: true,
  forced: BUGGY
}, {
  hypot: function hypot(value1, value2) {
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs2(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else
        sum += arg;
    }
    return larg === Infinity ? Infinity : larg * sqrt(sum);
  }
});
var path$32 = path$y;
var hypot$2 = path$32.Math.hypot;
var parent$52 = hypot$2;
var hypot$1 = parent$52;
var hypot2 = hypot$1;
function _createSuper$a(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$a();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$a() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var EndPoint = function() {
  function EndPoint2() {
    _classCallCheck2(this, EndPoint2);
  }
  _createClass2(EndPoint2, null, [{
    key: "transform",
    value: function transform(points, arrowData) {
      if (!isArray$12(points)) {
        points = [points];
      }
      var x = arrowData.point.x;
      var y = arrowData.point.y;
      var angle = arrowData.angle;
      var length2 = arrowData.length;
      for (var i = 0; i < points.length; ++i) {
        var p = points[i];
        var xt = p.x * Math.cos(angle) - p.y * Math.sin(angle);
        var yt = p.x * Math.sin(angle) + p.y * Math.cos(angle);
        p.x = x + length2 * xt;
        p.y = y + length2 * yt;
      }
    }
  }, {
    key: "drawPath",
    value: function drawPath(ctx, points) {
      ctx.beginPath();
      ctx.moveTo(points[0].x, points[0].y);
      for (var i = 1; i < points.length; ++i) {
        ctx.lineTo(points[i].x, points[i].y);
      }
      ctx.closePath();
    }
  }]);
  return EndPoint2;
}();
var Image$1 = function(_EndPoint) {
  _inherits2(Image2, _EndPoint);
  var _super = _createSuper$a(Image2);
  function Image2() {
    _classCallCheck2(this, Image2);
    return _super.apply(this, arguments);
  }
  _createClass2(Image2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      if (arrowData.image) {
        ctx.save();
        ctx.translate(arrowData.point.x, arrowData.point.y);
        ctx.rotate(Math.PI / 2 + arrowData.angle);
        var width = arrowData.imageWidth != null ? arrowData.imageWidth : arrowData.image.width;
        var height = arrowData.imageHeight != null ? arrowData.imageHeight : arrowData.image.height;
        arrowData.image.drawImageAtPosition(ctx, 1, -width / 2, 0, width, height);
        ctx.restore();
      }
      return false;
    }
  }]);
  return Image2;
}(EndPoint);
var Arrow = function(_EndPoint2) {
  _inherits2(Arrow2, _EndPoint2);
  var _super2 = _createSuper$a(Arrow2);
  function Arrow2() {
    _classCallCheck2(this, Arrow2);
    return _super2.apply(this, arguments);
  }
  _createClass2(Arrow2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var points = [{
        x: 0,
        y: 0
      }, {
        x: -1,
        y: 0.3
      }, {
        x: -0.9,
        y: 0
      }, {
        x: -1,
        y: -0.3
      }];
      EndPoint.transform(points, arrowData);
      EndPoint.drawPath(ctx, points);
      return true;
    }
  }]);
  return Arrow2;
}(EndPoint);
var Crow = function() {
  function Crow2() {
    _classCallCheck2(this, Crow2);
  }
  _createClass2(Crow2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var points = [{
        x: -1,
        y: 0
      }, {
        x: 0,
        y: 0.3
      }, {
        x: -0.4,
        y: 0
      }, {
        x: 0,
        y: -0.3
      }];
      EndPoint.transform(points, arrowData);
      EndPoint.drawPath(ctx, points);
      return true;
    }
  }]);
  return Crow2;
}();
var Curve = function() {
  function Curve2() {
    _classCallCheck2(this, Curve2);
  }
  _createClass2(Curve2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var point = {
        x: -0.4,
        y: 0
      };
      EndPoint.transform(point, arrowData);
      ctx.strokeStyle = ctx.fillStyle;
      ctx.fillStyle = "rgba(0, 0, 0, 0)";
      var pi = Math.PI;
      var startAngle = arrowData.angle - pi / 2;
      var endAngle = arrowData.angle + pi / 2;
      ctx.beginPath();
      ctx.arc(point.x, point.y, arrowData.length * 0.4, startAngle, endAngle, false);
      ctx.stroke();
      return true;
    }
  }]);
  return Curve2;
}();
var InvertedCurve = function() {
  function InvertedCurve2() {
    _classCallCheck2(this, InvertedCurve2);
  }
  _createClass2(InvertedCurve2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var point = {
        x: -0.3,
        y: 0
      };
      EndPoint.transform(point, arrowData);
      ctx.strokeStyle = ctx.fillStyle;
      ctx.fillStyle = "rgba(0, 0, 0, 0)";
      var pi = Math.PI;
      var startAngle = arrowData.angle + pi / 2;
      var endAngle = arrowData.angle + 3 * pi / 2;
      ctx.beginPath();
      ctx.arc(point.x, point.y, arrowData.length * 0.4, startAngle, endAngle, false);
      ctx.stroke();
      return true;
    }
  }]);
  return InvertedCurve2;
}();
var Triangle = function() {
  function Triangle2() {
    _classCallCheck2(this, Triangle2);
  }
  _createClass2(Triangle2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var points = [{
        x: 0.02,
        y: 0
      }, {
        x: -1,
        y: 0.3
      }, {
        x: -1,
        y: -0.3
      }];
      EndPoint.transform(points, arrowData);
      EndPoint.drawPath(ctx, points);
      return true;
    }
  }]);
  return Triangle2;
}();
var InvertedTriangle = function() {
  function InvertedTriangle2() {
    _classCallCheck2(this, InvertedTriangle2);
  }
  _createClass2(InvertedTriangle2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var points = [{
        x: 0,
        y: 0.3
      }, {
        x: 0,
        y: -0.3
      }, {
        x: -1,
        y: 0
      }];
      EndPoint.transform(points, arrowData);
      EndPoint.drawPath(ctx, points);
      return true;
    }
  }]);
  return InvertedTriangle2;
}();
var Circle = function() {
  function Circle2() {
    _classCallCheck2(this, Circle2);
  }
  _createClass2(Circle2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var point = {
        x: -0.4,
        y: 0
      };
      EndPoint.transform(point, arrowData);
      drawCircle(ctx, point.x, point.y, arrowData.length * 0.4);
      return true;
    }
  }]);
  return Circle2;
}();
var Bar = function() {
  function Bar2() {
    _classCallCheck2(this, Bar2);
  }
  _createClass2(Bar2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var points = [{
        x: 0,
        y: 0.5
      }, {
        x: 0,
        y: -0.5
      }, {
        x: -0.15,
        y: -0.5
      }, {
        x: -0.15,
        y: 0.5
      }];
      EndPoint.transform(points, arrowData);
      EndPoint.drawPath(ctx, points);
      return true;
    }
  }]);
  return Bar2;
}();
var Box = function() {
  function Box2() {
    _classCallCheck2(this, Box2);
  }
  _createClass2(Box2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var points = [{
        x: 0,
        y: 0.3
      }, {
        x: 0,
        y: -0.3
      }, {
        x: -0.6,
        y: -0.3
      }, {
        x: -0.6,
        y: 0.3
      }];
      EndPoint.transform(points, arrowData);
      EndPoint.drawPath(ctx, points);
      return true;
    }
  }]);
  return Box2;
}();
var Diamond = function() {
  function Diamond2() {
    _classCallCheck2(this, Diamond2);
  }
  _createClass2(Diamond2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var points = [{
        x: 0,
        y: 0
      }, {
        x: -0.5,
        y: -0.3
      }, {
        x: -1,
        y: 0
      }, {
        x: -0.5,
        y: 0.3
      }];
      EndPoint.transform(points, arrowData);
      EndPoint.drawPath(ctx, points);
      return true;
    }
  }]);
  return Diamond2;
}();
var Vee = function() {
  function Vee2() {
    _classCallCheck2(this, Vee2);
  }
  _createClass2(Vee2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var points = [{
        x: -1,
        y: 0.3
      }, {
        x: -0.5,
        y: 0
      }, {
        x: -1,
        y: -0.3
      }, {
        x: 0,
        y: 0
      }];
      EndPoint.transform(points, arrowData);
      EndPoint.drawPath(ctx, points);
      return true;
    }
  }]);
  return Vee2;
}();
var EndPoints = function() {
  function EndPoints2() {
    _classCallCheck2(this, EndPoints2);
  }
  _createClass2(EndPoints2, null, [{
    key: "draw",
    value: function draw(ctx, arrowData) {
      var type;
      if (arrowData.type) {
        type = arrowData.type.toLowerCase();
      }
      switch (type) {
        case "image":
          return Image$1.draw(ctx, arrowData);
        case "circle":
          return Circle.draw(ctx, arrowData);
        case "box":
          return Box.draw(ctx, arrowData);
        case "crow":
          return Crow.draw(ctx, arrowData);
        case "curve":
          return Curve.draw(ctx, arrowData);
        case "diamond":
          return Diamond.draw(ctx, arrowData);
        case "inv_curve":
          return InvertedCurve.draw(ctx, arrowData);
        case "triangle":
          return Triangle.draw(ctx, arrowData);
        case "inv_triangle":
          return InvertedTriangle.draw(ctx, arrowData);
        case "bar":
          return Bar.draw(ctx, arrowData);
        case "vee":
          return Vee.draw(ctx, arrowData);
        case "arrow":
        default:
          return Arrow.draw(ctx, arrowData);
      }
    }
  }]);
  return EndPoints2;
}();
function ownKeys$12(object2, enumerableOnly) {
  var keys$13 = keys6(object2);
  if (getOwnPropertySymbols6) {
    var symbols = getOwnPropertySymbols6(object2);
    enumerableOnly && (symbols = filter4(symbols).call(symbols, function(sym) {
      return getOwnPropertyDescriptor$32(object2, sym).enumerable;
    })), keys$13.push.apply(keys$13, symbols);
  }
  return keys$13;
}
function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var _context2, _context3;
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? forEach$22(_context2 = ownKeys$12(Object(source), true)).call(_context2, function(key) {
      _defineProperty2(target, key, source[key]);
    }) : getOwnPropertyDescriptors4 ? defineProperties8(target, getOwnPropertyDescriptors4(source)) : forEach$22(_context3 = ownKeys$12(Object(source))).call(_context3, function(key) {
      defineProperty$62(target, key, getOwnPropertyDescriptor$32(source, key));
    });
  }
  return target;
}
var EdgeBase = function() {
  function EdgeBase2(options2, _body, _labelModule) {
    _classCallCheck2(this, EdgeBase2);
    this._body = _body;
    this._labelModule = _labelModule;
    this.color = {};
    this.colorDirty = true;
    this.hoverWidth = 1.5;
    this.selectionWidth = 2;
    this.setOptions(options2);
    this.fromPoint = this.from;
    this.toPoint = this.to;
  }
  _createClass2(EdgeBase2, [{
    key: "connect",
    value: function connect() {
      this.from = this._body.nodes[this.options.from];
      this.to = this._body.nodes[this.options.to];
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      return false;
    }
  }, {
    key: "setOptions",
    value: function setOptions(options2) {
      this.options = options2;
      this.from = this._body.nodes[this.options.from];
      this.to = this._body.nodes[this.options.to];
      this.id = this.options.id;
    }
  }, {
    key: "drawLine",
    value: function drawLine(ctx, values5, _selected, _hover) {
      var viaNode = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.getViaNode();
      ctx.strokeStyle = this.getColor(ctx, values5);
      ctx.lineWidth = values5.width;
      if (values5.dashes !== false) {
        this._drawDashedLine(ctx, values5, viaNode);
      } else {
        this._drawLine(ctx, values5, viaNode);
      }
    }
  }, {
    key: "_drawLine",
    value: function _drawLine(ctx, values5, viaNode, fromPoint, toPoint) {
      if (this.from != this.to) {
        this._line(ctx, values5, viaNode, fromPoint, toPoint);
      } else {
        var _this$_getCircleData = this._getCircleData(ctx), _this$_getCircleData2 = _slicedToArray2(_this$_getCircleData, 3), x = _this$_getCircleData2[0], y = _this$_getCircleData2[1], radius = _this$_getCircleData2[2];
        this._circle(ctx, values5, x, y, radius);
      }
    }
  }, {
    key: "_drawDashedLine",
    value: function _drawDashedLine(ctx, values5, viaNode, _fromPoint, _toPoint) {
      ctx.lineCap = "round";
      var pattern = isArray$12(values5.dashes) ? values5.dashes : [5, 5];
      if (ctx.setLineDash !== void 0) {
        ctx.save();
        ctx.setLineDash(pattern);
        ctx.lineDashOffset = 0;
        if (this.from != this.to) {
          this._line(ctx, values5, viaNode);
        } else {
          var _this$_getCircleData3 = this._getCircleData(ctx), _this$_getCircleData4 = _slicedToArray2(_this$_getCircleData3, 3), x = _this$_getCircleData4[0], y = _this$_getCircleData4[1], radius = _this$_getCircleData4[2];
          this._circle(ctx, values5, x, y, radius);
        }
        ctx.setLineDash([0]);
        ctx.lineDashOffset = 0;
        ctx.restore();
      } else {
        if (this.from != this.to) {
          drawDashedLine(ctx, this.from.x, this.from.y, this.to.x, this.to.y, pattern);
        } else {
          var _this$_getCircleData5 = this._getCircleData(ctx), _this$_getCircleData6 = _slicedToArray2(_this$_getCircleData5, 3), _x = _this$_getCircleData6[0], _y = _this$_getCircleData6[1], _radius = _this$_getCircleData6[2];
          this._circle(ctx, values5, _x, _y, _radius);
        }
        this.enableShadow(ctx, values5);
        ctx.stroke();
        this.disableShadow(ctx, values5);
      }
    }
  }, {
    key: "findBorderPosition",
    value: function findBorderPosition(node, ctx, options2) {
      if (this.from != this.to) {
        return this._findBorderPosition(node, ctx, options2);
      } else {
        return this._findBorderPositionCircle(node, ctx, options2);
      }
    }
  }, {
    key: "findBorderPositions",
    value: function findBorderPositions(ctx) {
      if (this.from != this.to) {
        return {
          from: this._findBorderPosition(this.from, ctx),
          to: this._findBorderPosition(this.to, ctx)
        };
      } else {
        var _context;
        var _this$_getCircleData$ = slice4(_context = this._getCircleData(ctx)).call(_context, 0, 2), _this$_getCircleData$2 = _slicedToArray2(_this$_getCircleData$, 2), x = _this$_getCircleData$2[0], y = _this$_getCircleData$2[1];
        return {
          from: this._findBorderPositionCircle(this.from, ctx, {
            x,
            y,
            low: 0.25,
            high: 0.6,
            direction: -1
          }),
          to: this._findBorderPositionCircle(this.from, ctx, {
            x,
            y,
            low: 0.6,
            high: 0.8,
            direction: 1
          })
        };
      }
    }
  }, {
    key: "_getCircleData",
    value: function _getCircleData(ctx) {
      var radius = this.options.selfReference.size;
      if (ctx !== void 0) {
        if (this.from.shape.width === void 0) {
          this.from.shape.resize(ctx);
        }
      }
      var coordinates = getSelfRefCoordinates(ctx, this.options.selfReference.angle, radius, this.from);
      return [coordinates.x, coordinates.y, radius];
    }
  }, {
    key: "_pointOnCircle",
    value: function _pointOnCircle(x, y, radius, position) {
      var angle = position * 2 * Math.PI;
      return {
        x: x + radius * Math.cos(angle),
        y: y - radius * Math.sin(angle)
      };
    }
  }, {
    key: "_findBorderPositionCircle",
    value: function _findBorderPositionCircle(nearNode, ctx, options2) {
      var x = options2.x;
      var y = options2.y;
      var low3 = options2.low;
      var high = options2.high;
      var direction = options2.direction;
      var maxIterations = 10;
      var radius = this.options.selfReference.size;
      var threshold = 0.05;
      var pos;
      var middle = (low3 + high) * 0.5;
      var endPointOffset = 0;
      if (this.options.arrowStrikethrough === true) {
        if (direction === -1) {
          endPointOffset = this.options.endPointOffset.from;
        } else if (direction === 1) {
          endPointOffset = this.options.endPointOffset.to;
        }
      }
      var iteration = 0;
      do {
        middle = (low3 + high) * 0.5;
        pos = this._pointOnCircle(x, y, radius, middle);
        var angle = Math.atan2(nearNode.y - pos.y, nearNode.x - pos.x);
        var distanceToBorder = nearNode.distanceToBorder(ctx, angle) + endPointOffset;
        var distanceToPoint = Math.sqrt(Math.pow(pos.x - nearNode.x, 2) + Math.pow(pos.y - nearNode.y, 2));
        var difference = distanceToBorder - distanceToPoint;
        if (Math.abs(difference) < threshold) {
          break;
        } else if (difference > 0) {
          if (direction > 0) {
            low3 = middle;
          } else {
            high = middle;
          }
        } else {
          if (direction > 0) {
            high = middle;
          } else {
            low3 = middle;
          }
        }
        ++iteration;
      } while (low3 <= high && iteration < maxIterations);
      return _objectSpread$1(_objectSpread$1({}, pos), {}, {
        t: middle
      });
    }
  }, {
    key: "getLineWidth",
    value: function getLineWidth(selected, hover) {
      if (selected === true) {
        return Math.max(this.selectionWidth, 0.3 / this._body.view.scale);
      } else if (hover === true) {
        return Math.max(this.hoverWidth, 0.3 / this._body.view.scale);
      } else {
        return Math.max(this.options.width, 0.3 / this._body.view.scale);
      }
    }
  }, {
    key: "getColor",
    value: function getColor(ctx, values5) {
      if (values5.inheritsColor !== false) {
        if (values5.inheritsColor === "both" && this.from.id !== this.to.id) {
          var grd = ctx.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y);
          var fromColor = this.from.options.color.highlight.border;
          var toColor = this.to.options.color.highlight.border;
          if (this.from.selected === false && this.to.selected === false) {
            fromColor = overrideOpacity(this.from.options.color.border, values5.opacity);
            toColor = overrideOpacity(this.to.options.color.border, values5.opacity);
          } else if (this.from.selected === true && this.to.selected === false) {
            toColor = this.to.options.color.border;
          } else if (this.from.selected === false && this.to.selected === true) {
            fromColor = this.from.options.color.border;
          }
          grd.addColorStop(0, fromColor);
          grd.addColorStop(1, toColor);
          return grd;
        }
        if (values5.inheritsColor === "to") {
          return overrideOpacity(this.to.options.color.border, values5.opacity);
        } else {
          return overrideOpacity(this.from.options.color.border, values5.opacity);
        }
      } else {
        return overrideOpacity(values5.color, values5.opacity);
      }
    }
  }, {
    key: "_circle",
    value: function _circle(ctx, values5, x, y, radius) {
      this.enableShadow(ctx, values5);
      var angleFrom = 0;
      var angleTo = Math.PI * 2;
      if (!this.options.selfReference.renderBehindTheNode) {
        var low3 = this.options.selfReference.angle;
        var high = this.options.selfReference.angle + Math.PI;
        var pointTFrom = this._findBorderPositionCircle(this.from, ctx, {
          x,
          y,
          low: low3,
          high,
          direction: -1
        });
        var pointTTo = this._findBorderPositionCircle(this.from, ctx, {
          x,
          y,
          low: low3,
          high,
          direction: 1
        });
        angleFrom = Math.atan2(pointTFrom.y - y, pointTFrom.x - x);
        angleTo = Math.atan2(pointTTo.y - y, pointTTo.x - x);
      }
      ctx.beginPath();
      ctx.arc(x, y, radius, angleFrom, angleTo, false);
      ctx.stroke();
      this.disableShadow(ctx, values5);
    }
  }, {
    key: "getDistanceToEdge",
    value: function getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
      if (this.from != this.to) {
        return this._getDistanceToEdge(x1, y1, x2, y2, x3, y3);
      } else {
        var _this$_getCircleData7 = this._getCircleData(void 0), _this$_getCircleData8 = _slicedToArray2(_this$_getCircleData7, 3), x = _this$_getCircleData8[0], y = _this$_getCircleData8[1], radius = _this$_getCircleData8[2];
        var dx = x - x3;
        var dy = y - y3;
        return Math.abs(Math.sqrt(dx * dx + dy * dy) - radius);
      }
    }
  }, {
    key: "_getDistanceToLine",
    value: function _getDistanceToLine(x1, y1, x2, y2, x3, y3) {
      var px = x2 - x1;
      var py = y2 - y1;
      var something3 = px * px + py * py;
      var u = ((x3 - x1) * px + (y3 - y1) * py) / something3;
      if (u > 1) {
        u = 1;
      } else if (u < 0) {
        u = 0;
      }
      var x = x1 + u * px;
      var y = y1 + u * py;
      var dx = x - x3;
      var dy = y - y3;
      return Math.sqrt(dx * dx + dy * dy);
    }
  }, {
    key: "getArrowData",
    value: function getArrowData(ctx, position, viaNode, _selected, _hover, values5) {
      var angle;
      var arrowPoint;
      var node1;
      var node2;
      var reversed;
      var scaleFactor;
      var type;
      var lineWidth = values5.width;
      if (position === "from") {
        node1 = this.from;
        node2 = this.to;
        reversed = values5.fromArrowScale < 0;
        scaleFactor = Math.abs(values5.fromArrowScale);
        type = values5.fromArrowType;
      } else if (position === "to") {
        node1 = this.to;
        node2 = this.from;
        reversed = values5.toArrowScale < 0;
        scaleFactor = Math.abs(values5.toArrowScale);
        type = values5.toArrowType;
      } else {
        node1 = this.to;
        node2 = this.from;
        reversed = values5.middleArrowScale < 0;
        scaleFactor = Math.abs(values5.middleArrowScale);
        type = values5.middleArrowType;
      }
      var length2 = 15 * scaleFactor + 3 * lineWidth;
      if (node1 != node2) {
        var approximateEdgeLength = hypot2(node1.x - node2.x, node1.y - node2.y);
        var relativeLength = length2 / approximateEdgeLength;
        if (position !== "middle") {
          if (this.options.smooth.enabled === true) {
            var pointT = this._findBorderPosition(node1, ctx, {
              via: viaNode
            });
            var guidePos = this.getPoint(pointT.t + relativeLength * (position === "from" ? 1 : -1), viaNode);
            angle = Math.atan2(pointT.y - guidePos.y, pointT.x - guidePos.x);
            arrowPoint = pointT;
          } else {
            angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
            arrowPoint = this._findBorderPosition(node1, ctx);
          }
        } else {
          var halfLength = (reversed ? -relativeLength : relativeLength) / 2;
          var guidePos1 = this.getPoint(0.5 + halfLength, viaNode);
          var guidePos2 = this.getPoint(0.5 - halfLength, viaNode);
          angle = Math.atan2(guidePos1.y - guidePos2.y, guidePos1.x - guidePos2.x);
          arrowPoint = this.getPoint(0.5, viaNode);
        }
      } else {
        var _this$_getCircleData9 = this._getCircleData(ctx), _this$_getCircleData10 = _slicedToArray2(_this$_getCircleData9, 3), x = _this$_getCircleData10[0], y = _this$_getCircleData10[1], radius = _this$_getCircleData10[2];
        if (position === "from") {
          var low3 = this.options.selfReference.angle;
          var high = this.options.selfReference.angle + Math.PI;
          var _pointT = this._findBorderPositionCircle(this.from, ctx, {
            x,
            y,
            low: low3,
            high,
            direction: -1
          });
          angle = _pointT.t * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
          arrowPoint = _pointT;
        } else if (position === "to") {
          var _low = this.options.selfReference.angle;
          var _high = this.options.selfReference.angle + Math.PI;
          var _pointT2 = this._findBorderPositionCircle(this.from, ctx, {
            x,
            y,
            low: _low,
            high: _high,
            direction: 1
          });
          angle = _pointT2.t * -2 * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI;
          arrowPoint = _pointT2;
        } else {
          var pos = this.options.selfReference.angle / (2 * Math.PI);
          arrowPoint = this._pointOnCircle(x, y, radius, pos);
          angle = pos * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
        }
      }
      var xi = arrowPoint.x - length2 * 0.9 * Math.cos(angle);
      var yi = arrowPoint.y - length2 * 0.9 * Math.sin(angle);
      var arrowCore = {
        x: xi,
        y: yi
      };
      return {
        point: arrowPoint,
        core: arrowCore,
        angle,
        length: length2,
        type
      };
    }
  }, {
    key: "drawArrowHead",
    value: function drawArrowHead(ctx, values5, _selected, _hover, arrowData) {
      ctx.strokeStyle = this.getColor(ctx, values5);
      ctx.fillStyle = ctx.strokeStyle;
      ctx.lineWidth = values5.width;
      var canFill = EndPoints.draw(ctx, arrowData);
      if (canFill) {
        this.enableShadow(ctx, values5);
        fill4(ctx).call(ctx);
        this.disableShadow(ctx, values5);
      }
    }
  }, {
    key: "enableShadow",
    value: function enableShadow(ctx, values5) {
      if (values5.shadow === true) {
        ctx.shadowColor = values5.shadowColor;
        ctx.shadowBlur = values5.shadowSize;
        ctx.shadowOffsetX = values5.shadowX;
        ctx.shadowOffsetY = values5.shadowY;
      }
    }
  }, {
    key: "disableShadow",
    value: function disableShadow(ctx, values5) {
      if (values5.shadow === true) {
        ctx.shadowColor = "rgba(0,0,0,0)";
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
      }
    }
  }, {
    key: "drawBackground",
    value: function drawBackground(ctx, values5) {
      if (values5.background !== false) {
        var origCtxAttr = {
          strokeStyle: ctx.strokeStyle,
          lineWidth: ctx.lineWidth,
          dashes: ctx.dashes
        };
        ctx.strokeStyle = values5.backgroundColor;
        ctx.lineWidth = values5.backgroundSize;
        this.setStrokeDashed(ctx, values5.backgroundDashes);
        ctx.stroke();
        ctx.strokeStyle = origCtxAttr.strokeStyle;
        ctx.lineWidth = origCtxAttr.lineWidth;
        ctx.dashes = origCtxAttr.dashes;
        this.setStrokeDashed(ctx, values5.dashes);
      }
    }
  }, {
    key: "setStrokeDashed",
    value: function setStrokeDashed(ctx, dashes) {
      if (dashes !== false) {
        if (ctx.setLineDash !== void 0) {
          var pattern = isArray$12(dashes) ? dashes : [5, 5];
          ctx.setLineDash(pattern);
        } else {
          console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
        }
      } else {
        if (ctx.setLineDash !== void 0) {
          ctx.setLineDash([]);
        } else {
          console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
        }
      }
    }
  }]);
  return EdgeBase2;
}();
function ownKeys4(object2, enumerableOnly) {
  var keys$13 = keys6(object2);
  if (getOwnPropertySymbols6) {
    var symbols = getOwnPropertySymbols6(object2);
    enumerableOnly && (symbols = filter4(symbols).call(symbols, function(sym) {
      return getOwnPropertyDescriptor$32(object2, sym).enumerable;
    })), keys$13.push.apply(keys$13, symbols);
  }
  return keys$13;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var _context, _context2;
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? forEach$22(_context = ownKeys4(Object(source), true)).call(_context, function(key) {
      _defineProperty2(target, key, source[key]);
    }) : getOwnPropertyDescriptors4 ? defineProperties8(target, getOwnPropertyDescriptors4(source)) : forEach$22(_context2 = ownKeys4(Object(source))).call(_context2, function(key) {
      defineProperty$62(target, key, getOwnPropertyDescriptor$32(source, key));
    });
  }
  return target;
}
function _createSuper$9(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$9() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var BezierEdgeBase = function(_EdgeBase) {
  _inherits2(BezierEdgeBase2, _EdgeBase);
  var _super = _createSuper$9(BezierEdgeBase2);
  function BezierEdgeBase2(options2, body, labelModule) {
    _classCallCheck2(this, BezierEdgeBase2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(BezierEdgeBase2, [{
    key: "_findBorderPositionBezier",
    value: function _findBorderPositionBezier(nearNode, ctx) {
      var viaNode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this._getViaCoordinates();
      var maxIterations = 10;
      var threshold = 0.2;
      var from5 = false;
      var high = 1;
      var low3 = 0;
      var node = this.to;
      var pos;
      var middle;
      var endPointOffset = this.options.endPointOffset ? this.options.endPointOffset.to : 0;
      if (nearNode.id === this.from.id) {
        node = this.from;
        from5 = true;
        endPointOffset = this.options.endPointOffset ? this.options.endPointOffset.from : 0;
      }
      if (this.options.arrowStrikethrough === false) {
        endPointOffset = 0;
      }
      var iteration = 0;
      do {
        middle = (low3 + high) * 0.5;
        pos = this.getPoint(middle, viaNode);
        var angle = Math.atan2(node.y - pos.y, node.x - pos.x);
        var distanceToBorder = node.distanceToBorder(ctx, angle) + endPointOffset;
        var distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));
        var difference = distanceToBorder - distanceToPoint;
        if (Math.abs(difference) < threshold) {
          break;
        } else if (difference < 0) {
          if (from5 === false) {
            low3 = middle;
          } else {
            high = middle;
          }
        } else {
          if (from5 === false) {
            high = middle;
          } else {
            low3 = middle;
          }
        }
        ++iteration;
      } while (low3 <= high && iteration < maxIterations);
      return _objectSpread2(_objectSpread2({}, pos), {}, {
        t: middle
      });
    }
  }, {
    key: "_getDistanceToBezierEdge",
    value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via) {
      var minDistance = 1e9;
      var distance;
      var i, t, x, y;
      var lastX = x1;
      var lastY = y1;
      for (i = 1; i < 10; i++) {
        t = 0.1 * i;
        x = Math.pow(1 - t, 2) * x1 + 2 * t * (1 - t) * via.x + Math.pow(t, 2) * x2;
        y = Math.pow(1 - t, 2) * y1 + 2 * t * (1 - t) * via.y + Math.pow(t, 2) * y2;
        if (i > 0) {
          distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
          minDistance = distance < minDistance ? distance : minDistance;
        }
        lastX = x;
        lastY = y;
      }
      return minDistance;
    }
  }, {
    key: "_bezierCurve",
    value: function _bezierCurve(ctx, values5, viaNode1, viaNode2) {
      ctx.beginPath();
      ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
      if (viaNode1 != null && viaNode1.x != null) {
        if (viaNode2 != null && viaNode2.x != null) {
          ctx.bezierCurveTo(viaNode1.x, viaNode1.y, viaNode2.x, viaNode2.y, this.toPoint.x, this.toPoint.y);
        } else {
          ctx.quadraticCurveTo(viaNode1.x, viaNode1.y, this.toPoint.x, this.toPoint.y);
        }
      } else {
        ctx.lineTo(this.toPoint.x, this.toPoint.y);
      }
      this.drawBackground(ctx, values5);
      this.enableShadow(ctx, values5);
      ctx.stroke();
      this.disableShadow(ctx, values5);
    }
  }, {
    key: "getViaNode",
    value: function getViaNode() {
      return this._getViaCoordinates();
    }
  }]);
  return BezierEdgeBase2;
}(EdgeBase);
function _createSuper$8(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$8();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$8() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var BezierEdgeDynamic = function(_BezierEdgeBase) {
  _inherits2(BezierEdgeDynamic2, _BezierEdgeBase);
  var _super = _createSuper$8(BezierEdgeDynamic2);
  function BezierEdgeDynamic2(options2, body, labelModule) {
    var _this;
    _classCallCheck2(this, BezierEdgeDynamic2);
    _this = _super.call(this, options2, body, labelModule);
    _this.via = _this.via;
    _this._boundFunction = function() {
      _this.positionBezierNode();
    };
    _this._body.emitter.on("_repositionBezierNodes", _this._boundFunction);
    return _this;
  }
  _createClass2(BezierEdgeDynamic2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      _get(_getPrototypeOf2(BezierEdgeDynamic2.prototype), "setOptions", this).call(this, options2);
      var physicsChange = false;
      if (this.options.physics !== options2.physics) {
        physicsChange = true;
      }
      this.options = options2;
      this.id = this.options.id;
      this.from = this._body.nodes[this.options.from];
      this.to = this._body.nodes[this.options.to];
      this.setupSupportNode();
      this.connect();
      if (physicsChange === true) {
        this.via.setOptions({
          physics: this.options.physics
        });
        this.positionBezierNode();
      }
    }
  }, {
    key: "connect",
    value: function connect() {
      this.from = this._body.nodes[this.options.from];
      this.to = this._body.nodes[this.options.to];
      if (this.from === void 0 || this.to === void 0 || this.options.physics === false) {
        this.via.setOptions({
          physics: false
        });
      } else {
        if (this.from.id === this.to.id) {
          this.via.setOptions({
            physics: false
          });
        } else {
          this.via.setOptions({
            physics: true
          });
        }
      }
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      this._body.emitter.off("_repositionBezierNodes", this._boundFunction);
      if (this.via !== void 0) {
        delete this._body.nodes[this.via.id];
        this.via = void 0;
        return true;
      }
      return false;
    }
  }, {
    key: "setupSupportNode",
    value: function setupSupportNode() {
      if (this.via === void 0) {
        var nodeId = "edgeId:" + this.id;
        var node = this._body.functions.createNode({
          id: nodeId,
          shape: "circle",
          physics: true,
          hidden: true
        });
        this._body.nodes[nodeId] = node;
        this.via = node;
        this.via.parentEdgeId = this.id;
        this.positionBezierNode();
      }
    }
  }, {
    key: "positionBezierNode",
    value: function positionBezierNode() {
      if (this.via !== void 0 && this.from !== void 0 && this.to !== void 0) {
        this.via.x = 0.5 * (this.from.x + this.to.x);
        this.via.y = 0.5 * (this.from.y + this.to.y);
      } else if (this.via !== void 0) {
        this.via.x = 0;
        this.via.y = 0;
      }
    }
  }, {
    key: "_line",
    value: function _line(ctx, values5, viaNode) {
      this._bezierCurve(ctx, values5, viaNode);
    }
  }, {
    key: "_getViaCoordinates",
    value: function _getViaCoordinates() {
      return this.via;
    }
  }, {
    key: "getViaNode",
    value: function getViaNode() {
      return this.via;
    }
  }, {
    key: "getPoint",
    value: function getPoint(position) {
      var viaNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.via;
      if (this.from === this.to) {
        var _this$_getCircleData = this._getCircleData(), _this$_getCircleData2 = _slicedToArray2(_this$_getCircleData, 3), cx = _this$_getCircleData2[0], cy = _this$_getCircleData2[1], cr = _this$_getCircleData2[2];
        var a = 2 * Math.PI * (1 - position);
        return {
          x: cx + cr * Math.sin(a),
          y: cy + cr - cr * (1 - Math.cos(a))
        };
      } else {
        return {
          x: Math.pow(1 - position, 2) * this.fromPoint.x + 2 * position * (1 - position) * viaNode.x + Math.pow(position, 2) * this.toPoint.x,
          y: Math.pow(1 - position, 2) * this.fromPoint.y + 2 * position * (1 - position) * viaNode.y + Math.pow(position, 2) * this.toPoint.y
        };
      }
    }
  }, {
    key: "_findBorderPosition",
    value: function _findBorderPosition(nearNode, ctx) {
      return this._findBorderPositionBezier(nearNode, ctx, this.via);
    }
  }, {
    key: "_getDistanceToEdge",
    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, this.via);
    }
  }]);
  return BezierEdgeDynamic2;
}(BezierEdgeBase);
function _createSuper$7(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$7();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$7() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var BezierEdgeStatic = function(_BezierEdgeBase) {
  _inherits2(BezierEdgeStatic2, _BezierEdgeBase);
  var _super = _createSuper$7(BezierEdgeStatic2);
  function BezierEdgeStatic2(options2, body, labelModule) {
    _classCallCheck2(this, BezierEdgeStatic2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(BezierEdgeStatic2, [{
    key: "_line",
    value: function _line(ctx, values5, viaNode) {
      this._bezierCurve(ctx, values5, viaNode);
    }
  }, {
    key: "getViaNode",
    value: function getViaNode() {
      return this._getViaCoordinates();
    }
  }, {
    key: "_getViaCoordinates",
    value: function _getViaCoordinates() {
      var factor = this.options.smooth.roundness;
      var type = this.options.smooth.type;
      var dx = Math.abs(this.from.x - this.to.x);
      var dy = Math.abs(this.from.y - this.to.y);
      if (type === "discrete" || type === "diagonalCross") {
        var stepX;
        var stepY;
        if (dx <= dy) {
          stepX = stepY = factor * dy;
        } else {
          stepX = stepY = factor * dx;
        }
        if (this.from.x > this.to.x) {
          stepX = -stepX;
        }
        if (this.from.y >= this.to.y) {
          stepY = -stepY;
        }
        var xVia = this.from.x + stepX;
        var yVia = this.from.y + stepY;
        if (type === "discrete") {
          if (dx <= dy) {
            xVia = dx < factor * dy ? this.from.x : xVia;
          } else {
            yVia = dy < factor * dx ? this.from.y : yVia;
          }
        }
        return {
          x: xVia,
          y: yVia
        };
      } else if (type === "straightCross") {
        var _stepX = (1 - factor) * dx;
        var _stepY = (1 - factor) * dy;
        if (dx <= dy) {
          _stepX = 0;
          if (this.from.y < this.to.y) {
            _stepY = -_stepY;
          }
        } else {
          if (this.from.x < this.to.x) {
            _stepX = -_stepX;
          }
          _stepY = 0;
        }
        return {
          x: this.to.x + _stepX,
          y: this.to.y + _stepY
        };
      } else if (type === "horizontal") {
        var _stepX2 = (1 - factor) * dx;
        if (this.from.x < this.to.x) {
          _stepX2 = -_stepX2;
        }
        return {
          x: this.to.x + _stepX2,
          y: this.from.y
        };
      } else if (type === "vertical") {
        var _stepY2 = (1 - factor) * dy;
        if (this.from.y < this.to.y) {
          _stepY2 = -_stepY2;
        }
        return {
          x: this.from.x,
          y: this.to.y + _stepY2
        };
      } else if (type === "curvedCW") {
        dx = this.to.x - this.from.x;
        dy = this.from.y - this.to.y;
        var radius = Math.sqrt(dx * dx + dy * dy);
        var pi = Math.PI;
        var originalAngle = Math.atan2(dy, dx);
        var myAngle = (originalAngle + (factor * 0.5 + 0.5) * pi) % (2 * pi);
        return {
          x: this.from.x + (factor * 0.5 + 0.5) * radius * Math.sin(myAngle),
          y: this.from.y + (factor * 0.5 + 0.5) * radius * Math.cos(myAngle)
        };
      } else if (type === "curvedCCW") {
        dx = this.to.x - this.from.x;
        dy = this.from.y - this.to.y;
        var _radius = Math.sqrt(dx * dx + dy * dy);
        var _pi = Math.PI;
        var _originalAngle = Math.atan2(dy, dx);
        var _myAngle = (_originalAngle + (-factor * 0.5 + 0.5) * _pi) % (2 * _pi);
        return {
          x: this.from.x + (factor * 0.5 + 0.5) * _radius * Math.sin(_myAngle),
          y: this.from.y + (factor * 0.5 + 0.5) * _radius * Math.cos(_myAngle)
        };
      } else {
        var _stepX3;
        var _stepY3;
        if (dx <= dy) {
          _stepX3 = _stepY3 = factor * dy;
        } else {
          _stepX3 = _stepY3 = factor * dx;
        }
        if (this.from.x > this.to.x) {
          _stepX3 = -_stepX3;
        }
        if (this.from.y >= this.to.y) {
          _stepY3 = -_stepY3;
        }
        var _xVia = this.from.x + _stepX3;
        var _yVia = this.from.y + _stepY3;
        if (dx <= dy) {
          if (this.from.x <= this.to.x) {
            _xVia = this.to.x < _xVia ? this.to.x : _xVia;
          } else {
            _xVia = this.to.x > _xVia ? this.to.x : _xVia;
          }
        } else {
          if (this.from.y >= this.to.y) {
            _yVia = this.to.y > _yVia ? this.to.y : _yVia;
          } else {
            _yVia = this.to.y < _yVia ? this.to.y : _yVia;
          }
        }
        return {
          x: _xVia,
          y: _yVia
        };
      }
    }
  }, {
    key: "_findBorderPosition",
    value: function _findBorderPosition(nearNode, ctx) {
      var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      return this._findBorderPositionBezier(nearNode, ctx, options2.via);
    }
  }, {
    key: "_getDistanceToEdge",
    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
      var viaNode = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : this._getViaCoordinates();
      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, viaNode);
    }
  }, {
    key: "getPoint",
    value: function getPoint(position) {
      var viaNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._getViaCoordinates();
      var t = position;
      var x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;
      var y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;
      return {
        x,
        y
      };
    }
  }]);
  return BezierEdgeStatic2;
}(BezierEdgeBase);
function _createSuper$6(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$6();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$6() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var CubicBezierEdgeBase = function(_BezierEdgeBase) {
  _inherits2(CubicBezierEdgeBase2, _BezierEdgeBase);
  var _super = _createSuper$6(CubicBezierEdgeBase2);
  function CubicBezierEdgeBase2(options2, body, labelModule) {
    _classCallCheck2(this, CubicBezierEdgeBase2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(CubicBezierEdgeBase2, [{
    key: "_getDistanceToBezierEdge2",
    value: function _getDistanceToBezierEdge2(x1, y1, x2, y2, x3, y3, via1, via2) {
      var minDistance = 1e9;
      var lastX = x1;
      var lastY = y1;
      var vec = [0, 0, 0, 0];
      for (var i = 1; i < 10; i++) {
        var t = 0.1 * i;
        vec[0] = Math.pow(1 - t, 3);
        vec[1] = 3 * t * Math.pow(1 - t, 2);
        vec[2] = 3 * Math.pow(t, 2) * (1 - t);
        vec[3] = Math.pow(t, 3);
        var x = vec[0] * x1 + vec[1] * via1.x + vec[2] * via2.x + vec[3] * x2;
        var y = vec[0] * y1 + vec[1] * via1.y + vec[2] * via2.y + vec[3] * y2;
        if (i > 0) {
          var distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
          minDistance = distance < minDistance ? distance : minDistance;
        }
        lastX = x;
        lastY = y;
      }
      return minDistance;
    }
  }]);
  return CubicBezierEdgeBase2;
}(BezierEdgeBase);
function _createSuper$5(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$5();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$5() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var CubicBezierEdge = function(_CubicBezierEdgeBase) {
  _inherits2(CubicBezierEdge2, _CubicBezierEdgeBase);
  var _super = _createSuper$5(CubicBezierEdge2);
  function CubicBezierEdge2(options2, body, labelModule) {
    _classCallCheck2(this, CubicBezierEdge2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(CubicBezierEdge2, [{
    key: "_line",
    value: function _line(ctx, values5, viaNodes) {
      var via1 = viaNodes[0];
      var via2 = viaNodes[1];
      this._bezierCurve(ctx, values5, via1, via2);
    }
  }, {
    key: "_getViaCoordinates",
    value: function _getViaCoordinates() {
      var dx = this.from.x - this.to.x;
      var dy = this.from.y - this.to.y;
      var x1;
      var y1;
      var x2;
      var y2;
      var roundness = this.options.smooth.roundness;
      if ((Math.abs(dx) > Math.abs(dy) || this.options.smooth.forceDirection === true || this.options.smooth.forceDirection === "horizontal") && this.options.smooth.forceDirection !== "vertical") {
        y1 = this.from.y;
        y2 = this.to.y;
        x1 = this.from.x - roundness * dx;
        x2 = this.to.x + roundness * dx;
      } else {
        y1 = this.from.y - roundness * dy;
        y2 = this.to.y + roundness * dy;
        x1 = this.from.x;
        x2 = this.to.x;
      }
      return [{
        x: x1,
        y: y1
      }, {
        x: x2,
        y: y2
      }];
    }
  }, {
    key: "getViaNode",
    value: function getViaNode() {
      return this._getViaCoordinates();
    }
  }, {
    key: "_findBorderPosition",
    value: function _findBorderPosition(nearNode, ctx) {
      return this._findBorderPositionBezier(nearNode, ctx);
    }
  }, {
    key: "_getDistanceToEdge",
    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
      var _ref = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : this._getViaCoordinates(), _ref2 = _slicedToArray2(_ref, 2), via1 = _ref2[0], via2 = _ref2[1];
      return this._getDistanceToBezierEdge2(x1, y1, x2, y2, x3, y3, via1, via2);
    }
  }, {
    key: "getPoint",
    value: function getPoint(position) {
      var _ref3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._getViaCoordinates(), _ref4 = _slicedToArray2(_ref3, 2), via1 = _ref4[0], via2 = _ref4[1];
      var t = position;
      var vec = [Math.pow(1 - t, 3), 3 * t * Math.pow(1 - t, 2), 3 * Math.pow(t, 2) * (1 - t), Math.pow(t, 3)];
      var x = vec[0] * this.fromPoint.x + vec[1] * via1.x + vec[2] * via2.x + vec[3] * this.toPoint.x;
      var y = vec[0] * this.fromPoint.y + vec[1] * via1.y + vec[2] * via2.y + vec[3] * this.toPoint.y;
      return {
        x,
        y
      };
    }
  }]);
  return CubicBezierEdge2;
}(CubicBezierEdgeBase);
function _createSuper$4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$4() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var StraightEdge = function(_EdgeBase) {
  _inherits2(StraightEdge2, _EdgeBase);
  var _super = _createSuper$4(StraightEdge2);
  function StraightEdge2(options2, body, labelModule) {
    _classCallCheck2(this, StraightEdge2);
    return _super.call(this, options2, body, labelModule);
  }
  _createClass2(StraightEdge2, [{
    key: "_line",
    value: function _line(ctx, values5) {
      ctx.beginPath();
      ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
      ctx.lineTo(this.toPoint.x, this.toPoint.y);
      this.enableShadow(ctx, values5);
      ctx.stroke();
      this.disableShadow(ctx, values5);
    }
  }, {
    key: "getViaNode",
    value: function getViaNode() {
      return void 0;
    }
  }, {
    key: "getPoint",
    value: function getPoint(position) {
      return {
        x: (1 - position) * this.fromPoint.x + position * this.toPoint.x,
        y: (1 - position) * this.fromPoint.y + position * this.toPoint.y
      };
    }
  }, {
    key: "_findBorderPosition",
    value: function _findBorderPosition(nearNode, ctx) {
      var node1 = this.to;
      var node2 = this.from;
      if (nearNode.id === this.from.id) {
        node1 = this.from;
        node2 = this.to;
      }
      var angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
      var dx = node1.x - node2.x;
      var dy = node1.y - node2.y;
      var edgeSegmentLength = Math.sqrt(dx * dx + dy * dy);
      var toBorderDist = nearNode.distanceToBorder(ctx, angle);
      var toBorderPoint = (edgeSegmentLength - toBorderDist) / edgeSegmentLength;
      return {
        x: (1 - toBorderPoint) * node2.x + toBorderPoint * node1.x,
        y: (1 - toBorderPoint) * node2.y + toBorderPoint * node1.y,
        t: 0
      };
    }
  }, {
    key: "_getDistanceToEdge",
    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
      return this._getDistanceToLine(x1, y1, x2, y2, x3, y3);
    }
  }]);
  return StraightEdge2;
}(EdgeBase);
var Edge = function() {
  function Edge2(options2, body, imagelist, globalOptions, defaultOptions) {
    _classCallCheck2(this, Edge2);
    if (body === void 0) {
      throw new Error("No body provided");
    }
    this.options = bridgeObject(globalOptions);
    this.globalOptions = globalOptions;
    this.defaultOptions = defaultOptions;
    this.body = body;
    this.imagelist = imagelist;
    this.id = void 0;
    this.fromId = void 0;
    this.toId = void 0;
    this.selected = false;
    this.hover = false;
    this.labelDirty = true;
    this.baseWidth = this.options.width;
    this.baseFontSize = this.options.font.size;
    this.from = void 0;
    this.to = void 0;
    this.edgeType = void 0;
    this.connected = false;
    this.labelModule = new Label(this.body, this.options, true);
    this.setOptions(options2);
  }
  _createClass2(Edge2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      if (!options2) {
        return;
      }
      var affectsLayout = typeof options2.physics !== "undefined" && this.options.physics !== options2.physics || typeof options2.hidden !== "undefined" && (this.options.hidden || false) !== (options2.hidden || false) || typeof options2.from !== "undefined" && this.options.from !== options2.from || typeof options2.to !== "undefined" && this.options.to !== options2.to;
      Edge2.parseOptions(this.options, options2, true, this.globalOptions);
      if (options2.id !== void 0) {
        this.id = options2.id;
      }
      if (options2.from !== void 0) {
        this.fromId = options2.from;
      }
      if (options2.to !== void 0) {
        this.toId = options2.to;
      }
      if (options2.title !== void 0) {
        this.title = options2.title;
      }
      if (options2.value !== void 0) {
        options2.value = _parseFloat(options2.value);
      }
      var pile = [options2, this.options, this.defaultOptions];
      this.chooser = choosify("edge", pile);
      this.updateLabelModule(options2);
      affectsLayout = this.updateEdgeType() || affectsLayout;
      this._setInteractionWidths();
      this.connect();
      return affectsLayout;
    }
  }, {
    key: "getFormattingValues",
    value: function getFormattingValues() {
      var toArrow = this.options.arrows.to === true || this.options.arrows.to.enabled === true;
      var fromArrow = this.options.arrows.from === true || this.options.arrows.from.enabled === true;
      var middleArrow = this.options.arrows.middle === true || this.options.arrows.middle.enabled === true;
      var inheritsColor = this.options.color.inherit;
      var values5 = {
        toArrow,
        toArrowScale: this.options.arrows.to.scaleFactor,
        toArrowType: this.options.arrows.to.type,
        toArrowSrc: this.options.arrows.to.src,
        toArrowImageWidth: this.options.arrows.to.imageWidth,
        toArrowImageHeight: this.options.arrows.to.imageHeight,
        middleArrow,
        middleArrowScale: this.options.arrows.middle.scaleFactor,
        middleArrowType: this.options.arrows.middle.type,
        middleArrowSrc: this.options.arrows.middle.src,
        middleArrowImageWidth: this.options.arrows.middle.imageWidth,
        middleArrowImageHeight: this.options.arrows.middle.imageHeight,
        fromArrow,
        fromArrowScale: this.options.arrows.from.scaleFactor,
        fromArrowType: this.options.arrows.from.type,
        fromArrowSrc: this.options.arrows.from.src,
        fromArrowImageWidth: this.options.arrows.from.imageWidth,
        fromArrowImageHeight: this.options.arrows.from.imageHeight,
        arrowStrikethrough: this.options.arrowStrikethrough,
        color: inheritsColor ? void 0 : this.options.color.color,
        inheritsColor,
        opacity: this.options.color.opacity,
        hidden: this.options.hidden,
        length: this.options.length,
        shadow: this.options.shadow.enabled,
        shadowColor: this.options.shadow.color,
        shadowSize: this.options.shadow.size,
        shadowX: this.options.shadow.x,
        shadowY: this.options.shadow.y,
        dashes: this.options.dashes,
        width: this.options.width,
        background: this.options.background.enabled,
        backgroundColor: this.options.background.color,
        backgroundSize: this.options.background.size,
        backgroundDashes: this.options.background.dashes
      };
      if (this.selected || this.hover) {
        if (this.chooser === true) {
          if (this.selected) {
            var selectedWidth = this.options.selectionWidth;
            if (typeof selectedWidth === "function") {
              values5.width = selectedWidth(values5.width);
            } else if (typeof selectedWidth === "number") {
              values5.width += selectedWidth;
            }
            values5.width = Math.max(values5.width, 0.3 / this.body.view.scale);
            values5.color = this.options.color.highlight;
            values5.shadow = this.options.shadow.enabled;
          } else if (this.hover) {
            var hoverWidth = this.options.hoverWidth;
            if (typeof hoverWidth === "function") {
              values5.width = hoverWidth(values5.width);
            } else if (typeof hoverWidth === "number") {
              values5.width += hoverWidth;
            }
            values5.width = Math.max(values5.width, 0.3 / this.body.view.scale);
            values5.color = this.options.color.hover;
            values5.shadow = this.options.shadow.enabled;
          }
        } else if (typeof this.chooser === "function") {
          this.chooser(values5, this.options.id, this.selected, this.hover);
          if (values5.color !== void 0) {
            values5.inheritsColor = false;
          }
          if (values5.shadow === false) {
            if (values5.shadowColor !== this.options.shadow.color || values5.shadowSize !== this.options.shadow.size || values5.shadowX !== this.options.shadow.x || values5.shadowY !== this.options.shadow.y) {
              values5.shadow = true;
            }
          }
        }
      } else {
        values5.shadow = this.options.shadow.enabled;
        values5.width = Math.max(values5.width, 0.3 / this.body.view.scale);
      }
      return values5;
    }
  }, {
    key: "updateLabelModule",
    value: function updateLabelModule(options2) {
      var pile = [
        options2,
        this.options,
        this.globalOptions,
        this.defaultOptions
      ];
      this.labelModule.update(this.options, pile);
      if (this.labelModule.baseSize !== void 0) {
        this.baseFontSize = this.labelModule.baseSize;
      }
    }
  }, {
    key: "updateEdgeType",
    value: function updateEdgeType() {
      var smooth = this.options.smooth;
      var dataChanged = false;
      var changeInType = true;
      if (this.edgeType !== void 0) {
        if (this.edgeType instanceof BezierEdgeDynamic && smooth.enabled === true && smooth.type === "dynamic" || this.edgeType instanceof CubicBezierEdge && smooth.enabled === true && smooth.type === "cubicBezier" || this.edgeType instanceof BezierEdgeStatic && smooth.enabled === true && smooth.type !== "dynamic" && smooth.type !== "cubicBezier" || this.edgeType instanceof StraightEdge && smooth.type.enabled === false) {
          changeInType = false;
        }
        if (changeInType === true) {
          dataChanged = this.cleanup();
        }
      }
      if (changeInType === true) {
        if (smooth.enabled === true) {
          if (smooth.type === "dynamic") {
            dataChanged = true;
            this.edgeType = new BezierEdgeDynamic(this.options, this.body, this.labelModule);
          } else if (smooth.type === "cubicBezier") {
            this.edgeType = new CubicBezierEdge(this.options, this.body, this.labelModule);
          } else {
            this.edgeType = new BezierEdgeStatic(this.options, this.body, this.labelModule);
          }
        } else {
          this.edgeType = new StraightEdge(this.options, this.body, this.labelModule);
        }
      } else {
        this.edgeType.setOptions(this.options);
      }
      return dataChanged;
    }
  }, {
    key: "connect",
    value: function connect() {
      this.disconnect();
      this.from = this.body.nodes[this.fromId] || void 0;
      this.to = this.body.nodes[this.toId] || void 0;
      this.connected = this.from !== void 0 && this.to !== void 0;
      if (this.connected === true) {
        this.from.attachEdge(this);
        this.to.attachEdge(this);
      } else {
        if (this.from) {
          this.from.detachEdge(this);
        }
        if (this.to) {
          this.to.detachEdge(this);
        }
      }
      this.edgeType.connect();
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      if (this.from) {
        this.from.detachEdge(this);
        this.from = void 0;
      }
      if (this.to) {
        this.to.detachEdge(this);
        this.to = void 0;
      }
      this.connected = false;
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.title;
    }
  }, {
    key: "isSelected",
    value: function isSelected() {
      return this.selected;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.options.value;
    }
  }, {
    key: "setValueRange",
    value: function setValueRange(min3, max3, total) {
      if (this.options.value !== void 0) {
        var scale = this.options.scaling.customScalingFunction(min3, max3, total, this.options.value);
        var widthDiff = this.options.scaling.max - this.options.scaling.min;
        if (this.options.scaling.label.enabled === true) {
          var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
          this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
        }
        this.options.width = this.options.scaling.min + scale * widthDiff;
      } else {
        this.options.width = this.baseWidth;
        this.options.font.size = this.baseFontSize;
      }
      this._setInteractionWidths();
      this.updateLabelModule();
    }
  }, {
    key: "_setInteractionWidths",
    value: function _setInteractionWidths() {
      if (typeof this.options.hoverWidth === "function") {
        this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width);
      } else {
        this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width;
      }
      if (typeof this.options.selectionWidth === "function") {
        this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width);
      } else {
        this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
      }
    }
  }, {
    key: "draw",
    value: function draw(ctx) {
      var values5 = this.getFormattingValues();
      if (values5.hidden) {
        return;
      }
      var viaNode = this.edgeType.getViaNode();
      this.edgeType.drawLine(ctx, values5, this.selected, this.hover, viaNode);
      this.drawLabel(ctx, viaNode);
    }
  }, {
    key: "drawArrows",
    value: function drawArrows(ctx) {
      var values5 = this.getFormattingValues();
      if (values5.hidden) {
        return;
      }
      var viaNode = this.edgeType.getViaNode();
      var arrowData = {};
      this.edgeType.fromPoint = this.edgeType.from;
      this.edgeType.toPoint = this.edgeType.to;
      if (values5.fromArrow) {
        arrowData.from = this.edgeType.getArrowData(ctx, "from", viaNode, this.selected, this.hover, values5);
        if (values5.arrowStrikethrough === false)
          this.edgeType.fromPoint = arrowData.from.core;
        if (values5.fromArrowSrc) {
          arrowData.from.image = this.imagelist.load(values5.fromArrowSrc);
        }
        if (values5.fromArrowImageWidth) {
          arrowData.from.imageWidth = values5.fromArrowImageWidth;
        }
        if (values5.fromArrowImageHeight) {
          arrowData.from.imageHeight = values5.fromArrowImageHeight;
        }
      }
      if (values5.toArrow) {
        arrowData.to = this.edgeType.getArrowData(ctx, "to", viaNode, this.selected, this.hover, values5);
        if (values5.arrowStrikethrough === false)
          this.edgeType.toPoint = arrowData.to.core;
        if (values5.toArrowSrc) {
          arrowData.to.image = this.imagelist.load(values5.toArrowSrc);
        }
        if (values5.toArrowImageWidth) {
          arrowData.to.imageWidth = values5.toArrowImageWidth;
        }
        if (values5.toArrowImageHeight) {
          arrowData.to.imageHeight = values5.toArrowImageHeight;
        }
      }
      if (values5.middleArrow) {
        arrowData.middle = this.edgeType.getArrowData(ctx, "middle", viaNode, this.selected, this.hover, values5);
        if (values5.middleArrowSrc) {
          arrowData.middle.image = this.imagelist.load(values5.middleArrowSrc);
        }
        if (values5.middleArrowImageWidth) {
          arrowData.middle.imageWidth = values5.middleArrowImageWidth;
        }
        if (values5.middleArrowImageHeight) {
          arrowData.middle.imageHeight = values5.middleArrowImageHeight;
        }
      }
      if (values5.fromArrow) {
        this.edgeType.drawArrowHead(ctx, values5, this.selected, this.hover, arrowData.from);
      }
      if (values5.middleArrow) {
        this.edgeType.drawArrowHead(ctx, values5, this.selected, this.hover, arrowData.middle);
      }
      if (values5.toArrow) {
        this.edgeType.drawArrowHead(ctx, values5, this.selected, this.hover, arrowData.to);
      }
    }
  }, {
    key: "drawLabel",
    value: function drawLabel(ctx, viaNode) {
      if (this.options.label !== void 0) {
        var node1 = this.from;
        var node2 = this.to;
        if (this.labelModule.differentState(this.selected, this.hover)) {
          this.labelModule.getTextSize(ctx, this.selected, this.hover);
        }
        var point;
        if (node1.id != node2.id) {
          this.labelModule.pointToSelf = false;
          point = this.edgeType.getPoint(0.5, viaNode);
          ctx.save();
          var rotationPoint = this._getRotation(ctx);
          if (rotationPoint.angle != 0) {
            ctx.translate(rotationPoint.x, rotationPoint.y);
            ctx.rotate(rotationPoint.angle);
          }
          this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);
          ctx.restore();
        } else {
          this.labelModule.pointToSelf = true;
          var coordinates = getSelfRefCoordinates(ctx, this.options.selfReference.angle, this.options.selfReference.size, node1);
          point = this._pointOnCircle(coordinates.x, coordinates.y, this.options.selfReference.size, this.options.selfReference.angle);
          this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);
        }
      }
    }
  }, {
    key: "getItemsOnPoint",
    value: function getItemsOnPoint(point) {
      var ret = [];
      if (this.labelModule.visible()) {
        var rotationPoint = this._getRotation();
        if (pointInRect(this.labelModule.getSize(), point, rotationPoint)) {
          ret.push({
            edgeId: this.id,
            labelId: 0
          });
        }
      }
      var obj = {
        left: point.x,
        top: point.y
      };
      if (this.isOverlappingWith(obj)) {
        ret.push({
          edgeId: this.id
        });
      }
      return ret;
    }
  }, {
    key: "isOverlappingWith",
    value: function isOverlappingWith(obj) {
      if (this.connected) {
        var distMax = 10;
        var xFrom = this.from.x;
        var yFrom = this.from.y;
        var xTo = this.to.x;
        var yTo = this.to.y;
        var xObj = obj.left;
        var yObj = obj.top;
        var dist = this.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, xObj, yObj);
        return dist < distMax;
      } else {
        return false;
      }
    }
  }, {
    key: "_getRotation",
    value: function _getRotation(ctx) {
      var viaNode = this.edgeType.getViaNode();
      var point = this.edgeType.getPoint(0.5, viaNode);
      if (ctx !== void 0) {
        this.labelModule.calculateLabelSize(ctx, this.selected, this.hover, point.x, point.y);
      }
      var ret = {
        x: point.x,
        y: this.labelModule.size.yLine,
        angle: 0
      };
      if (!this.labelModule.visible()) {
        return ret;
      }
      if (this.options.font.align === "horizontal") {
        return ret;
      }
      var dy = this.from.y - this.to.y;
      var dx = this.from.x - this.to.x;
      var angle = Math.atan2(dy, dx);
      if (angle < -1 && dx < 0 || angle > 0 && dx < 0) {
        angle += Math.PI;
      }
      ret.angle = angle;
      return ret;
    }
  }, {
    key: "_pointOnCircle",
    value: function _pointOnCircle(x, y, radius, angle) {
      return {
        x: x + radius * Math.cos(angle),
        y: y - radius * Math.sin(angle)
      };
    }
  }, {
    key: "select",
    value: function select() {
      this.selected = true;
    }
  }, {
    key: "unselect",
    value: function unselect() {
      this.selected = false;
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      return this.edgeType.cleanup();
    }
  }, {
    key: "remove",
    value: function remove() {
      this.cleanup();
      this.disconnect();
      delete this.body.edges[this.id];
    }
  }, {
    key: "endPointsValid",
    value: function endPointsValid() {
      return this.body.nodes[this.fromId] !== void 0 && this.body.nodes[this.toId] !== void 0;
    }
  }], [{
    key: "parseOptions",
    value: function parseOptions(parentOptions, newOptions) {
      var allowDeletion = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var globalOptions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
      var copyFromGlobals = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var fields = ["endPointOffset", "arrowStrikethrough", "id", "from", "hidden", "hoverWidth", "labelHighlightBold", "length", "line", "opacity", "physics", "scaling", "selectionWidth", "selfReferenceSize", "selfReference", "to", "title", "value", "width", "font", "chosen", "widthConstraint"];
      selectiveDeepExtend(fields, parentOptions, newOptions, allowDeletion);
      if (newOptions.endPointOffset !== void 0 && newOptions.endPointOffset.from !== void 0) {
        if (_isFinite(newOptions.endPointOffset.from)) {
          parentOptions.endPointOffset.from = newOptions.endPointOffset.from;
        } else {
          parentOptions.endPointOffset.from = globalOptions.endPointOffset.from !== void 0 ? globalOptions.endPointOffset.from : 0;
          console.error("endPointOffset.from is not a valid number");
        }
      }
      if (newOptions.endPointOffset !== void 0 && newOptions.endPointOffset.to !== void 0) {
        if (_isFinite(newOptions.endPointOffset.to)) {
          parentOptions.endPointOffset.to = newOptions.endPointOffset.to;
        } else {
          parentOptions.endPointOffset.to = globalOptions.endPointOffset.to !== void 0 ? globalOptions.endPointOffset.to : 0;
          console.error("endPointOffset.to is not a valid number");
        }
      }
      if (isValidLabel(newOptions.label)) {
        parentOptions.label = newOptions.label;
      } else if (!isValidLabel(parentOptions.label)) {
        parentOptions.label = void 0;
      }
      mergeOptions(parentOptions, newOptions, "smooth", globalOptions);
      mergeOptions(parentOptions, newOptions, "shadow", globalOptions);
      mergeOptions(parentOptions, newOptions, "background", globalOptions);
      if (newOptions.dashes !== void 0 && newOptions.dashes !== null) {
        parentOptions.dashes = newOptions.dashes;
      } else if (allowDeletion === true && newOptions.dashes === null) {
        parentOptions.dashes = create$52(globalOptions.dashes);
      }
      if (newOptions.scaling !== void 0 && newOptions.scaling !== null) {
        if (newOptions.scaling.min !== void 0) {
          parentOptions.scaling.min = newOptions.scaling.min;
        }
        if (newOptions.scaling.max !== void 0) {
          parentOptions.scaling.max = newOptions.scaling.max;
        }
        mergeOptions(parentOptions.scaling, newOptions.scaling, "label", globalOptions.scaling);
      } else if (allowDeletion === true && newOptions.scaling === null) {
        parentOptions.scaling = create$52(globalOptions.scaling);
      }
      if (newOptions.arrows !== void 0 && newOptions.arrows !== null) {
        if (typeof newOptions.arrows === "string") {
          var arrows = newOptions.arrows.toLowerCase();
          parentOptions.arrows.to.enabled = indexOf4(arrows).call(arrows, "to") != -1;
          parentOptions.arrows.middle.enabled = indexOf4(arrows).call(arrows, "middle") != -1;
          parentOptions.arrows.from.enabled = indexOf4(arrows).call(arrows, "from") != -1;
        } else if (_typeof2(newOptions.arrows) === "object") {
          mergeOptions(parentOptions.arrows, newOptions.arrows, "to", globalOptions.arrows);
          mergeOptions(parentOptions.arrows, newOptions.arrows, "middle", globalOptions.arrows);
          mergeOptions(parentOptions.arrows, newOptions.arrows, "from", globalOptions.arrows);
        } else {
          throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + stringify$12(newOptions.arrows));
        }
      } else if (allowDeletion === true && newOptions.arrows === null) {
        parentOptions.arrows = create$52(globalOptions.arrows);
      }
      if (newOptions.color !== void 0 && newOptions.color !== null) {
        var fromColor = isString(newOptions.color) ? {
          color: newOptions.color,
          highlight: newOptions.color,
          hover: newOptions.color,
          inherit: false,
          opacity: 1
        } : newOptions.color;
        var toColor = parentOptions.color;
        if (copyFromGlobals) {
          deepExtend(toColor, globalOptions.color, false, allowDeletion);
        } else {
          for (var i in toColor) {
            if (Object.prototype.hasOwnProperty.call(toColor, i)) {
              delete toColor[i];
            }
          }
        }
        if (isString(toColor)) {
          toColor.color = toColor;
          toColor.highlight = toColor;
          toColor.hover = toColor;
          toColor.inherit = false;
          if (fromColor.opacity === void 0) {
            toColor.opacity = 1;
          }
        } else {
          var colorsDefined = false;
          if (fromColor.color !== void 0) {
            toColor.color = fromColor.color;
            colorsDefined = true;
          }
          if (fromColor.highlight !== void 0) {
            toColor.highlight = fromColor.highlight;
            colorsDefined = true;
          }
          if (fromColor.hover !== void 0) {
            toColor.hover = fromColor.hover;
            colorsDefined = true;
          }
          if (fromColor.inherit !== void 0) {
            toColor.inherit = fromColor.inherit;
          }
          if (fromColor.opacity !== void 0) {
            toColor.opacity = Math.min(1, Math.max(0, fromColor.opacity));
          }
          if (colorsDefined === true) {
            toColor.inherit = false;
          } else {
            if (toColor.inherit === void 0) {
              toColor.inherit = "from";
            }
          }
        }
      } else if (allowDeletion === true && newOptions.color === null) {
        parentOptions.color = bridgeObject(globalOptions.color);
      }
      if (allowDeletion === true && newOptions.font === null) {
        parentOptions.font = bridgeObject(globalOptions.font);
      }
      if (Object.prototype.hasOwnProperty.call(newOptions, "selfReferenceSize")) {
        console.warn("The selfReferenceSize property has been deprecated. Please use selfReference property instead. The selfReference can be set like thise selfReference:{size:30, angle:Math.PI / 4}");
        parentOptions.selfReference.size = newOptions.selfReferenceSize;
      }
    }
  }]);
  return Edge2;
}();
var EdgesHandler = function() {
  function EdgesHandler2(body, images, groups) {
    var _context, _this = this;
    _classCallCheck2(this, EdgesHandler2);
    this.body = body;
    this.images = images;
    this.groups = groups;
    this.body.functions.createEdge = bind$52(_context = this.create).call(_context, this);
    this.edgesListeners = {
      add: function add(event, params) {
        _this.add(params.items);
      },
      update: function update(event, params) {
        _this.update(params.items);
      },
      remove: function remove(event, params) {
        _this.remove(params.items);
      }
    };
    this.options = {};
    this.defaultOptions = {
      arrows: {
        to: {
          enabled: false,
          scaleFactor: 1,
          type: "arrow"
        },
        middle: {
          enabled: false,
          scaleFactor: 1,
          type: "arrow"
        },
        from: {
          enabled: false,
          scaleFactor: 1,
          type: "arrow"
        }
      },
      endPointOffset: {
        from: 0,
        to: 0
      },
      arrowStrikethrough: true,
      color: {
        color: "#848484",
        highlight: "#848484",
        hover: "#848484",
        inherit: "from",
        opacity: 1
      },
      dashes: false,
      font: {
        color: "#343434",
        size: 14,
        face: "arial",
        background: "none",
        strokeWidth: 2,
        strokeColor: "#ffffff",
        align: "horizontal",
        multi: false,
        vadjust: 0,
        bold: {
          mod: "bold"
        },
        boldital: {
          mod: "bold italic"
        },
        ital: {
          mod: "italic"
        },
        mono: {
          mod: "",
          size: 15,
          face: "courier new",
          vadjust: 2
        }
      },
      hidden: false,
      hoverWidth: 1.5,
      label: void 0,
      labelHighlightBold: true,
      length: void 0,
      physics: true,
      scaling: {
        min: 1,
        max: 15,
        label: {
          enabled: true,
          min: 14,
          max: 30,
          maxVisible: 30,
          drawThreshold: 5
        },
        customScalingFunction: function customScalingFunction(min3, max3, total, value) {
          if (max3 === min3) {
            return 0.5;
          } else {
            var scale = 1 / (max3 - min3);
            return Math.max(0, (value - min3) * scale);
          }
        }
      },
      selectionWidth: 1.5,
      selfReference: {
        size: 20,
        angle: Math.PI / 4,
        renderBehindTheNode: true
      },
      shadow: {
        enabled: false,
        color: "rgba(0,0,0,0.5)",
        size: 10,
        x: 5,
        y: 5
      },
      background: {
        enabled: false,
        color: "rgba(111,111,111,1)",
        size: 10,
        dashes: false
      },
      smooth: {
        enabled: true,
        type: "dynamic",
        forceDirection: "none",
        roundness: 0.5
      },
      title: void 0,
      width: 1,
      value: void 0
    };
    deepExtend(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  _createClass2(EdgesHandler2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this2 = this, _context2, _context3;
      this.body.emitter.on("_forceDisableDynamicCurves", function(type) {
        var emit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        if (type === "dynamic") {
          type = "continuous";
        }
        var dataChanged = false;
        for (var edgeId in _this2.body.edges) {
          if (Object.prototype.hasOwnProperty.call(_this2.body.edges, edgeId)) {
            var edge = _this2.body.edges[edgeId];
            var edgeData = _this2.body.data.edges.get(edgeId);
            if (edgeData != null) {
              var smoothOptions = edgeData.smooth;
              if (smoothOptions !== void 0) {
                if (smoothOptions.enabled === true && smoothOptions.type === "dynamic") {
                  if (type === void 0) {
                    edge.setOptions({
                      smooth: false
                    });
                  } else {
                    edge.setOptions({
                      smooth: {
                        type
                      }
                    });
                  }
                  dataChanged = true;
                }
              }
            }
          }
        }
        if (emit === true && dataChanged === true) {
          _this2.body.emitter.emit("_dataChanged");
        }
      });
      this.body.emitter.on("_dataUpdated", function() {
        _this2.reconnectEdges();
      });
      this.body.emitter.on("refreshEdges", bind$52(_context2 = this.refresh).call(_context2, this));
      this.body.emitter.on("refresh", bind$52(_context3 = this.refresh).call(_context3, this));
      this.body.emitter.on("destroy", function() {
        forEach$12(_this2.edgesListeners, function(callback, event) {
          if (_this2.body.data.edges)
            _this2.body.data.edges.off(event, callback);
        });
        delete _this2.body.functions.createEdge;
        delete _this2.edgesListeners.add;
        delete _this2.edgesListeners.update;
        delete _this2.edgesListeners.remove;
        delete _this2.edgesListeners;
      });
    }
  }, {
    key: "setOptions",
    value: function setOptions(options2) {
      if (options2 !== void 0) {
        Edge.parseOptions(this.options, options2, true, this.defaultOptions, true);
        var dataChanged = false;
        if (options2.smooth !== void 0) {
          for (var edgeId in this.body.edges) {
            if (Object.prototype.hasOwnProperty.call(this.body.edges, edgeId)) {
              dataChanged = this.body.edges[edgeId].updateEdgeType() || dataChanged;
            }
          }
        }
        if (options2.font !== void 0) {
          for (var _edgeId in this.body.edges) {
            if (Object.prototype.hasOwnProperty.call(this.body.edges, _edgeId)) {
              this.body.edges[_edgeId].updateLabelModule();
            }
          }
        }
        if (options2.hidden !== void 0 || options2.physics !== void 0 || dataChanged === true) {
          this.body.emitter.emit("_dataChanged");
        }
      }
    }
  }, {
    key: "setData",
    value: function setData(edges) {
      var _this3 = this;
      var doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var oldEdgesData = this.body.data.edges;
      if (isDataViewLike("id", edges)) {
        this.body.data.edges = edges;
      } else if (isArray$12(edges)) {
        this.body.data.edges = new DataSet();
        this.body.data.edges.add(edges);
      } else if (!edges) {
        this.body.data.edges = new DataSet();
      } else {
        throw new TypeError("Array or DataSet expected");
      }
      if (oldEdgesData) {
        forEach$12(this.edgesListeners, function(callback, event) {
          oldEdgesData.off(event, callback);
        });
      }
      this.body.edges = {};
      if (this.body.data.edges) {
        forEach$12(this.edgesListeners, function(callback, event) {
          _this3.body.data.edges.on(event, callback);
        });
        var ids = this.body.data.edges.getIds();
        this.add(ids, true);
      }
      this.body.emitter.emit("_adjustEdgesForHierarchicalLayout");
      if (doNotEmit === false) {
        this.body.emitter.emit("_dataChanged");
      }
    }
  }, {
    key: "add",
    value: function add(ids) {
      var doNotEmit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var edges = this.body.edges;
      var edgesData = this.body.data.edges;
      for (var i = 0; i < ids.length; i++) {
        var id3 = ids[i];
        var oldEdge = edges[id3];
        if (oldEdge) {
          oldEdge.disconnect();
        }
        var data3 = edgesData.get(id3, {
          showInternalIds: true
        });
        edges[id3] = this.create(data3);
      }
      this.body.emitter.emit("_adjustEdgesForHierarchicalLayout");
      if (doNotEmit === false) {
        this.body.emitter.emit("_dataChanged");
      }
    }
  }, {
    key: "update",
    value: function update(ids) {
      var edges = this.body.edges;
      var edgesData = this.body.data.edges;
      var dataChanged = false;
      for (var i = 0; i < ids.length; i++) {
        var id3 = ids[i];
        var data3 = edgesData.get(id3);
        var edge = edges[id3];
        if (edge !== void 0) {
          edge.disconnect();
          dataChanged = edge.setOptions(data3) || dataChanged;
          edge.connect();
        } else {
          this.body.edges[id3] = this.create(data3);
          dataChanged = true;
        }
      }
      if (dataChanged === true) {
        this.body.emitter.emit("_adjustEdgesForHierarchicalLayout");
        this.body.emitter.emit("_dataChanged");
      } else {
        this.body.emitter.emit("_dataUpdated");
      }
    }
  }, {
    key: "remove",
    value: function remove(ids) {
      var emit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (ids.length === 0)
        return;
      var edges = this.body.edges;
      forEach$12(ids, function(id3) {
        var edge = edges[id3];
        if (edge !== void 0) {
          edge.remove();
        }
      });
      if (emit) {
        this.body.emitter.emit("_dataChanged");
      }
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var _this4 = this;
      forEach$12(this.body.edges, function(edge, edgeId) {
        var data3 = _this4.body.data.edges.get(edgeId);
        if (data3 !== void 0) {
          edge.setOptions(data3);
        }
      });
    }
  }, {
    key: "create",
    value: function create9(properties) {
      return new Edge(properties, this.body, this.images, this.options, this.defaultOptions);
    }
  }, {
    key: "reconnectEdges",
    value: function reconnectEdges() {
      var id3;
      var nodes = this.body.nodes;
      var edges = this.body.edges;
      for (id3 in nodes) {
        if (Object.prototype.hasOwnProperty.call(nodes, id3)) {
          nodes[id3].edges = [];
        }
      }
      for (id3 in edges) {
        if (Object.prototype.hasOwnProperty.call(edges, id3)) {
          var edge = edges[id3];
          edge.from = null;
          edge.to = null;
          edge.connect();
        }
      }
    }
  }, {
    key: "getConnectedNodes",
    value: function getConnectedNodes(edgeId) {
      var nodeList = [];
      if (this.body.edges[edgeId] !== void 0) {
        var edge = this.body.edges[edgeId];
        if (edge.fromId !== void 0) {
          nodeList.push(edge.fromId);
        }
        if (edge.toId !== void 0) {
          nodeList.push(edge.toId);
        }
      }
      return nodeList;
    }
  }, {
    key: "_updateState",
    value: function _updateState() {
      this._addMissingEdges();
      this._removeInvalidEdges();
    }
  }, {
    key: "_removeInvalidEdges",
    value: function _removeInvalidEdges() {
      var _this5 = this;
      var edgesToDelete = [];
      forEach$12(this.body.edges, function(edge, id3) {
        var toNode = _this5.body.nodes[edge.toId];
        var fromNode = _this5.body.nodes[edge.fromId];
        if (toNode !== void 0 && toNode.isCluster === true || fromNode !== void 0 && fromNode.isCluster === true) {
          return;
        }
        if (toNode === void 0 || fromNode === void 0) {
          edgesToDelete.push(id3);
        }
      });
      this.remove(edgesToDelete, false);
    }
  }, {
    key: "_addMissingEdges",
    value: function _addMissingEdges() {
      var edgesData = this.body.data.edges;
      if (edgesData === void 0 || edgesData === null) {
        return;
      }
      var edges = this.body.edges;
      var addIds = [];
      forEach$22(edgesData).call(edgesData, function(edgeData, edgeId) {
        var edge = edges[edgeId];
        if (edge === void 0) {
          addIds.push(edgeId);
        }
      });
      this.add(addIds, true);
    }
  }]);
  return EdgesHandler2;
}();
var BarnesHutSolver = function() {
  function BarnesHutSolver2(body, physicsBody, options2) {
    _classCallCheck2(this, BarnesHutSolver2);
    this.body = body;
    this.physicsBody = physicsBody;
    this.barnesHutTree;
    this.setOptions(options2);
    this._rng = Alea("BARNES HUT SOLVER");
  }
  _createClass2(BarnesHutSolver2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      this.options = options2;
      this.thetaInversed = 1 / this.options.theta;
      this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));
    }
  }, {
    key: "solve",
    value: function solve() {
      if (this.options.gravitationalConstant !== 0 && this.physicsBody.physicsNodeIndices.length > 0) {
        var node;
        var nodes = this.body.nodes;
        var nodeIndices = this.physicsBody.physicsNodeIndices;
        var nodeCount = nodeIndices.length;
        var barnesHutTree = this._formBarnesHutTree(nodes, nodeIndices);
        this.barnesHutTree = barnesHutTree;
        for (var i = 0; i < nodeCount; i++) {
          node = nodes[nodeIndices[i]];
          if (node.options.mass > 0) {
            this._getForceContributions(barnesHutTree.root, node);
          }
        }
      }
    }
  }, {
    key: "_getForceContributions",
    value: function _getForceContributions(parentBranch, node) {
      this._getForceContribution(parentBranch.children.NW, node);
      this._getForceContribution(parentBranch.children.NE, node);
      this._getForceContribution(parentBranch.children.SW, node);
      this._getForceContribution(parentBranch.children.SE, node);
    }
  }, {
    key: "_getForceContribution",
    value: function _getForceContribution(parentBranch, node) {
      if (parentBranch.childrenCount > 0) {
        var dx = parentBranch.centerOfMass.x - node.x;
        var dy = parentBranch.centerOfMass.y - node.y;
        var distance = Math.sqrt(dx * dx + dy * dy);
        if (distance * parentBranch.calcSize > this.thetaInversed) {
          this._calculateForces(distance, dx, dy, node, parentBranch);
        } else {
          if (parentBranch.childrenCount === 4) {
            this._getForceContributions(parentBranch, node);
          } else {
            if (parentBranch.children.data.id != node.id) {
              this._calculateForces(distance, dx, dy, node, parentBranch);
            }
          }
        }
      }
    }
  }, {
    key: "_calculateForces",
    value: function _calculateForces(distance, dx, dy, node, parentBranch) {
      if (distance === 0) {
        distance = 0.1;
        dx = distance;
      }
      if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
        distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
      }
      var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass / Math.pow(distance, 3);
      var fx = dx * gravityForce;
      var fy = dy * gravityForce;
      this.physicsBody.forces[node.id].x += fx;
      this.physicsBody.forces[node.id].y += fy;
    }
  }, {
    key: "_formBarnesHutTree",
    value: function _formBarnesHutTree(nodes, nodeIndices) {
      var node;
      var nodeCount = nodeIndices.length;
      var minX = nodes[nodeIndices[0]].x;
      var minY = nodes[nodeIndices[0]].y;
      var maxX = nodes[nodeIndices[0]].x;
      var maxY = nodes[nodeIndices[0]].y;
      for (var i = 1; i < nodeCount; i++) {
        var _node = nodes[nodeIndices[i]];
        var x = _node.x;
        var y = _node.y;
        if (_node.options.mass > 0) {
          if (x < minX) {
            minX = x;
          }
          if (x > maxX) {
            maxX = x;
          }
          if (y < minY) {
            minY = y;
          }
          if (y > maxY) {
            maxY = y;
          }
        }
      }
      var sizeDiff = Math.abs(maxX - minX) - Math.abs(maxY - minY);
      if (sizeDiff > 0) {
        minY -= 0.5 * sizeDiff;
        maxY += 0.5 * sizeDiff;
      } else {
        minX += 0.5 * sizeDiff;
        maxX -= 0.5 * sizeDiff;
      }
      var minimumTreeSize = 1e-5;
      var rootSize = Math.max(minimumTreeSize, Math.abs(maxX - minX));
      var halfRootSize = 0.5 * rootSize;
      var centerX = 0.5 * (minX + maxX), centerY = 0.5 * (minY + maxY);
      var barnesHutTree = {
        root: {
          centerOfMass: {
            x: 0,
            y: 0
          },
          mass: 0,
          range: {
            minX: centerX - halfRootSize,
            maxX: centerX + halfRootSize,
            minY: centerY - halfRootSize,
            maxY: centerY + halfRootSize
          },
          size: rootSize,
          calcSize: 1 / rootSize,
          children: {
            data: null
          },
          maxWidth: 0,
          level: 0,
          childrenCount: 4
        }
      };
      this._splitBranch(barnesHutTree.root);
      for (var _i = 0; _i < nodeCount; _i++) {
        node = nodes[nodeIndices[_i]];
        if (node.options.mass > 0) {
          this._placeInTree(barnesHutTree.root, node);
        }
      }
      return barnesHutTree;
    }
  }, {
    key: "_updateBranchMass",
    value: function _updateBranchMass(parentBranch, node) {
      var centerOfMass = parentBranch.centerOfMass;
      var totalMass = parentBranch.mass + node.options.mass;
      var totalMassInv = 1 / totalMass;
      centerOfMass.x = centerOfMass.x * parentBranch.mass + node.x * node.options.mass;
      centerOfMass.x *= totalMassInv;
      centerOfMass.y = centerOfMass.y * parentBranch.mass + node.y * node.options.mass;
      centerOfMass.y *= totalMassInv;
      parentBranch.mass = totalMass;
      var biggestSize = Math.max(Math.max(node.height, node.radius), node.width);
      parentBranch.maxWidth = parentBranch.maxWidth < biggestSize ? biggestSize : parentBranch.maxWidth;
    }
  }, {
    key: "_placeInTree",
    value: function _placeInTree(parentBranch, node, skipMassUpdate) {
      if (skipMassUpdate != true || skipMassUpdate === void 0) {
        this._updateBranchMass(parentBranch, node);
      }
      var range = parentBranch.children.NW.range;
      var region;
      if (range.maxX > node.x) {
        if (range.maxY > node.y) {
          region = "NW";
        } else {
          region = "SW";
        }
      } else {
        if (range.maxY > node.y) {
          region = "NE";
        } else {
          region = "SE";
        }
      }
      this._placeInRegion(parentBranch, node, region);
    }
  }, {
    key: "_placeInRegion",
    value: function _placeInRegion(parentBranch, node, region) {
      var children = parentBranch.children[region];
      switch (children.childrenCount) {
        case 0:
          children.children.data = node;
          children.childrenCount = 1;
          this._updateBranchMass(children, node);
          break;
        case 1:
          if (children.children.data.x === node.x && children.children.data.y === node.y) {
            node.x += this._rng();
            node.y += this._rng();
          } else {
            this._splitBranch(children);
            this._placeInTree(children, node);
          }
          break;
        case 4:
          this._placeInTree(children, node);
          break;
      }
    }
  }, {
    key: "_splitBranch",
    value: function _splitBranch(parentBranch) {
      var containedNode = null;
      if (parentBranch.childrenCount === 1) {
        containedNode = parentBranch.children.data;
        parentBranch.mass = 0;
        parentBranch.centerOfMass.x = 0;
        parentBranch.centerOfMass.y = 0;
      }
      parentBranch.childrenCount = 4;
      parentBranch.children.data = null;
      this._insertRegion(parentBranch, "NW");
      this._insertRegion(parentBranch, "NE");
      this._insertRegion(parentBranch, "SW");
      this._insertRegion(parentBranch, "SE");
      if (containedNode != null) {
        this._placeInTree(parentBranch, containedNode);
      }
    }
  }, {
    key: "_insertRegion",
    value: function _insertRegion(parentBranch, region) {
      var minX, maxX, minY, maxY;
      var childSize = 0.5 * parentBranch.size;
      switch (region) {
        case "NW":
          minX = parentBranch.range.minX;
          maxX = parentBranch.range.minX + childSize;
          minY = parentBranch.range.minY;
          maxY = parentBranch.range.minY + childSize;
          break;
        case "NE":
          minX = parentBranch.range.minX + childSize;
          maxX = parentBranch.range.maxX;
          minY = parentBranch.range.minY;
          maxY = parentBranch.range.minY + childSize;
          break;
        case "SW":
          minX = parentBranch.range.minX;
          maxX = parentBranch.range.minX + childSize;
          minY = parentBranch.range.minY + childSize;
          maxY = parentBranch.range.maxY;
          break;
        case "SE":
          minX = parentBranch.range.minX + childSize;
          maxX = parentBranch.range.maxX;
          minY = parentBranch.range.minY + childSize;
          maxY = parentBranch.range.maxY;
          break;
      }
      parentBranch.children[region] = {
        centerOfMass: {
          x: 0,
          y: 0
        },
        mass: 0,
        range: {
          minX,
          maxX,
          minY,
          maxY
        },
        size: 0.5 * parentBranch.size,
        calcSize: 2 * parentBranch.calcSize,
        children: {
          data: null
        },
        maxWidth: 0,
        level: parentBranch.level + 1,
        childrenCount: 0
      };
    }
  }, {
    key: "_debug",
    value: function _debug(ctx, color) {
      if (this.barnesHutTree !== void 0) {
        ctx.lineWidth = 1;
        this._drawBranch(this.barnesHutTree.root, ctx, color);
      }
    }
  }, {
    key: "_drawBranch",
    value: function _drawBranch(branch, ctx, color) {
      if (color === void 0) {
        color = "#FF0000";
      }
      if (branch.childrenCount === 4) {
        this._drawBranch(branch.children.NW, ctx);
        this._drawBranch(branch.children.NE, ctx);
        this._drawBranch(branch.children.SE, ctx);
        this._drawBranch(branch.children.SW, ctx);
      }
      ctx.strokeStyle = color;
      ctx.beginPath();
      ctx.moveTo(branch.range.minX, branch.range.minY);
      ctx.lineTo(branch.range.maxX, branch.range.minY);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(branch.range.maxX, branch.range.minY);
      ctx.lineTo(branch.range.maxX, branch.range.maxY);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(branch.range.maxX, branch.range.maxY);
      ctx.lineTo(branch.range.minX, branch.range.maxY);
      ctx.stroke();
      ctx.beginPath();
      ctx.moveTo(branch.range.minX, branch.range.maxY);
      ctx.lineTo(branch.range.minX, branch.range.minY);
      ctx.stroke();
    }
  }]);
  return BarnesHutSolver2;
}();
var RepulsionSolver = function() {
  function RepulsionSolver2(body, physicsBody, options2) {
    _classCallCheck2(this, RepulsionSolver2);
    this._rng = Alea("REPULSION SOLVER");
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options2);
  }
  _createClass2(RepulsionSolver2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      this.options = options2;
    }
  }, {
    key: "solve",
    value: function solve() {
      var dx, dy, distance, fx, fy, repulsingForce, node1, node2;
      var nodes = this.body.nodes;
      var nodeIndices = this.physicsBody.physicsNodeIndices;
      var forces = this.physicsBody.forces;
      var nodeDistance = this.options.nodeDistance;
      var a = -2 / 3 / nodeDistance;
      var b = 4 / 3;
      for (var i = 0; i < nodeIndices.length - 1; i++) {
        node1 = nodes[nodeIndices[i]];
        for (var j = i + 1; j < nodeIndices.length; j++) {
          node2 = nodes[nodeIndices[j]];
          dx = node2.x - node1.x;
          dy = node2.y - node1.y;
          distance = Math.sqrt(dx * dx + dy * dy);
          if (distance === 0) {
            distance = 0.1 * this._rng();
            dx = distance;
          }
          if (distance < 2 * nodeDistance) {
            if (distance < 0.5 * nodeDistance) {
              repulsingForce = 1;
            } else {
              repulsingForce = a * distance + b;
            }
            repulsingForce = repulsingForce / distance;
            fx = dx * repulsingForce;
            fy = dy * repulsingForce;
            forces[node1.id].x -= fx;
            forces[node1.id].y -= fy;
            forces[node2.id].x += fx;
            forces[node2.id].y += fy;
          }
        }
      }
    }
  }]);
  return RepulsionSolver2;
}();
var HierarchicalRepulsionSolver = function() {
  function HierarchicalRepulsionSolver2(body, physicsBody, options2) {
    _classCallCheck2(this, HierarchicalRepulsionSolver2);
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options2);
  }
  _createClass2(HierarchicalRepulsionSolver2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      this.options = options2;
      this.overlapAvoidanceFactor = Math.max(0, Math.min(1, this.options.avoidOverlap || 0));
    }
  }, {
    key: "solve",
    value: function solve() {
      var nodes = this.body.nodes;
      var nodeIndices = this.physicsBody.physicsNodeIndices;
      var forces = this.physicsBody.forces;
      var nodeDistance = this.options.nodeDistance;
      for (var i = 0; i < nodeIndices.length - 1; i++) {
        var node1 = nodes[nodeIndices[i]];
        for (var j = i + 1; j < nodeIndices.length; j++) {
          var node2 = nodes[nodeIndices[j]];
          if (node1.level === node2.level) {
            var theseNodesDistance = nodeDistance + this.overlapAvoidanceFactor * ((node1.shape.radius || 0) / 2 + (node2.shape.radius || 0) / 2);
            var dx = node2.x - node1.x;
            var dy = node2.y - node1.y;
            var distance = Math.sqrt(dx * dx + dy * dy);
            var steepness = 0.05;
            var repulsingForce = void 0;
            if (distance < theseNodesDistance) {
              repulsingForce = -Math.pow(steepness * distance, 2) + Math.pow(steepness * theseNodesDistance, 2);
            } else {
              repulsingForce = 0;
            }
            if (distance !== 0) {
              repulsingForce = repulsingForce / distance;
            }
            var fx = dx * repulsingForce;
            var fy = dy * repulsingForce;
            forces[node1.id].x -= fx;
            forces[node1.id].y -= fy;
            forces[node2.id].x += fx;
            forces[node2.id].y += fy;
          }
        }
      }
    }
  }]);
  return HierarchicalRepulsionSolver2;
}();
var SpringSolver = function() {
  function SpringSolver2(body, physicsBody, options2) {
    _classCallCheck2(this, SpringSolver2);
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options2);
  }
  _createClass2(SpringSolver2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      this.options = options2;
    }
  }, {
    key: "solve",
    value: function solve() {
      var edgeLength, edge;
      var edgeIndices = this.physicsBody.physicsEdgeIndices;
      var edges = this.body.edges;
      var node1, node2, node3;
      for (var i = 0; i < edgeIndices.length; i++) {
        edge = edges[edgeIndices[i]];
        if (edge.connected === true && edge.toId !== edge.fromId) {
          if (this.body.nodes[edge.toId] !== void 0 && this.body.nodes[edge.fromId] !== void 0) {
            if (edge.edgeType.via !== void 0) {
              edgeLength = edge.options.length === void 0 ? this.options.springLength : edge.options.length;
              node1 = edge.to;
              node2 = edge.edgeType.via;
              node3 = edge.from;
              this._calculateSpringForce(node1, node2, 0.5 * edgeLength);
              this._calculateSpringForce(node2, node3, 0.5 * edgeLength);
            } else {
              edgeLength = edge.options.length === void 0 ? this.options.springLength * 1.5 : edge.options.length;
              this._calculateSpringForce(edge.from, edge.to, edgeLength);
            }
          }
        }
      }
    }
  }, {
    key: "_calculateSpringForce",
    value: function _calculateSpringForce(node1, node2, edgeLength) {
      var dx = node1.x - node2.x;
      var dy = node1.y - node2.y;
      var distance = Math.max(Math.sqrt(dx * dx + dy * dy), 0.01);
      var springForce = this.options.springConstant * (edgeLength - distance) / distance;
      var fx = dx * springForce;
      var fy = dy * springForce;
      if (this.physicsBody.forces[node1.id] !== void 0) {
        this.physicsBody.forces[node1.id].x += fx;
        this.physicsBody.forces[node1.id].y += fy;
      }
      if (this.physicsBody.forces[node2.id] !== void 0) {
        this.physicsBody.forces[node2.id].x -= fx;
        this.physicsBody.forces[node2.id].y -= fy;
      }
    }
  }]);
  return SpringSolver2;
}();
var HierarchicalSpringSolver = function() {
  function HierarchicalSpringSolver2(body, physicsBody, options2) {
    _classCallCheck2(this, HierarchicalSpringSolver2);
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options2);
  }
  _createClass2(HierarchicalSpringSolver2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      this.options = options2;
    }
  }, {
    key: "solve",
    value: function solve() {
      var edgeLength, edge;
      var dx, dy, fx, fy, springForce, distance;
      var edges = this.body.edges;
      var factor = 0.5;
      var edgeIndices = this.physicsBody.physicsEdgeIndices;
      var nodeIndices = this.physicsBody.physicsNodeIndices;
      var forces = this.physicsBody.forces;
      for (var i = 0; i < nodeIndices.length; i++) {
        var nodeId = nodeIndices[i];
        forces[nodeId].springFx = 0;
        forces[nodeId].springFy = 0;
      }
      for (var _i = 0; _i < edgeIndices.length; _i++) {
        edge = edges[edgeIndices[_i]];
        if (edge.connected === true) {
          edgeLength = edge.options.length === void 0 ? this.options.springLength : edge.options.length;
          dx = edge.from.x - edge.to.x;
          dy = edge.from.y - edge.to.y;
          distance = Math.sqrt(dx * dx + dy * dy);
          distance = distance === 0 ? 0.01 : distance;
          springForce = this.options.springConstant * (edgeLength - distance) / distance;
          fx = dx * springForce;
          fy = dy * springForce;
          if (edge.to.level != edge.from.level) {
            if (forces[edge.toId] !== void 0) {
              forces[edge.toId].springFx -= fx;
              forces[edge.toId].springFy -= fy;
            }
            if (forces[edge.fromId] !== void 0) {
              forces[edge.fromId].springFx += fx;
              forces[edge.fromId].springFy += fy;
            }
          } else {
            if (forces[edge.toId] !== void 0) {
              forces[edge.toId].x -= factor * fx;
              forces[edge.toId].y -= factor * fy;
            }
            if (forces[edge.fromId] !== void 0) {
              forces[edge.fromId].x += factor * fx;
              forces[edge.fromId].y += factor * fy;
            }
          }
        }
      }
      springForce = 1;
      var springFx, springFy;
      for (var _i2 = 0; _i2 < nodeIndices.length; _i2++) {
        var _nodeId = nodeIndices[_i2];
        springFx = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFx));
        springFy = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFy));
        forces[_nodeId].x += springFx;
        forces[_nodeId].y += springFy;
      }
      var totalFx = 0;
      var totalFy = 0;
      for (var _i3 = 0; _i3 < nodeIndices.length; _i3++) {
        var _nodeId2 = nodeIndices[_i3];
        totalFx += forces[_nodeId2].x;
        totalFy += forces[_nodeId2].y;
      }
      var correctionFx = totalFx / nodeIndices.length;
      var correctionFy = totalFy / nodeIndices.length;
      for (var _i4 = 0; _i4 < nodeIndices.length; _i4++) {
        var _nodeId3 = nodeIndices[_i4];
        forces[_nodeId3].x -= correctionFx;
        forces[_nodeId3].y -= correctionFy;
      }
    }
  }]);
  return HierarchicalSpringSolver2;
}();
var CentralGravitySolver = function() {
  function CentralGravitySolver2(body, physicsBody, options2) {
    _classCallCheck2(this, CentralGravitySolver2);
    this.body = body;
    this.physicsBody = physicsBody;
    this.setOptions(options2);
  }
  _createClass2(CentralGravitySolver2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      this.options = options2;
    }
  }, {
    key: "solve",
    value: function solve() {
      var dx, dy, distance, node;
      var nodes = this.body.nodes;
      var nodeIndices = this.physicsBody.physicsNodeIndices;
      var forces = this.physicsBody.forces;
      for (var i = 0; i < nodeIndices.length; i++) {
        var nodeId = nodeIndices[i];
        node = nodes[nodeId];
        dx = -node.x;
        dy = -node.y;
        distance = Math.sqrt(dx * dx + dy * dy);
        this._calculateForces(distance, dx, dy, forces, node);
      }
    }
  }, {
    key: "_calculateForces",
    value: function _calculateForces(distance, dx, dy, forces, node) {
      var gravityForce = distance === 0 ? 0 : this.options.centralGravity / distance;
      forces[node.id].x = dx * gravityForce;
      forces[node.id].y = dy * gravityForce;
    }
  }]);
  return CentralGravitySolver2;
}();
function _createSuper$3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$3() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ForceAtlas2BasedRepulsionSolver = function(_BarnesHutSolver) {
  _inherits2(ForceAtlas2BasedRepulsionSolver2, _BarnesHutSolver);
  var _super = _createSuper$3(ForceAtlas2BasedRepulsionSolver2);
  function ForceAtlas2BasedRepulsionSolver2(body, physicsBody, options2) {
    var _this;
    _classCallCheck2(this, ForceAtlas2BasedRepulsionSolver2);
    _this = _super.call(this, body, physicsBody, options2);
    _this._rng = Alea("FORCE ATLAS 2 BASED REPULSION SOLVER");
    return _this;
  }
  _createClass2(ForceAtlas2BasedRepulsionSolver2, [{
    key: "_calculateForces",
    value: function _calculateForces(distance, dx, dy, node, parentBranch) {
      if (distance === 0) {
        distance = 0.1 * this._rng();
        dx = distance;
      }
      if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
        distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
      }
      var degree = node.edges.length + 1;
      var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass * degree / Math.pow(distance, 2);
      var fx = dx * gravityForce;
      var fy = dy * gravityForce;
      this.physicsBody.forces[node.id].x += fx;
      this.physicsBody.forces[node.id].y += fy;
    }
  }]);
  return ForceAtlas2BasedRepulsionSolver2;
}(BarnesHutSolver);
function _createSuper$2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$2() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ForceAtlas2BasedCentralGravitySolver = function(_CentralGravitySolver) {
  _inherits2(ForceAtlas2BasedCentralGravitySolver2, _CentralGravitySolver);
  var _super = _createSuper$2(ForceAtlas2BasedCentralGravitySolver2);
  function ForceAtlas2BasedCentralGravitySolver2(body, physicsBody, options2) {
    _classCallCheck2(this, ForceAtlas2BasedCentralGravitySolver2);
    return _super.call(this, body, physicsBody, options2);
  }
  _createClass2(ForceAtlas2BasedCentralGravitySolver2, [{
    key: "_calculateForces",
    value: function _calculateForces(distance, dx, dy, forces, node) {
      if (distance > 0) {
        var degree = node.edges.length + 1;
        var gravityForce = this.options.centralGravity * degree * node.options.mass;
        forces[node.id].x = dx * gravityForce;
        forces[node.id].y = dy * gravityForce;
      }
    }
  }]);
  return ForceAtlas2BasedCentralGravitySolver2;
}(CentralGravitySolver);
var PhysicsEngine = function() {
  function PhysicsEngine2(body) {
    _classCallCheck2(this, PhysicsEngine2);
    this.body = body;
    this.physicsBody = {
      physicsNodeIndices: [],
      physicsEdgeIndices: [],
      forces: {},
      velocities: {}
    };
    this.physicsEnabled = true;
    this.simulationInterval = 1e3 / 60;
    this.requiresTimeout = true;
    this.previousStates = {};
    this.referenceState = {};
    this.freezeCache = {};
    this.renderTimer = void 0;
    this.adaptiveTimestep = false;
    this.adaptiveTimestepEnabled = false;
    this.adaptiveCounter = 0;
    this.adaptiveInterval = 3;
    this.stabilized = false;
    this.startedStabilization = false;
    this.stabilizationIterations = 0;
    this.ready = false;
    this.options = {};
    this.defaultOptions = {
      enabled: true,
      barnesHut: {
        theta: 0.5,
        gravitationalConstant: -2e3,
        centralGravity: 0.3,
        springLength: 95,
        springConstant: 0.04,
        damping: 0.09,
        avoidOverlap: 0
      },
      forceAtlas2Based: {
        theta: 0.5,
        gravitationalConstant: -50,
        centralGravity: 0.01,
        springConstant: 0.08,
        springLength: 100,
        damping: 0.4,
        avoidOverlap: 0
      },
      repulsion: {
        centralGravity: 0.2,
        springLength: 200,
        springConstant: 0.05,
        nodeDistance: 100,
        damping: 0.09,
        avoidOverlap: 0
      },
      hierarchicalRepulsion: {
        centralGravity: 0,
        springLength: 100,
        springConstant: 0.01,
        nodeDistance: 120,
        damping: 0.09
      },
      maxVelocity: 50,
      minVelocity: 0.75,
      solver: "barnesHut",
      stabilization: {
        enabled: true,
        iterations: 1e3,
        updateInterval: 50,
        onlyDynamicEdges: false,
        fit: true
      },
      timestep: 0.5,
      adaptiveTimestep: true,
      wind: {
        x: 0,
        y: 0
      }
    };
    assign$22(this.options, this.defaultOptions);
    this.timestep = 0.5;
    this.layoutFailed = false;
    this.bindEventListeners();
  }
  _createClass2(PhysicsEngine2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this = this;
      this.body.emitter.on("initPhysics", function() {
        _this.initPhysics();
      });
      this.body.emitter.on("_layoutFailed", function() {
        _this.layoutFailed = true;
      });
      this.body.emitter.on("resetPhysics", function() {
        _this.stopSimulation();
        _this.ready = false;
      });
      this.body.emitter.on("disablePhysics", function() {
        _this.physicsEnabled = false;
        _this.stopSimulation();
      });
      this.body.emitter.on("restorePhysics", function() {
        _this.setOptions(_this.options);
        if (_this.ready === true) {
          _this.startSimulation();
        }
      });
      this.body.emitter.on("startSimulation", function() {
        if (_this.ready === true) {
          _this.startSimulation();
        }
      });
      this.body.emitter.on("stopSimulation", function() {
        _this.stopSimulation();
      });
      this.body.emitter.on("destroy", function() {
        _this.stopSimulation(false);
        _this.body.emitter.off();
      });
      this.body.emitter.on("_dataChanged", function() {
        _this.updatePhysicsData();
      });
    }
  }, {
    key: "setOptions",
    value: function setOptions(options2) {
      if (options2 !== void 0) {
        if (options2 === false) {
          this.options.enabled = false;
          this.physicsEnabled = false;
          this.stopSimulation();
        } else if (options2 === true) {
          this.options.enabled = true;
          this.physicsEnabled = true;
          this.startSimulation();
        } else {
          this.physicsEnabled = true;
          selectiveNotDeepExtend(["stabilization"], this.options, options2);
          mergeOptions(this.options, options2, "stabilization");
          if (options2.enabled === void 0) {
            this.options.enabled = true;
          }
          if (this.options.enabled === false) {
            this.physicsEnabled = false;
            this.stopSimulation();
          }
          var wind = this.options.wind;
          if (wind) {
            if (typeof wind.x !== "number" || isNan(wind.x)) {
              wind.x = 0;
            }
            if (typeof wind.y !== "number" || isNan(wind.y)) {
              wind.y = 0;
            }
          }
          this.timestep = this.options.timestep;
        }
      }
      this.init();
    }
  }, {
    key: "init",
    value: function init() {
      var options2;
      if (this.options.solver === "forceAtlas2Based") {
        options2 = this.options.forceAtlas2Based;
        this.nodesSolver = new ForceAtlas2BasedRepulsionSolver(this.body, this.physicsBody, options2);
        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options2);
        this.gravitySolver = new ForceAtlas2BasedCentralGravitySolver(this.body, this.physicsBody, options2);
      } else if (this.options.solver === "repulsion") {
        options2 = this.options.repulsion;
        this.nodesSolver = new RepulsionSolver(this.body, this.physicsBody, options2);
        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options2);
        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options2);
      } else if (this.options.solver === "hierarchicalRepulsion") {
        options2 = this.options.hierarchicalRepulsion;
        this.nodesSolver = new HierarchicalRepulsionSolver(this.body, this.physicsBody, options2);
        this.edgesSolver = new HierarchicalSpringSolver(this.body, this.physicsBody, options2);
        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options2);
      } else {
        options2 = this.options.barnesHut;
        this.nodesSolver = new BarnesHutSolver(this.body, this.physicsBody, options2);
        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options2);
        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options2);
      }
      this.modelOptions = options2;
    }
  }, {
    key: "initPhysics",
    value: function initPhysics() {
      if (this.physicsEnabled === true && this.options.enabled === true) {
        if (this.options.stabilization.enabled === true) {
          this.stabilize();
        } else {
          this.stabilized = false;
          this.ready = true;
          this.body.emitter.emit("fit", {}, this.layoutFailed);
          this.startSimulation();
        }
      } else {
        this.ready = true;
        this.body.emitter.emit("fit");
      }
    }
  }, {
    key: "startSimulation",
    value: function startSimulation() {
      if (this.physicsEnabled === true && this.options.enabled === true) {
        this.stabilized = false;
        this.adaptiveTimestep = false;
        this.body.emitter.emit("_resizeNodes");
        if (this.viewFunction === void 0) {
          var _context;
          this.viewFunction = bind$52(_context = this.simulationStep).call(_context, this);
          this.body.emitter.on("initRedraw", this.viewFunction);
          this.body.emitter.emit("_startRendering");
        }
      } else {
        this.body.emitter.emit("_redraw");
      }
    }
  }, {
    key: "stopSimulation",
    value: function stopSimulation() {
      var emit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      this.stabilized = true;
      if (emit === true) {
        this._emitStabilized();
      }
      if (this.viewFunction !== void 0) {
        this.body.emitter.off("initRedraw", this.viewFunction);
        this.viewFunction = void 0;
        if (emit === true) {
          this.body.emitter.emit("_stopRendering");
        }
      }
    }
  }, {
    key: "simulationStep",
    value: function simulationStep() {
      var startTime = now$1();
      this.physicsTick();
      var physicsTime = now$1() - startTime;
      if ((physicsTime < 0.4 * this.simulationInterval || this.runDoubleSpeed === true) && this.stabilized === false) {
        this.physicsTick();
        this.runDoubleSpeed = true;
      }
      if (this.stabilized === true) {
        this.stopSimulation();
      }
    }
  }, {
    key: "_emitStabilized",
    value: function _emitStabilized() {
      var _this2 = this;
      var amountOfIterations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.stabilizationIterations;
      if (this.stabilizationIterations > 1 || this.startedStabilization === true) {
        setTimeout$12(function() {
          _this2.body.emitter.emit("stabilized", {
            iterations: amountOfIterations
          });
          _this2.startedStabilization = false;
          _this2.stabilizationIterations = 0;
        }, 0);
      }
    }
  }, {
    key: "physicsStep",
    value: function physicsStep() {
      this.gravitySolver.solve();
      this.nodesSolver.solve();
      this.edgesSolver.solve();
      this.moveNodes();
    }
  }, {
    key: "adjustTimeStep",
    value: function adjustTimeStep() {
      var factor = 1.2;
      if (this._evaluateStepQuality() === true) {
        this.timestep = factor * this.timestep;
      } else {
        if (this.timestep / factor < this.options.timestep) {
          this.timestep = this.options.timestep;
        } else {
          this.adaptiveCounter = -1;
          this.timestep = Math.max(this.options.timestep, this.timestep / factor);
        }
      }
    }
  }, {
    key: "physicsTick",
    value: function physicsTick() {
      this._startStabilizing();
      if (this.stabilized === true)
        return;
      if (this.adaptiveTimestep === true && this.adaptiveTimestepEnabled === true) {
        var doAdaptive = this.adaptiveCounter % this.adaptiveInterval === 0;
        if (doAdaptive) {
          this.timestep = 2 * this.timestep;
          this.physicsStep();
          this.revert();
          this.timestep = 0.5 * this.timestep;
          this.physicsStep();
          this.physicsStep();
          this.adjustTimeStep();
        } else {
          this.physicsStep();
        }
        this.adaptiveCounter += 1;
      } else {
        this.timestep = this.options.timestep;
        this.physicsStep();
      }
      if (this.stabilized === true)
        this.revert();
      this.stabilizationIterations++;
    }
  }, {
    key: "updatePhysicsData",
    value: function updatePhysicsData() {
      this.physicsBody.forces = {};
      this.physicsBody.physicsNodeIndices = [];
      this.physicsBody.physicsEdgeIndices = [];
      var nodes = this.body.nodes;
      var edges = this.body.edges;
      for (var nodeId in nodes) {
        if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {
          if (nodes[nodeId].options.physics === true) {
            this.physicsBody.physicsNodeIndices.push(nodes[nodeId].id);
          }
        }
      }
      for (var edgeId in edges) {
        if (Object.prototype.hasOwnProperty.call(edges, edgeId)) {
          if (edges[edgeId].options.physics === true) {
            this.physicsBody.physicsEdgeIndices.push(edges[edgeId].id);
          }
        }
      }
      for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
        var _nodeId = this.physicsBody.physicsNodeIndices[i];
        this.physicsBody.forces[_nodeId] = {
          x: 0,
          y: 0
        };
        if (this.physicsBody.velocities[_nodeId] === void 0) {
          this.physicsBody.velocities[_nodeId] = {
            x: 0,
            y: 0
          };
        }
      }
      for (var _nodeId2 in this.physicsBody.velocities) {
        if (nodes[_nodeId2] === void 0) {
          delete this.physicsBody.velocities[_nodeId2];
        }
      }
    }
  }, {
    key: "revert",
    value: function revert() {
      var nodeIds = keys6(this.previousStates);
      var nodes = this.body.nodes;
      var velocities = this.physicsBody.velocities;
      this.referenceState = {};
      for (var i = 0; i < nodeIds.length; i++) {
        var nodeId = nodeIds[i];
        if (nodes[nodeId] !== void 0) {
          if (nodes[nodeId].options.physics === true) {
            this.referenceState[nodeId] = {
              positions: {
                x: nodes[nodeId].x,
                y: nodes[nodeId].y
              }
            };
            velocities[nodeId].x = this.previousStates[nodeId].vx;
            velocities[nodeId].y = this.previousStates[nodeId].vy;
            nodes[nodeId].x = this.previousStates[nodeId].x;
            nodes[nodeId].y = this.previousStates[nodeId].y;
          }
        } else {
          delete this.previousStates[nodeId];
        }
      }
    }
  }, {
    key: "_evaluateStepQuality",
    value: function _evaluateStepQuality() {
      var dx, dy, dpos;
      var nodes = this.body.nodes;
      var reference = this.referenceState;
      var posThreshold = 0.3;
      for (var nodeId in this.referenceState) {
        if (Object.prototype.hasOwnProperty.call(this.referenceState, nodeId) && nodes[nodeId] !== void 0) {
          dx = nodes[nodeId].x - reference[nodeId].positions.x;
          dy = nodes[nodeId].y - reference[nodeId].positions.y;
          dpos = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
          if (dpos > posThreshold) {
            return false;
          }
        }
      }
      return true;
    }
  }, {
    key: "moveNodes",
    value: function moveNodes() {
      var nodeIndices = this.physicsBody.physicsNodeIndices;
      var maxNodeVelocity = 0;
      var averageNodeVelocity = 0;
      var velocityAdaptiveThreshold = 5;
      for (var i = 0; i < nodeIndices.length; i++) {
        var nodeId = nodeIndices[i];
        var nodeVelocity = this._performStep(nodeId);
        maxNodeVelocity = Math.max(maxNodeVelocity, nodeVelocity);
        averageNodeVelocity += nodeVelocity;
      }
      this.adaptiveTimestepEnabled = averageNodeVelocity / nodeIndices.length < velocityAdaptiveThreshold;
      this.stabilized = maxNodeVelocity < this.options.minVelocity;
    }
  }, {
    key: "calculateComponentVelocity",
    value: function calculateComponentVelocity(v, f, m) {
      var df = this.modelOptions.damping * v;
      var a = (f - df) / m;
      v += a * this.timestep;
      var maxV = this.options.maxVelocity || 1e9;
      if (Math.abs(v) > maxV) {
        v = v > 0 ? maxV : -maxV;
      }
      return v;
    }
  }, {
    key: "_performStep",
    value: function _performStep(nodeId) {
      var node = this.body.nodes[nodeId];
      var force = this.physicsBody.forces[nodeId];
      if (this.options.wind) {
        force.x += this.options.wind.x;
        force.y += this.options.wind.y;
      }
      var velocity = this.physicsBody.velocities[nodeId];
      this.previousStates[nodeId] = {
        x: node.x,
        y: node.y,
        vx: velocity.x,
        vy: velocity.y
      };
      if (node.options.fixed.x === false) {
        velocity.x = this.calculateComponentVelocity(velocity.x, force.x, node.options.mass);
        node.x += velocity.x * this.timestep;
      } else {
        force.x = 0;
        velocity.x = 0;
      }
      if (node.options.fixed.y === false) {
        velocity.y = this.calculateComponentVelocity(velocity.y, force.y, node.options.mass);
        node.y += velocity.y * this.timestep;
      } else {
        force.y = 0;
        velocity.y = 0;
      }
      var totalVelocity = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2));
      return totalVelocity;
    }
  }, {
    key: "_freezeNodes",
    value: function _freezeNodes() {
      var nodes = this.body.nodes;
      for (var id3 in nodes) {
        if (Object.prototype.hasOwnProperty.call(nodes, id3)) {
          if (nodes[id3].x && nodes[id3].y) {
            var fixed = nodes[id3].options.fixed;
            this.freezeCache[id3] = {
              x: fixed.x,
              y: fixed.y
            };
            fixed.x = true;
            fixed.y = true;
          }
        }
      }
    }
  }, {
    key: "_restoreFrozenNodes",
    value: function _restoreFrozenNodes() {
      var nodes = this.body.nodes;
      for (var id3 in nodes) {
        if (Object.prototype.hasOwnProperty.call(nodes, id3)) {
          if (this.freezeCache[id3] !== void 0) {
            nodes[id3].options.fixed.x = this.freezeCache[id3].x;
            nodes[id3].options.fixed.y = this.freezeCache[id3].y;
          }
        }
      }
      this.freezeCache = {};
    }
  }, {
    key: "stabilize",
    value: function stabilize() {
      var _this3 = this;
      var iterations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.options.stabilization.iterations;
      if (typeof iterations !== "number") {
        iterations = this.options.stabilization.iterations;
        console.error("The stabilize method needs a numeric amount of iterations. Switching to default: ", iterations);
      }
      if (this.physicsBody.physicsNodeIndices.length === 0) {
        this.ready = true;
        return;
      }
      this.adaptiveTimestep = this.options.adaptiveTimestep;
      this.body.emitter.emit("_resizeNodes");
      this.stopSimulation();
      this.stabilized = false;
      this.body.emitter.emit("_blockRedraw");
      this.targetIterations = iterations;
      if (this.options.stabilization.onlyDynamicEdges === true) {
        this._freezeNodes();
      }
      this.stabilizationIterations = 0;
      setTimeout$12(function() {
        return _this3._stabilizationBatch();
      }, 0);
    }
  }, {
    key: "_startStabilizing",
    value: function _startStabilizing() {
      if (this.startedStabilization === true)
        return false;
      this.body.emitter.emit("startStabilizing");
      this.startedStabilization = true;
      return true;
    }
  }, {
    key: "_stabilizationBatch",
    value: function _stabilizationBatch() {
      var _this4 = this;
      var running = function running2() {
        return _this4.stabilized === false && _this4.stabilizationIterations < _this4.targetIterations;
      };
      var sendProgress = function sendProgress2() {
        _this4.body.emitter.emit("stabilizationProgress", {
          iterations: _this4.stabilizationIterations,
          total: _this4.targetIterations
        });
      };
      if (this._startStabilizing()) {
        sendProgress();
      }
      var count = 0;
      while (running() && count < this.options.stabilization.updateInterval) {
        this.physicsTick();
        count++;
      }
      sendProgress();
      if (running()) {
        var _context2;
        setTimeout$12(bind$52(_context2 = this._stabilizationBatch).call(_context2, this), 0);
      } else {
        this._finalizeStabilization();
      }
    }
  }, {
    key: "_finalizeStabilization",
    value: function _finalizeStabilization() {
      this.body.emitter.emit("_allowRedraw");
      if (this.options.stabilization.fit === true) {
        this.body.emitter.emit("fit");
      }
      if (this.options.stabilization.onlyDynamicEdges === true) {
        this._restoreFrozenNodes();
      }
      this.body.emitter.emit("stabilizationIterationsDone");
      this.body.emitter.emit("_requestRedraw");
      if (this.stabilized === true) {
        this._emitStabilized();
      } else {
        this.startSimulation();
      }
      this.ready = true;
    }
  }, {
    key: "_drawForces",
    value: function _drawForces(ctx) {
      for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
        var index2 = this.physicsBody.physicsNodeIndices[i];
        var node = this.body.nodes[index2];
        var force = this.physicsBody.forces[index2];
        var factor = 20;
        var colorFactor = 0.03;
        var forceSize = Math.sqrt(Math.pow(force.x, 2) + Math.pow(force.x, 2));
        var size = Math.min(Math.max(5, forceSize), 15);
        var arrowSize = 3 * size;
        var color = HSVToHex((180 - Math.min(1, Math.max(0, colorFactor * forceSize)) * 180) / 360, 1, 1);
        var point = {
          x: node.x + factor * force.x,
          y: node.y + factor * force.y
        };
        ctx.lineWidth = size;
        ctx.strokeStyle = color;
        ctx.beginPath();
        ctx.moveTo(node.x, node.y);
        ctx.lineTo(point.x, point.y);
        ctx.stroke();
        var angle = Math.atan2(force.y, force.x);
        ctx.fillStyle = color;
        EndPoints.draw(ctx, {
          type: "arrow",
          point,
          angle,
          length: arrowSize
        });
        fill4(ctx).call(ctx);
      }
    }
  }]);
  return PhysicsEngine2;
}();
var getRandomValues2;
var rnds82 = new Uint8Array(16);
function rng2() {
  if (!getRandomValues2) {
    getRandomValues2 = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues2) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues2(rnds82);
}
var REGEX2 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function validate2(uuid) {
  return typeof uuid === "string" && REGEX2.test(uuid);
}
var byteToHex2 = [];
for (var i = 0; i < 256; ++i) {
  byteToHex2.push((i + 256).toString(16).substr(1));
}
function stringify4(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex2[arr[offset + 0]] + byteToHex2[arr[offset + 1]] + byteToHex2[arr[offset + 2]] + byteToHex2[arr[offset + 3]] + "-" + byteToHex2[arr[offset + 4]] + byteToHex2[arr[offset + 5]] + "-" + byteToHex2[arr[offset + 6]] + byteToHex2[arr[offset + 7]] + "-" + byteToHex2[arr[offset + 8]] + byteToHex2[arr[offset + 9]] + "-" + byteToHex2[arr[offset + 10]] + byteToHex2[arr[offset + 11]] + byteToHex2[arr[offset + 12]] + byteToHex2[arr[offset + 13]] + byteToHex2[arr[offset + 14]] + byteToHex2[arr[offset + 15]]).toLowerCase();
  if (!validate2(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
function v42(options2, buf, offset) {
  options2 = options2 || {};
  var rnds = options2.random || (options2.rng || rng2)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify4(rnds);
}
var NetworkUtil = function() {
  function NetworkUtil2() {
    _classCallCheck2(this, NetworkUtil2);
  }
  _createClass2(NetworkUtil2, null, [{
    key: "getRange",
    value: function getRange(allNodes) {
      var specificNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var minY = 1e9, maxY = -1e9, minX = 1e9, maxX = -1e9, node;
      if (specificNodes.length > 0) {
        for (var i = 0; i < specificNodes.length; i++) {
          node = allNodes[specificNodes[i]];
          if (minX > node.shape.boundingBox.left) {
            minX = node.shape.boundingBox.left;
          }
          if (maxX < node.shape.boundingBox.right) {
            maxX = node.shape.boundingBox.right;
          }
          if (minY > node.shape.boundingBox.top) {
            minY = node.shape.boundingBox.top;
          }
          if (maxY < node.shape.boundingBox.bottom) {
            maxY = node.shape.boundingBox.bottom;
          }
        }
      }
      if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
        minY = 0, maxY = 0, minX = 0, maxX = 0;
      }
      return {
        minX,
        maxX,
        minY,
        maxY
      };
    }
  }, {
    key: "getRangeCore",
    value: function getRangeCore(allNodes) {
      var specificNodes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var minY = 1e9, maxY = -1e9, minX = 1e9, maxX = -1e9, node;
      if (specificNodes.length > 0) {
        for (var i = 0; i < specificNodes.length; i++) {
          node = allNodes[specificNodes[i]];
          if (minX > node.x) {
            minX = node.x;
          }
          if (maxX < node.x) {
            maxX = node.x;
          }
          if (minY > node.y) {
            minY = node.y;
          }
          if (maxY < node.y) {
            maxY = node.y;
          }
        }
      }
      if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
        minY = 0, maxY = 0, minX = 0, maxX = 0;
      }
      return {
        minX,
        maxX,
        minY,
        maxY
      };
    }
  }, {
    key: "findCenter",
    value: function findCenter(range) {
      return {
        x: 0.5 * (range.maxX + range.minX),
        y: 0.5 * (range.maxY + range.minY)
      };
    }
  }, {
    key: "cloneOptions",
    value: function cloneOptions(item, type) {
      var clonedOptions = {};
      if (type === void 0 || type === "node") {
        deepExtend(clonedOptions, item.options, true);
        clonedOptions.x = item.x;
        clonedOptions.y = item.y;
        clonedOptions.amountOfConnections = item.edges.length;
      } else {
        deepExtend(clonedOptions, item.options, true);
      }
      return clonedOptions;
    }
  }]);
  return NetworkUtil2;
}();
function _createSuper$12(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct$12();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct$12() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var Cluster = function(_Node) {
  _inherits2(Cluster2, _Node);
  var _super = _createSuper$12(Cluster2);
  function Cluster2(options2, body, imagelist, grouplist, globalOptions, defaultOptions) {
    var _this;
    _classCallCheck2(this, Cluster2);
    _this = _super.call(this, options2, body, imagelist, grouplist, globalOptions, defaultOptions);
    _this.isCluster = true;
    _this.containedNodes = {};
    _this.containedEdges = {};
    return _this;
  }
  _createClass2(Cluster2, [{
    key: "_openChildCluster",
    value: function _openChildCluster(childClusterId) {
      var _this2 = this;
      var childCluster = this.body.nodes[childClusterId];
      if (this.containedNodes[childClusterId] === void 0) {
        throw new Error("node with id: " + childClusterId + " not in current cluster");
      }
      if (!childCluster.isCluster) {
        throw new Error("node with id: " + childClusterId + " is not a cluster");
      }
      delete this.containedNodes[childClusterId];
      forEach$12(childCluster.edges, function(edge) {
        delete _this2.containedEdges[edge.id];
      });
      forEach$12(childCluster.containedNodes, function(node, nodeId) {
        _this2.containedNodes[nodeId] = node;
      });
      childCluster.containedNodes = {};
      forEach$12(childCluster.containedEdges, function(edge, edgeId) {
        _this2.containedEdges[edgeId] = edge;
      });
      childCluster.containedEdges = {};
      forEach$12(childCluster.edges, function(clusterEdge) {
        forEach$12(_this2.edges, function(parentClusterEdge) {
          var _context, _context2;
          var index2 = indexOf4(_context = parentClusterEdge.clusteringEdgeReplacingIds).call(_context, clusterEdge.id);
          if (index2 === -1)
            return;
          forEach$12(clusterEdge.clusteringEdgeReplacingIds, function(srcId) {
            parentClusterEdge.clusteringEdgeReplacingIds.push(srcId);
            _this2.body.edges[srcId].edgeReplacedById = parentClusterEdge.id;
          });
          splice$12(_context2 = parentClusterEdge.clusteringEdgeReplacingIds).call(_context2, index2, 1);
        });
      });
      childCluster.edges = [];
    }
  }]);
  return Cluster2;
}(Node);
var ClusterEngine = function() {
  function ClusterEngine2(body) {
    var _this = this;
    _classCallCheck2(this, ClusterEngine2);
    this.body = body;
    this.clusteredNodes = {};
    this.clusteredEdges = {};
    this.options = {};
    this.defaultOptions = {};
    assign$22(this.options, this.defaultOptions);
    this.body.emitter.on("_resetData", function() {
      _this.clusteredNodes = {};
      _this.clusteredEdges = {};
    });
  }
  _createClass2(ClusterEngine2, [{
    key: "clusterByHubsize",
    value: function clusterByHubsize(hubsize, options2) {
      if (hubsize === void 0) {
        hubsize = this._getHubSize();
      } else if (_typeof2(hubsize) === "object") {
        options2 = this._checkOptions(hubsize);
        hubsize = this._getHubSize();
      }
      var nodesToCluster = [];
      for (var i = 0; i < this.body.nodeIndices.length; i++) {
        var node = this.body.nodes[this.body.nodeIndices[i]];
        if (node.edges.length >= hubsize) {
          nodesToCluster.push(node.id);
        }
      }
      for (var _i = 0; _i < nodesToCluster.length; _i++) {
        this.clusterByConnection(nodesToCluster[_i], options2, true);
      }
      this.body.emitter.emit("_dataChanged");
    }
  }, {
    key: "cluster",
    value: function cluster() {
      var _this2 = this;
      var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var refreshData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (options2.joinCondition === void 0) {
        throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
      }
      options2 = this._checkOptions(options2);
      var childNodesObj = {};
      var childEdgesObj = {};
      forEach$12(this.body.nodes, function(node, nodeId) {
        if (node.options && options2.joinCondition(node.options) === true) {
          childNodesObj[nodeId] = node;
          forEach$12(node.edges, function(edge) {
            if (_this2.clusteredEdges[edge.id] === void 0) {
              childEdgesObj[edge.id] = edge;
            }
          });
        }
      });
      this._cluster(childNodesObj, childEdgesObj, options2, refreshData);
    }
  }, {
    key: "clusterByEdgeCount",
    value: function clusterByEdgeCount(edgeCount, options2) {
      var _this3 = this;
      var refreshData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      options2 = this._checkOptions(options2);
      var clusters = [];
      var usedNodes = {};
      var edge, edges, relevantEdgeCount;
      var _loop = function _loop2(i2) {
        var childNodesObj = {};
        var childEdgesObj = {};
        var nodeId = _this3.body.nodeIndices[i2];
        var node = _this3.body.nodes[nodeId];
        if (usedNodes[nodeId] === void 0) {
          relevantEdgeCount = 0;
          edges = [];
          for (var j = 0; j < node.edges.length; j++) {
            edge = node.edges[j];
            if (_this3.clusteredEdges[edge.id] === void 0) {
              if (edge.toId !== edge.fromId) {
                relevantEdgeCount++;
              }
              edges.push(edge);
            }
          }
          if (relevantEdgeCount === edgeCount) {
            var checkJoinCondition = function checkJoinCondition2(node2) {
              if (options2.joinCondition === void 0 || options2.joinCondition === null) {
                return true;
              }
              var clonedOptions = NetworkUtil.cloneOptions(node2);
              return options2.joinCondition(clonedOptions);
            };
            var gatheringSuccessful = true;
            for (var _j = 0; _j < edges.length; _j++) {
              edge = edges[_j];
              var childNodeId = _this3._getConnectedId(edge, nodeId);
              if (checkJoinCondition(node)) {
                childEdgesObj[edge.id] = edge;
                childNodesObj[nodeId] = node;
                childNodesObj[childNodeId] = _this3.body.nodes[childNodeId];
                usedNodes[nodeId] = true;
              } else {
                gatheringSuccessful = false;
                break;
              }
            }
            if (keys6(childNodesObj).length > 0 && keys6(childEdgesObj).length > 0 && gatheringSuccessful === true) {
              var findClusterData = function findClusterData2() {
                for (var n = 0; n < clusters.length; ++n) {
                  for (var m2 in childNodesObj) {
                    if (clusters[n].nodes[m2] !== void 0) {
                      return clusters[n];
                    }
                  }
                }
                return void 0;
              };
              var foundCluster = findClusterData();
              if (foundCluster !== void 0) {
                for (var m in childNodesObj) {
                  if (foundCluster.nodes[m] === void 0) {
                    foundCluster.nodes[m] = childNodesObj[m];
                  }
                }
                for (var _m in childEdgesObj) {
                  if (foundCluster.edges[_m] === void 0) {
                    foundCluster.edges[_m] = childEdgesObj[_m];
                  }
                }
              } else {
                clusters.push({
                  nodes: childNodesObj,
                  edges: childEdgesObj
                });
              }
            }
          }
        }
      };
      for (var i = 0; i < this.body.nodeIndices.length; i++) {
        _loop(i);
      }
      for (var _i2 = 0; _i2 < clusters.length; _i2++) {
        this._cluster(clusters[_i2].nodes, clusters[_i2].edges, options2, false);
      }
      if (refreshData === true) {
        this.body.emitter.emit("_dataChanged");
      }
    }
  }, {
    key: "clusterOutliers",
    value: function clusterOutliers(options2) {
      var refreshData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      this.clusterByEdgeCount(1, options2, refreshData);
    }
  }, {
    key: "clusterBridges",
    value: function clusterBridges(options2) {
      var refreshData = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      this.clusterByEdgeCount(2, options2, refreshData);
    }
  }, {
    key: "clusterByConnection",
    value: function clusterByConnection(nodeId, options2) {
      var _context;
      var refreshData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (nodeId === void 0) {
        throw new Error("No nodeId supplied to clusterByConnection!");
      }
      if (this.body.nodes[nodeId] === void 0) {
        throw new Error("The nodeId given to clusterByConnection does not exist!");
      }
      var node = this.body.nodes[nodeId];
      options2 = this._checkOptions(options2, node);
      if (options2.clusterNodeProperties.x === void 0) {
        options2.clusterNodeProperties.x = node.x;
      }
      if (options2.clusterNodeProperties.y === void 0) {
        options2.clusterNodeProperties.y = node.y;
      }
      if (options2.clusterNodeProperties.fixed === void 0) {
        options2.clusterNodeProperties.fixed = {};
        options2.clusterNodeProperties.fixed.x = node.options.fixed.x;
        options2.clusterNodeProperties.fixed.y = node.options.fixed.y;
      }
      var childNodesObj = {};
      var childEdgesObj = {};
      var parentNodeId = node.id;
      var parentClonedOptions = NetworkUtil.cloneOptions(node);
      childNodesObj[parentNodeId] = node;
      for (var i = 0; i < node.edges.length; i++) {
        var edge = node.edges[i];
        if (this.clusteredEdges[edge.id] === void 0) {
          var childNodeId = this._getConnectedId(edge, parentNodeId);
          if (this.clusteredNodes[childNodeId] === void 0) {
            if (childNodeId !== parentNodeId) {
              if (options2.joinCondition === void 0) {
                childEdgesObj[edge.id] = edge;
                childNodesObj[childNodeId] = this.body.nodes[childNodeId];
              } else {
                var childClonedOptions = NetworkUtil.cloneOptions(this.body.nodes[childNodeId]);
                if (options2.joinCondition(parentClonedOptions, childClonedOptions) === true) {
                  childEdgesObj[edge.id] = edge;
                  childNodesObj[childNodeId] = this.body.nodes[childNodeId];
                }
              }
            } else {
              childEdgesObj[edge.id] = edge;
            }
          }
        }
      }
      var childNodeIDs = map$32(_context = keys6(childNodesObj)).call(_context, function(childNode2) {
        return childNodesObj[childNode2].id;
      });
      for (var childNodeKey in childNodesObj) {
        if (!Object.prototype.hasOwnProperty.call(childNodesObj, childNodeKey))
          continue;
        var childNode = childNodesObj[childNodeKey];
        for (var y = 0; y < childNode.edges.length; y++) {
          var childEdge = childNode.edges[y];
          if (indexOf4(childNodeIDs).call(childNodeIDs, this._getConnectedId(childEdge, childNode.id)) > -1) {
            childEdgesObj[childEdge.id] = childEdge;
          }
        }
      }
      this._cluster(childNodesObj, childEdgesObj, options2, refreshData);
    }
  }, {
    key: "_createClusterEdges",
    value: function _createClusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, clusterEdgeProperties) {
      var edge, childNodeId, childNode, toId, fromId, otherNodeId;
      var childKeys = keys6(childNodesObj);
      var createEdges = [];
      for (var i = 0; i < childKeys.length; i++) {
        childNodeId = childKeys[i];
        childNode = childNodesObj[childNodeId];
        for (var j = 0; j < childNode.edges.length; j++) {
          edge = childNode.edges[j];
          if (this.clusteredEdges[edge.id] === void 0) {
            if (edge.toId == edge.fromId) {
              childEdgesObj[edge.id] = edge;
            } else {
              if (edge.toId == childNodeId) {
                toId = clusterNodeProperties.id;
                fromId = edge.fromId;
                otherNodeId = fromId;
              } else {
                toId = edge.toId;
                fromId = clusterNodeProperties.id;
                otherNodeId = toId;
              }
            }
            if (childNodesObj[otherNodeId] === void 0) {
              createEdges.push({
                edge,
                fromId,
                toId
              });
            }
          }
        }
      }
      var newEdges = [];
      var getNewEdge = function getNewEdge2(createdEdge2) {
        for (var _j2 = 0; _j2 < newEdges.length; _j2++) {
          var newEdge2 = newEdges[_j2];
          var matchToDirection = createdEdge2.fromId === newEdge2.fromId && createdEdge2.toId === newEdge2.toId;
          var matchFromDirection = createdEdge2.fromId === newEdge2.toId && createdEdge2.toId === newEdge2.fromId;
          if (matchToDirection || matchFromDirection) {
            return newEdge2;
          }
        }
        return null;
      };
      for (var _j3 = 0; _j3 < createEdges.length; _j3++) {
        var createdEdge = createEdges[_j3];
        var _edge = createdEdge.edge;
        var newEdge = getNewEdge(createdEdge);
        if (newEdge === null) {
          newEdge = this._createClusteredEdge(createdEdge.fromId, createdEdge.toId, _edge, clusterEdgeProperties);
          newEdges.push(newEdge);
        } else {
          newEdge.clusteringEdgeReplacingIds.push(_edge.id);
        }
        this.body.edges[_edge.id].edgeReplacedById = newEdge.id;
        this._backupEdgeOptions(_edge);
        _edge.setOptions({
          physics: false
        });
      }
    }
  }, {
    key: "_checkOptions",
    value: function _checkOptions() {
      var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      if (options2.clusterEdgeProperties === void 0) {
        options2.clusterEdgeProperties = {};
      }
      if (options2.clusterNodeProperties === void 0) {
        options2.clusterNodeProperties = {};
      }
      return options2;
    }
  }, {
    key: "_cluster",
    value: function _cluster(childNodesObj, childEdgesObj, options2) {
      var refreshData = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var tmpNodesToRemove = [];
      for (var nodeId in childNodesObj) {
        if (Object.prototype.hasOwnProperty.call(childNodesObj, nodeId)) {
          if (this.clusteredNodes[nodeId] !== void 0) {
            tmpNodesToRemove.push(nodeId);
          }
        }
      }
      for (var n = 0; n < tmpNodesToRemove.length; ++n) {
        delete childNodesObj[tmpNodesToRemove[n]];
      }
      if (keys6(childNodesObj).length == 0) {
        return;
      }
      if (keys6(childNodesObj).length == 1 && options2.clusterNodeProperties.allowSingleNodeCluster != true) {
        return;
      }
      var clusterNodeProperties = deepExtend({}, options2.clusterNodeProperties);
      if (options2.processProperties !== void 0) {
        var childNodesOptions = [];
        for (var _nodeId in childNodesObj) {
          if (Object.prototype.hasOwnProperty.call(childNodesObj, _nodeId)) {
            var clonedOptions = NetworkUtil.cloneOptions(childNodesObj[_nodeId]);
            childNodesOptions.push(clonedOptions);
          }
        }
        var childEdgesOptions = [];
        for (var edgeId in childEdgesObj) {
          if (Object.prototype.hasOwnProperty.call(childEdgesObj, edgeId)) {
            if (edgeId.substr(0, 12) !== "clusterEdge:") {
              var _clonedOptions = NetworkUtil.cloneOptions(childEdgesObj[edgeId], "edge");
              childEdgesOptions.push(_clonedOptions);
            }
          }
        }
        clusterNodeProperties = options2.processProperties(clusterNodeProperties, childNodesOptions, childEdgesOptions);
        if (!clusterNodeProperties) {
          throw new Error("The processProperties function does not return properties!");
        }
      }
      if (clusterNodeProperties.id === void 0) {
        clusterNodeProperties.id = "cluster:" + v42();
      }
      var clusterId = clusterNodeProperties.id;
      if (clusterNodeProperties.label === void 0) {
        clusterNodeProperties.label = "cluster";
      }
      var pos = void 0;
      if (clusterNodeProperties.x === void 0) {
        pos = this._getClusterPosition(childNodesObj);
        clusterNodeProperties.x = pos.x;
      }
      if (clusterNodeProperties.y === void 0) {
        if (pos === void 0) {
          pos = this._getClusterPosition(childNodesObj);
        }
        clusterNodeProperties.y = pos.y;
      }
      clusterNodeProperties.id = clusterId;
      var clusterNode = this.body.functions.createNode(clusterNodeProperties, Cluster);
      clusterNode.containedNodes = childNodesObj;
      clusterNode.containedEdges = childEdgesObj;
      clusterNode.clusterEdgeProperties = options2.clusterEdgeProperties;
      this.body.nodes[clusterNodeProperties.id] = clusterNode;
      this._clusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, options2.clusterEdgeProperties);
      clusterNodeProperties.id = void 0;
      if (refreshData === true) {
        this.body.emitter.emit("_dataChanged");
      }
    }
  }, {
    key: "_backupEdgeOptions",
    value: function _backupEdgeOptions(edge) {
      if (this.clusteredEdges[edge.id] === void 0) {
        this.clusteredEdges[edge.id] = {
          physics: edge.options.physics
        };
      }
    }
  }, {
    key: "_restoreEdge",
    value: function _restoreEdge(edge) {
      var originalOptions = this.clusteredEdges[edge.id];
      if (originalOptions !== void 0) {
        edge.setOptions({
          physics: originalOptions.physics
        });
        delete this.clusteredEdges[edge.id];
      }
    }
  }, {
    key: "isCluster",
    value: function isCluster(nodeId) {
      if (this.body.nodes[nodeId] !== void 0) {
        return this.body.nodes[nodeId].isCluster === true;
      } else {
        console.error("Node does not exist.");
        return false;
      }
    }
  }, {
    key: "_getClusterPosition",
    value: function _getClusterPosition(childNodesObj) {
      var childKeys = keys6(childNodesObj);
      var minX = childNodesObj[childKeys[0]].x;
      var maxX = childNodesObj[childKeys[0]].x;
      var minY = childNodesObj[childKeys[0]].y;
      var maxY = childNodesObj[childKeys[0]].y;
      var node;
      for (var i = 1; i < childKeys.length; i++) {
        node = childNodesObj[childKeys[i]];
        minX = node.x < minX ? node.x : minX;
        maxX = node.x > maxX ? node.x : maxX;
        minY = node.y < minY ? node.y : minY;
        maxY = node.y > maxY ? node.y : maxY;
      }
      return {
        x: 0.5 * (minX + maxX),
        y: 0.5 * (minY + maxY)
      };
    }
  }, {
    key: "openCluster",
    value: function openCluster(clusterNodeId, options2) {
      var refreshData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (clusterNodeId === void 0) {
        throw new Error("No clusterNodeId supplied to openCluster.");
      }
      var clusterNode = this.body.nodes[clusterNodeId];
      if (clusterNode === void 0) {
        throw new Error("The clusterNodeId supplied to openCluster does not exist.");
      }
      if (clusterNode.isCluster !== true || clusterNode.containedNodes === void 0 || clusterNode.containedEdges === void 0) {
        throw new Error("The node:" + clusterNodeId + " is not a valid cluster.");
      }
      var stack = this.findNode(clusterNodeId);
      var parentIndex = indexOf4(stack).call(stack, clusterNodeId) - 1;
      if (parentIndex >= 0) {
        var parentClusterNodeId = stack[parentIndex];
        var parentClusterNode = this.body.nodes[parentClusterNodeId];
        parentClusterNode._openChildCluster(clusterNodeId);
        delete this.body.nodes[clusterNodeId];
        if (refreshData === true) {
          this.body.emitter.emit("_dataChanged");
        }
        return;
      }
      var containedNodes = clusterNode.containedNodes;
      var containedEdges = clusterNode.containedEdges;
      if (options2 !== void 0 && options2.releaseFunction !== void 0 && typeof options2.releaseFunction === "function") {
        var positions = {};
        var clusterPosition = {
          x: clusterNode.x,
          y: clusterNode.y
        };
        for (var nodeId in containedNodes) {
          if (Object.prototype.hasOwnProperty.call(containedNodes, nodeId)) {
            var containedNode = this.body.nodes[nodeId];
            positions[nodeId] = {
              x: containedNode.x,
              y: containedNode.y
            };
          }
        }
        var newPositions = options2.releaseFunction(clusterPosition, positions);
        for (var _nodeId2 in containedNodes) {
          if (Object.prototype.hasOwnProperty.call(containedNodes, _nodeId2)) {
            var _containedNode = this.body.nodes[_nodeId2];
            if (newPositions[_nodeId2] !== void 0) {
              _containedNode.x = newPositions[_nodeId2].x === void 0 ? clusterNode.x : newPositions[_nodeId2].x;
              _containedNode.y = newPositions[_nodeId2].y === void 0 ? clusterNode.y : newPositions[_nodeId2].y;
            }
          }
        }
      } else {
        forEach$12(containedNodes, function(containedNode2) {
          if (containedNode2.options.fixed.x === false) {
            containedNode2.x = clusterNode.x;
          }
          if (containedNode2.options.fixed.y === false) {
            containedNode2.y = clusterNode.y;
          }
        });
      }
      for (var _nodeId3 in containedNodes) {
        if (Object.prototype.hasOwnProperty.call(containedNodes, _nodeId3)) {
          var _containedNode2 = this.body.nodes[_nodeId3];
          _containedNode2.vx = clusterNode.vx;
          _containedNode2.vy = clusterNode.vy;
          _containedNode2.setOptions({
            physics: true
          });
          delete this.clusteredNodes[_nodeId3];
        }
      }
      var edgesToBeDeleted = [];
      for (var i = 0; i < clusterNode.edges.length; i++) {
        edgesToBeDeleted.push(clusterNode.edges[i]);
      }
      for (var _i3 = 0; _i3 < edgesToBeDeleted.length; _i3++) {
        var edge = edgesToBeDeleted[_i3];
        var otherNodeId = this._getConnectedId(edge, clusterNodeId);
        var otherNode = this.clusteredNodes[otherNodeId];
        for (var j = 0; j < edge.clusteringEdgeReplacingIds.length; j++) {
          var transferId = edge.clusteringEdgeReplacingIds[j];
          var transferEdge = this.body.edges[transferId];
          if (transferEdge === void 0)
            continue;
          if (otherNode !== void 0) {
            var otherCluster = this.body.nodes[otherNode.clusterId];
            otherCluster.containedEdges[transferEdge.id] = transferEdge;
            delete containedEdges[transferEdge.id];
            var fromId = transferEdge.fromId;
            var toId = transferEdge.toId;
            if (transferEdge.toId == otherNodeId) {
              toId = otherNode.clusterId;
            } else {
              fromId = otherNode.clusterId;
            }
            this._createClusteredEdge(fromId, toId, transferEdge, otherCluster.clusterEdgeProperties, {
              hidden: false,
              physics: true
            });
          } else {
            this._restoreEdge(transferEdge);
          }
        }
        edge.remove();
      }
      for (var edgeId in containedEdges) {
        if (Object.prototype.hasOwnProperty.call(containedEdges, edgeId)) {
          this._restoreEdge(containedEdges[edgeId]);
        }
      }
      delete this.body.nodes[clusterNodeId];
      if (refreshData === true) {
        this.body.emitter.emit("_dataChanged");
      }
    }
  }, {
    key: "getNodesInCluster",
    value: function getNodesInCluster(clusterId) {
      var nodesArray = [];
      if (this.isCluster(clusterId) === true) {
        var containedNodes = this.body.nodes[clusterId].containedNodes;
        for (var nodeId in containedNodes) {
          if (Object.prototype.hasOwnProperty.call(containedNodes, nodeId)) {
            nodesArray.push(this.body.nodes[nodeId].id);
          }
        }
      }
      return nodesArray;
    }
  }, {
    key: "findNode",
    value: function findNode(nodeId) {
      var stack = [];
      var max3 = 100;
      var counter = 0;
      var node;
      while (this.clusteredNodes[nodeId] !== void 0 && counter < max3) {
        node = this.body.nodes[nodeId];
        if (node === void 0)
          return [];
        stack.push(node.id);
        nodeId = this.clusteredNodes[nodeId].clusterId;
        counter++;
      }
      node = this.body.nodes[nodeId];
      if (node === void 0)
        return [];
      stack.push(node.id);
      reverse4(stack).call(stack);
      return stack;
    }
  }, {
    key: "updateClusteredNode",
    value: function updateClusteredNode(clusteredNodeId, newOptions) {
      if (clusteredNodeId === void 0) {
        throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
      }
      if (newOptions === void 0) {
        throw new Error("No newOptions supplied to updateClusteredNode.");
      }
      if (this.body.nodes[clusteredNodeId] === void 0) {
        throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
      }
      this.body.nodes[clusteredNodeId].setOptions(newOptions);
      this.body.emitter.emit("_dataChanged");
    }
  }, {
    key: "updateEdge",
    value: function updateEdge(startEdgeId, newOptions) {
      if (startEdgeId === void 0) {
        throw new Error("No startEdgeId supplied to updateEdge.");
      }
      if (newOptions === void 0) {
        throw new Error("No newOptions supplied to updateEdge.");
      }
      if (this.body.edges[startEdgeId] === void 0) {
        throw new Error("The startEdgeId supplied to updateEdge does not exist.");
      }
      var allEdgeIds = this.getClusteredEdges(startEdgeId);
      for (var i = 0; i < allEdgeIds.length; i++) {
        var edge = this.body.edges[allEdgeIds[i]];
        edge.setOptions(newOptions);
      }
      this.body.emitter.emit("_dataChanged");
    }
  }, {
    key: "getClusteredEdges",
    value: function getClusteredEdges(edgeId) {
      var stack = [];
      var max3 = 100;
      var counter = 0;
      while (edgeId !== void 0 && this.body.edges[edgeId] !== void 0 && counter < max3) {
        stack.push(this.body.edges[edgeId].id);
        edgeId = this.body.edges[edgeId].edgeReplacedById;
        counter++;
      }
      reverse4(stack).call(stack);
      return stack;
    }
  }, {
    key: "getBaseEdge",
    value: function getBaseEdge(clusteredEdgeId) {
      return this.getBaseEdges(clusteredEdgeId)[0];
    }
  }, {
    key: "getBaseEdges",
    value: function getBaseEdges(clusteredEdgeId) {
      var IdsToHandle = [clusteredEdgeId];
      var doneIds = [];
      var foundIds = [];
      var max3 = 100;
      var counter = 0;
      while (IdsToHandle.length > 0 && counter < max3) {
        var nextId = IdsToHandle.pop();
        if (nextId === void 0)
          continue;
        var nextEdge = this.body.edges[nextId];
        if (nextEdge === void 0)
          continue;
        counter++;
        var replacingIds = nextEdge.clusteringEdgeReplacingIds;
        if (replacingIds === void 0) {
          foundIds.push(nextId);
        } else {
          for (var i = 0; i < replacingIds.length; ++i) {
            var replacingId = replacingIds[i];
            if (indexOf4(IdsToHandle).call(IdsToHandle, replacingIds) !== -1 || indexOf4(doneIds).call(doneIds, replacingIds) !== -1) {
              continue;
            }
            IdsToHandle.push(replacingId);
          }
        }
        doneIds.push(nextId);
      }
      return foundIds;
    }
  }, {
    key: "_getConnectedId",
    value: function _getConnectedId(edge, nodeId) {
      if (edge.toId != nodeId) {
        return edge.toId;
      } else if (edge.fromId != nodeId) {
        return edge.fromId;
      } else {
        return edge.fromId;
      }
    }
  }, {
    key: "_getHubSize",
    value: function _getHubSize() {
      var average = 0;
      var averageSquared = 0;
      var hubCounter = 0;
      var largestHub = 0;
      for (var i = 0; i < this.body.nodeIndices.length; i++) {
        var node = this.body.nodes[this.body.nodeIndices[i]];
        if (node.edges.length > largestHub) {
          largestHub = node.edges.length;
        }
        average += node.edges.length;
        averageSquared += Math.pow(node.edges.length, 2);
        hubCounter += 1;
      }
      average = average / hubCounter;
      averageSquared = averageSquared / hubCounter;
      var variance = averageSquared - Math.pow(average, 2);
      var standardDeviation = Math.sqrt(variance);
      var hubThreshold = Math.floor(average + 2 * standardDeviation);
      if (hubThreshold > largestHub) {
        hubThreshold = largestHub;
      }
      return hubThreshold;
    }
  }, {
    key: "_createClusteredEdge",
    value: function _createClusteredEdge(fromId, toId, baseEdge, clusterEdgeProperties, extraOptions) {
      var clonedOptions = NetworkUtil.cloneOptions(baseEdge, "edge");
      deepExtend(clonedOptions, clusterEdgeProperties);
      clonedOptions.from = fromId;
      clonedOptions.to = toId;
      clonedOptions.id = "clusterEdge:" + v42();
      if (extraOptions !== void 0) {
        deepExtend(clonedOptions, extraOptions);
      }
      var newEdge = this.body.functions.createEdge(clonedOptions);
      newEdge.clusteringEdgeReplacingIds = [baseEdge.id];
      newEdge.connect();
      this.body.edges[newEdge.id] = newEdge;
      return newEdge;
    }
  }, {
    key: "_clusterEdges",
    value: function _clusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties) {
      if (childEdges instanceof Edge) {
        var edge = childEdges;
        var obj = {};
        obj[edge.id] = edge;
        childEdges = obj;
      }
      if (childNodes instanceof Node) {
        var node = childNodes;
        var _obj = {};
        _obj[node.id] = node;
        childNodes = _obj;
      }
      if (clusterNode === void 0 || clusterNode === null) {
        throw new Error("_clusterEdges: parameter clusterNode required");
      }
      if (clusterEdgeProperties === void 0) {
        clusterEdgeProperties = clusterNode.clusterEdgeProperties;
      }
      this._createClusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties);
      for (var edgeId in childEdges) {
        if (Object.prototype.hasOwnProperty.call(childEdges, edgeId)) {
          if (this.body.edges[edgeId] !== void 0) {
            var _edge2 = this.body.edges[edgeId];
            this._backupEdgeOptions(_edge2);
            _edge2.setOptions({
              physics: false
            });
          }
        }
      }
      for (var nodeId in childNodes) {
        if (Object.prototype.hasOwnProperty.call(childNodes, nodeId)) {
          this.clusteredNodes[nodeId] = {
            clusterId: clusterNode.id,
            node: this.body.nodes[nodeId]
          };
          this.body.nodes[nodeId].setOptions({
            physics: false
          });
        }
      }
    }
  }, {
    key: "_getClusterNodeForNode",
    value: function _getClusterNodeForNode(nodeId) {
      if (nodeId === void 0)
        return void 0;
      var clusteredNode = this.clusteredNodes[nodeId];
      if (clusteredNode === void 0)
        return void 0;
      var clusterId = clusteredNode.clusterId;
      if (clusterId === void 0)
        return void 0;
      return this.body.nodes[clusterId];
    }
  }, {
    key: "_filter",
    value: function _filter(arr, callback) {
      var ret = [];
      forEach$12(arr, function(item) {
        if (callback(item)) {
          ret.push(item);
        }
      });
      return ret;
    }
  }, {
    key: "_updateState",
    value: function _updateState() {
      var _this4 = this;
      var nodeId;
      var deletedNodeIds = [];
      var deletedEdgeIds = {};
      var eachClusterNode = function eachClusterNode2(callback) {
        forEach$12(_this4.body.nodes, function(node2) {
          if (node2.isCluster === true) {
            callback(node2);
          }
        });
      };
      for (nodeId in this.clusteredNodes) {
        if (!Object.prototype.hasOwnProperty.call(this.clusteredNodes, nodeId))
          continue;
        var node = this.body.nodes[nodeId];
        if (node === void 0) {
          deletedNodeIds.push(nodeId);
        }
      }
      eachClusterNode(function(clusterNode) {
        for (var n2 = 0; n2 < deletedNodeIds.length; n2++) {
          delete clusterNode.containedNodes[deletedNodeIds[n2]];
        }
      });
      for (var n = 0; n < deletedNodeIds.length; n++) {
        delete this.clusteredNodes[deletedNodeIds[n]];
      }
      forEach$12(this.clusteredEdges, function(edgeId) {
        var edge = _this4.body.edges[edgeId];
        if (edge === void 0 || !edge.endPointsValid()) {
          deletedEdgeIds[edgeId] = edgeId;
        }
      });
      eachClusterNode(function(clusterNode) {
        forEach$12(clusterNode.containedEdges, function(edge, edgeId) {
          if (!edge.endPointsValid() && !deletedEdgeIds[edgeId]) {
            deletedEdgeIds[edgeId] = edgeId;
          }
        });
      });
      forEach$12(this.body.edges, function(edge, edgeId) {
        var isValid = true;
        var replacedIds = edge.clusteringEdgeReplacingIds;
        if (replacedIds !== void 0) {
          var numValid = 0;
          forEach$12(replacedIds, function(containedEdgeId) {
            var containedEdge = _this4.body.edges[containedEdgeId];
            if (containedEdge !== void 0 && containedEdge.endPointsValid()) {
              numValid += 1;
            }
          });
          isValid = numValid > 0;
        }
        if (!edge.endPointsValid() || !isValid) {
          deletedEdgeIds[edgeId] = edgeId;
        }
      });
      eachClusterNode(function(clusterNode) {
        forEach$12(deletedEdgeIds, function(deletedEdgeId) {
          delete clusterNode.containedEdges[deletedEdgeId];
          forEach$12(clusterNode.edges, function(edge, m) {
            if (edge.id === deletedEdgeId) {
              clusterNode.edges[m] = null;
              return;
            }
            edge.clusteringEdgeReplacingIds = _this4._filter(edge.clusteringEdgeReplacingIds, function(id3) {
              return !deletedEdgeIds[id3];
            });
          });
          clusterNode.edges = _this4._filter(clusterNode.edges, function(item) {
            return item !== null;
          });
        });
      });
      forEach$12(deletedEdgeIds, function(edgeId) {
        delete _this4.clusteredEdges[edgeId];
      });
      forEach$12(deletedEdgeIds, function(edgeId) {
        delete _this4.body.edges[edgeId];
      });
      var ids = keys6(this.body.edges);
      forEach$12(ids, function(edgeId) {
        var edge = _this4.body.edges[edgeId];
        var shouldBeClustered = _this4._isClusteredNode(edge.fromId) || _this4._isClusteredNode(edge.toId);
        if (shouldBeClustered === _this4._isClusteredEdge(edge.id)) {
          return;
        }
        if (shouldBeClustered) {
          var clusterFrom = _this4._getClusterNodeForNode(edge.fromId);
          if (clusterFrom !== void 0) {
            _this4._clusterEdges(_this4.body.nodes[edge.fromId], edge, clusterFrom);
          }
          var clusterTo = _this4._getClusterNodeForNode(edge.toId);
          if (clusterTo !== void 0) {
            _this4._clusterEdges(_this4.body.nodes[edge.toId], edge, clusterTo);
          }
        } else {
          delete _this4._clusterEdges[edgeId];
          _this4._restoreEdge(edge);
        }
      });
      var changed = false;
      var continueLoop = true;
      var _loop2 = function _loop22() {
        var clustersToOpen = [];
        eachClusterNode(function(clusterNode) {
          var numNodes = keys6(clusterNode.containedNodes).length;
          var allowSingle = clusterNode.options.allowSingleNodeCluster === true;
          if (allowSingle && numNodes < 1 || !allowSingle && numNodes < 2) {
            clustersToOpen.push(clusterNode.id);
          }
        });
        for (var _n = 0; _n < clustersToOpen.length; ++_n) {
          _this4.openCluster(clustersToOpen[_n], {}, false);
        }
        continueLoop = clustersToOpen.length > 0;
        changed = changed || continueLoop;
      };
      while (continueLoop) {
        _loop2();
      }
      if (changed) {
        this._updateState();
      }
    }
  }, {
    key: "_isClusteredNode",
    value: function _isClusteredNode(nodeId) {
      return this.clusteredNodes[nodeId] !== void 0;
    }
  }, {
    key: "_isClusteredEdge",
    value: function _isClusteredEdge(edgeId) {
      return this.clusteredEdges[edgeId] !== void 0;
    }
  }]);
  return ClusterEngine2;
}();
function _createForOfIteratorHelper$5(o, allowArrayLike) {
  var it2 = typeof symbol2 !== "undefined" && getIteratorMethod$12(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$12(o) || (it2 = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$5(o, minLen) {
  var _context4;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$5(o, minLen);
  var n = slice4(_context4 = Object.prototype.toString.call(o)).call(_context4, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$32(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$5(o, minLen);
}
function _arrayLikeToArray$5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _initRequestAnimationFrame() {
  var func;
  if (window !== void 0) {
    func = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
  }
  if (func === void 0) {
    window.requestAnimationFrame = function(callback) {
      callback();
    };
  } else {
    window.requestAnimationFrame = func;
  }
}
var CanvasRenderer = function() {
  function CanvasRenderer2(body, canvas) {
    _classCallCheck2(this, CanvasRenderer2);
    _initRequestAnimationFrame();
    this.body = body;
    this.canvas = canvas;
    this.redrawRequested = false;
    this.renderTimer = void 0;
    this.requiresTimeout = true;
    this.renderingActive = false;
    this.renderRequests = 0;
    this.allowRedraw = true;
    this.dragging = false;
    this.zooming = false;
    this.options = {};
    this.defaultOptions = {
      hideEdgesOnDrag: false,
      hideEdgesOnZoom: false,
      hideNodesOnDrag: false
    };
    assign$22(this.options, this.defaultOptions);
    this._determineBrowserMethod();
    this.bindEventListeners();
  }
  _createClass2(CanvasRenderer2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this = this, _context2;
      this.body.emitter.on("dragStart", function() {
        _this.dragging = true;
      });
      this.body.emitter.on("dragEnd", function() {
        _this.dragging = false;
      });
      this.body.emitter.on("zoom", function() {
        _this.zooming = true;
        window.clearTimeout(_this.zoomTimeoutId);
        _this.zoomTimeoutId = setTimeout$12(function() {
          var _context;
          _this.zooming = false;
          bind$52(_context = _this._requestRedraw).call(_context, _this)();
        }, 250);
      });
      this.body.emitter.on("_resizeNodes", function() {
        _this._resizeNodes();
      });
      this.body.emitter.on("_redraw", function() {
        if (_this.renderingActive === false) {
          _this._redraw();
        }
      });
      this.body.emitter.on("_blockRedraw", function() {
        _this.allowRedraw = false;
      });
      this.body.emitter.on("_allowRedraw", function() {
        _this.allowRedraw = true;
        _this.redrawRequested = false;
      });
      this.body.emitter.on("_requestRedraw", bind$52(_context2 = this._requestRedraw).call(_context2, this));
      this.body.emitter.on("_startRendering", function() {
        _this.renderRequests += 1;
        _this.renderingActive = true;
        _this._startRendering();
      });
      this.body.emitter.on("_stopRendering", function() {
        _this.renderRequests -= 1;
        _this.renderingActive = _this.renderRequests > 0;
        _this.renderTimer = void 0;
      });
      this.body.emitter.on("destroy", function() {
        _this.renderRequests = 0;
        _this.allowRedraw = false;
        _this.renderingActive = false;
        if (_this.requiresTimeout === true) {
          clearTimeout(_this.renderTimer);
        } else {
          window.cancelAnimationFrame(_this.renderTimer);
        }
        _this.body.emitter.off();
      });
    }
  }, {
    key: "setOptions",
    value: function setOptions(options2) {
      if (options2 !== void 0) {
        var fields = ["hideEdgesOnDrag", "hideEdgesOnZoom", "hideNodesOnDrag"];
        selectiveDeepExtend(fields, this.options, options2);
      }
    }
  }, {
    key: "_requestNextFrame",
    value: function _requestNextFrame(callback, delay) {
      if (typeof window === "undefined")
        return;
      var timer;
      var myWindow = window;
      if (this.requiresTimeout === true) {
        timer = setTimeout$12(callback, delay);
      } else {
        if (myWindow.requestAnimationFrame) {
          timer = myWindow.requestAnimationFrame(callback);
        }
      }
      return timer;
    }
  }, {
    key: "_startRendering",
    value: function _startRendering() {
      if (this.renderingActive === true) {
        if (this.renderTimer === void 0) {
          var _context3;
          this.renderTimer = this._requestNextFrame(bind$52(_context3 = this._renderStep).call(_context3, this), this.simulationInterval);
        }
      }
    }
  }, {
    key: "_renderStep",
    value: function _renderStep() {
      if (this.renderingActive === true) {
        this.renderTimer = void 0;
        if (this.requiresTimeout === true) {
          this._startRendering();
        }
        this._redraw();
        if (this.requiresTimeout === false) {
          this._startRendering();
        }
      }
    }
  }, {
    key: "redraw",
    value: function redraw() {
      this.body.emitter.emit("setSize");
      this._redraw();
    }
  }, {
    key: "_requestRedraw",
    value: function _requestRedraw() {
      var _this2 = this;
      if (this.redrawRequested !== true && this.renderingActive === false && this.allowRedraw === true) {
        this.redrawRequested = true;
        this._requestNextFrame(function() {
          _this2._redraw(false);
        }, 0);
      }
    }
  }, {
    key: "_redraw",
    value: function _redraw() {
      var hidden = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      if (this.allowRedraw === true) {
        this.body.emitter.emit("initRedraw");
        this.redrawRequested = false;
        var drawLater = {
          drawExternalLabels: null
        };
        if (this.canvas.frame.canvas.width === 0 || this.canvas.frame.canvas.height === 0) {
          this.canvas.setSize();
        }
        this.canvas.setTransform();
        var ctx = this.canvas.getContext();
        var w = this.canvas.frame.canvas.clientWidth;
        var h = this.canvas.frame.canvas.clientHeight;
        ctx.clearRect(0, 0, w, h);
        if (this.canvas.frame.clientWidth === 0) {
          return;
        }
        ctx.save();
        ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
        ctx.scale(this.body.view.scale, this.body.view.scale);
        ctx.beginPath();
        this.body.emitter.emit("beforeDrawing", ctx);
        ctx.closePath();
        if (hidden === false) {
          if ((this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) && (this.zooming === false || this.zooming === true && this.options.hideEdgesOnZoom === false)) {
            this._drawEdges(ctx);
          }
        }
        if (this.dragging === false || this.dragging === true && this.options.hideNodesOnDrag === false) {
          var _this$_drawNodes = this._drawNodes(ctx, hidden), drawExternalLabels = _this$_drawNodes.drawExternalLabels;
          drawLater.drawExternalLabels = drawExternalLabels;
        }
        if (hidden === false) {
          if ((this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) && (this.zooming === false || this.zooming === true && this.options.hideEdgesOnZoom === false)) {
            this._drawArrows(ctx);
          }
        }
        if (drawLater.drawExternalLabels != null) {
          drawLater.drawExternalLabels();
        }
        if (hidden === false) {
          this._drawSelectionBox(ctx);
        }
        ctx.beginPath();
        this.body.emitter.emit("afterDrawing", ctx);
        ctx.closePath();
        ctx.restore();
        if (hidden === true) {
          ctx.clearRect(0, 0, w, h);
        }
      }
    }
  }, {
    key: "_resizeNodes",
    value: function _resizeNodes() {
      this.canvas.setTransform();
      var ctx = this.canvas.getContext();
      ctx.save();
      ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
      ctx.scale(this.body.view.scale, this.body.view.scale);
      var nodes = this.body.nodes;
      var node;
      for (var nodeId in nodes) {
        if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {
          node = nodes[nodeId];
          node.resize(ctx);
          node.updateBoundingBox(ctx, node.selected);
        }
      }
      ctx.restore();
    }
  }, {
    key: "_drawNodes",
    value: function _drawNodes(ctx) {
      var alwaysShow = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var nodes = this.body.nodes;
      var nodeIndices = this.body.nodeIndices;
      var node;
      var selected = [];
      var hovered = [];
      var margin = 20;
      var topLeft = this.canvas.DOMtoCanvas({
        x: -margin,
        y: -margin
      });
      var bottomRight = this.canvas.DOMtoCanvas({
        x: this.canvas.frame.canvas.clientWidth + margin,
        y: this.canvas.frame.canvas.clientHeight + margin
      });
      var viewableArea = {
        top: topLeft.y,
        left: topLeft.x,
        bottom: bottomRight.y,
        right: bottomRight.x
      };
      var _drawExternalLabels = [];
      for (var _i = 0; _i < nodeIndices.length; _i++) {
        node = nodes[nodeIndices[_i]];
        if (node.hover) {
          hovered.push(nodeIndices[_i]);
        } else if (node.isSelected()) {
          selected.push(nodeIndices[_i]);
        } else {
          if (alwaysShow === true) {
            var drawLater = node.draw(ctx);
            if (drawLater.drawExternalLabel != null) {
              _drawExternalLabels.push(drawLater.drawExternalLabel);
            }
          } else if (node.isBoundingBoxOverlappingWith(viewableArea) === true) {
            var _drawLater = node.draw(ctx);
            if (_drawLater.drawExternalLabel != null) {
              _drawExternalLabels.push(_drawLater.drawExternalLabel);
            }
          } else {
            node.updateBoundingBox(ctx, node.selected);
          }
        }
      }
      var i;
      var selectedLength = selected.length;
      var hoveredLength = hovered.length;
      for (i = 0; i < selectedLength; i++) {
        node = nodes[selected[i]];
        var _drawLater2 = node.draw(ctx);
        if (_drawLater2.drawExternalLabel != null) {
          _drawExternalLabels.push(_drawLater2.drawExternalLabel);
        }
      }
      for (i = 0; i < hoveredLength; i++) {
        node = nodes[hovered[i]];
        var _drawLater3 = node.draw(ctx);
        if (_drawLater3.drawExternalLabel != null) {
          _drawExternalLabels.push(_drawLater3.drawExternalLabel);
        }
      }
      return {
        drawExternalLabels: function drawExternalLabels() {
          var _iterator = _createForOfIteratorHelper$5(_drawExternalLabels), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var draw = _step.value;
              draw();
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      };
    }
  }, {
    key: "_drawEdges",
    value: function _drawEdges(ctx) {
      var edges = this.body.edges;
      var edgeIndices = this.body.edgeIndices;
      for (var i = 0; i < edgeIndices.length; i++) {
        var edge = edges[edgeIndices[i]];
        if (edge.connected === true) {
          edge.draw(ctx);
        }
      }
    }
  }, {
    key: "_drawArrows",
    value: function _drawArrows(ctx) {
      var edges = this.body.edges;
      var edgeIndices = this.body.edgeIndices;
      for (var i = 0; i < edgeIndices.length; i++) {
        var edge = edges[edgeIndices[i]];
        if (edge.connected === true) {
          edge.drawArrows(ctx);
        }
      }
    }
  }, {
    key: "_determineBrowserMethod",
    value: function _determineBrowserMethod() {
      if (typeof window !== "undefined") {
        var browserType = navigator.userAgent.toLowerCase();
        this.requiresTimeout = false;
        if (indexOf4(browserType).call(browserType, "msie 9.0") != -1) {
          this.requiresTimeout = true;
        } else if (indexOf4(browserType).call(browserType, "safari") != -1) {
          if (indexOf4(browserType).call(browserType, "chrome") <= -1) {
            this.requiresTimeout = true;
          }
        }
      } else {
        this.requiresTimeout = true;
      }
    }
  }, {
    key: "_drawSelectionBox",
    value: function _drawSelectionBox(ctx) {
      if (this.body.selectionBox.show) {
        ctx.beginPath();
        var width = this.body.selectionBox.position.end.x - this.body.selectionBox.position.start.x;
        var height = this.body.selectionBox.position.end.y - this.body.selectionBox.position.start.y;
        ctx.rect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, width, height);
        ctx.fillStyle = "rgba(151, 194, 252, 0.2)";
        ctx.fillRect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, width, height);
        ctx.strokeStyle = "rgba(151, 194, 252, 1)";
        ctx.stroke();
      } else {
        ctx.closePath();
      }
    }
  }]);
  return CanvasRenderer2;
}();
var path$22 = path$y;
var setInterval$1 = path$22.setInterval;
var setInterval = setInterval$1;
function onTouch(hammer, callback) {
  callback.inputHandler = function(event) {
    if (event.isFirst) {
      callback(event);
    }
  };
  hammer.on("hammer.input", callback.inputHandler);
}
function onRelease(hammer, callback) {
  callback.inputHandler = function(event) {
    if (event.isFinal) {
      callback(event);
    }
  };
  return hammer.on("hammer.input", callback.inputHandler);
}
var Canvas = function() {
  function Canvas2(body) {
    _classCallCheck2(this, Canvas2);
    this.body = body;
    this.pixelRatio = 1;
    this.cameraState = {};
    this.initialized = false;
    this.canvasViewCenter = {};
    this._cleanupCallbacks = [];
    this.options = {};
    this.defaultOptions = {
      autoResize: true,
      height: "100%",
      width: "100%"
    };
    assign$22(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  _createClass2(Canvas2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this = this, _context;
      this.body.emitter.once("resize", function(obj) {
        if (obj.width !== 0) {
          _this.body.view.translation.x = obj.width * 0.5;
        }
        if (obj.height !== 0) {
          _this.body.view.translation.y = obj.height * 0.5;
        }
      });
      this.body.emitter.on("setSize", bind$52(_context = this.setSize).call(_context, this));
      this.body.emitter.on("destroy", function() {
        _this.hammerFrame.destroy();
        _this.hammer.destroy();
        _this._cleanUp();
      });
    }
  }, {
    key: "setOptions",
    value: function setOptions(options2) {
      var _this2 = this;
      if (options2 !== void 0) {
        var fields = ["width", "height", "autoResize"];
        selectiveDeepExtend(fields, this.options, options2);
      }
      this._cleanUp();
      if (this.options.autoResize === true) {
        var _context2;
        if (window.ResizeObserver) {
          var observer = new ResizeObserver(function() {
            var changed = _this2.setSize();
            if (changed === true) {
              _this2.body.emitter.emit("_requestRedraw");
            }
          });
          var frame = this.frame;
          observer.observe(frame);
          this._cleanupCallbacks.push(function() {
            observer.unobserve(frame);
          });
        } else {
          var resizeTimer = setInterval(function() {
            var changed = _this2.setSize();
            if (changed === true) {
              _this2.body.emitter.emit("_requestRedraw");
            }
          }, 1e3);
          this._cleanupCallbacks.push(function() {
            clearInterval(resizeTimer);
          });
        }
        var resizeFunction = bind$52(_context2 = this._onResize).call(_context2, this);
        addEventListener(window, "resize", resizeFunction);
        this._cleanupCallbacks.push(function() {
          removeEventListener(window, "resize", resizeFunction);
        });
      }
    }
  }, {
    key: "_cleanUp",
    value: function _cleanUp() {
      var _context3, _context4, _context5;
      forEach$22(_context3 = reverse4(_context4 = splice$12(_context5 = this._cleanupCallbacks).call(_context5, 0)).call(_context4)).call(_context3, function(callback) {
        try {
          callback();
        } catch (error) {
          console.error(error);
        }
      });
    }
  }, {
    key: "_onResize",
    value: function _onResize() {
      this.setSize();
      this.body.emitter.emit("_redraw");
    }
  }, {
    key: "_getCameraState",
    value: function _getCameraState() {
      var pixelRatio = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.pixelRatio;
      if (this.initialized === true) {
        this.cameraState.previousWidth = this.frame.canvas.width / pixelRatio;
        this.cameraState.previousHeight = this.frame.canvas.height / pixelRatio;
        this.cameraState.scale = this.body.view.scale;
        this.cameraState.position = this.DOMtoCanvas({
          x: 0.5 * this.frame.canvas.width / pixelRatio,
          y: 0.5 * this.frame.canvas.height / pixelRatio
        });
      }
    }
  }, {
    key: "_setCameraState",
    value: function _setCameraState() {
      if (this.cameraState.scale !== void 0 && this.frame.canvas.clientWidth !== 0 && this.frame.canvas.clientHeight !== 0 && this.pixelRatio !== 0 && this.cameraState.previousWidth > 0 && this.cameraState.previousHeight > 0) {
        var widthRatio = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth;
        var heightRatio = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight;
        var newScale = this.cameraState.scale;
        if (widthRatio != 1 && heightRatio != 1) {
          newScale = this.cameraState.scale * 0.5 * (widthRatio + heightRatio);
        } else if (widthRatio != 1) {
          newScale = this.cameraState.scale * widthRatio;
        } else if (heightRatio != 1) {
          newScale = this.cameraState.scale * heightRatio;
        }
        this.body.view.scale = newScale;
        var currentViewCenter = this.DOMtoCanvas({
          x: 0.5 * this.frame.canvas.clientWidth,
          y: 0.5 * this.frame.canvas.clientHeight
        });
        var distanceFromCenter = {
          x: currentViewCenter.x - this.cameraState.position.x,
          y: currentViewCenter.y - this.cameraState.position.y
        };
        this.body.view.translation.x += distanceFromCenter.x * this.body.view.scale;
        this.body.view.translation.y += distanceFromCenter.y * this.body.view.scale;
      }
    }
  }, {
    key: "_prepareValue",
    value: function _prepareValue(value) {
      if (typeof value === "number") {
        return value + "px";
      } else if (typeof value === "string") {
        if (indexOf4(value).call(value, "%") !== -1 || indexOf4(value).call(value, "px") !== -1) {
          return value;
        } else if (indexOf4(value).call(value, "%") === -1) {
          return value + "px";
        }
      }
      throw new Error("Could not use the value supplied for width or height:" + value);
    }
  }, {
    key: "_create",
    value: function _create() {
      while (this.body.container.hasChildNodes()) {
        this.body.container.removeChild(this.body.container.firstChild);
      }
      this.frame = document.createElement("div");
      this.frame.className = "vis-network";
      this.frame.style.position = "relative";
      this.frame.style.overflow = "hidden";
      this.frame.tabIndex = 0;
      this.frame.canvas = document.createElement("canvas");
      this.frame.canvas.style.position = "relative";
      this.frame.appendChild(this.frame.canvas);
      if (!this.frame.canvas.getContext) {
        var noCanvas = document.createElement("DIV");
        noCanvas.style.color = "red";
        noCanvas.style.fontWeight = "bold";
        noCanvas.style.padding = "10px";
        noCanvas.innerText = "Error: your browser does not support HTML canvas";
        this.frame.canvas.appendChild(noCanvas);
      } else {
        this._setPixelRatio();
        this.setTransform();
      }
      this.body.container.appendChild(this.frame);
      this.body.view.scale = 1;
      this.body.view.translation = {
        x: 0.5 * this.frame.canvas.clientWidth,
        y: 0.5 * this.frame.canvas.clientHeight
      };
      this._bindHammer();
    }
  }, {
    key: "_bindHammer",
    value: function _bindHammer() {
      var _this3 = this;
      if (this.hammer !== void 0) {
        this.hammer.destroy();
      }
      this.drag = {};
      this.pinch = {};
      this.hammer = new Hammer2(this.frame.canvas);
      this.hammer.get("pinch").set({
        enable: true
      });
      this.hammer.get("pan").set({
        threshold: 5,
        direction: Hammer2.DIRECTION_ALL
      });
      onTouch(this.hammer, function(event) {
        _this3.body.eventListeners.onTouch(event);
      });
      this.hammer.on("tap", function(event) {
        _this3.body.eventListeners.onTap(event);
      });
      this.hammer.on("doubletap", function(event) {
        _this3.body.eventListeners.onDoubleTap(event);
      });
      this.hammer.on("press", function(event) {
        _this3.body.eventListeners.onHold(event);
      });
      this.hammer.on("panstart", function(event) {
        _this3.body.eventListeners.onDragStart(event);
      });
      this.hammer.on("panmove", function(event) {
        _this3.body.eventListeners.onDrag(event);
      });
      this.hammer.on("panend", function(event) {
        _this3.body.eventListeners.onDragEnd(event);
      });
      this.hammer.on("pinch", function(event) {
        _this3.body.eventListeners.onPinch(event);
      });
      this.frame.canvas.addEventListener("wheel", function(event) {
        _this3.body.eventListeners.onMouseWheel(event);
      });
      this.frame.canvas.addEventListener("mousemove", function(event) {
        _this3.body.eventListeners.onMouseMove(event);
      });
      this.frame.canvas.addEventListener("contextmenu", function(event) {
        _this3.body.eventListeners.onContext(event);
      });
      this.hammerFrame = new Hammer2(this.frame);
      onRelease(this.hammerFrame, function(event) {
        _this3.body.eventListeners.onRelease(event);
      });
    }
  }, {
    key: "setSize",
    value: function setSize() {
      var width = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.options.width;
      var height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.options.height;
      width = this._prepareValue(width);
      height = this._prepareValue(height);
      var emitEvent = false;
      var oldWidth = this.frame.canvas.width;
      var oldHeight = this.frame.canvas.height;
      var previousRatio = this.pixelRatio;
      this._setPixelRatio();
      if (width != this.options.width || height != this.options.height || this.frame.style.width != width || this.frame.style.height != height) {
        this._getCameraState(previousRatio);
        this.frame.style.width = width;
        this.frame.style.height = height;
        this.frame.canvas.style.width = "100%";
        this.frame.canvas.style.height = "100%";
        this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
        this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
        this.options.width = width;
        this.options.height = height;
        this.canvasViewCenter = {
          x: 0.5 * this.frame.clientWidth,
          y: 0.5 * this.frame.clientHeight
        };
        emitEvent = true;
      } else {
        var newWidth = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
        var newHeight = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
        if (this.frame.canvas.width !== newWidth || this.frame.canvas.height !== newHeight) {
          this._getCameraState(previousRatio);
        }
        if (this.frame.canvas.width !== newWidth) {
          this.frame.canvas.width = newWidth;
          emitEvent = true;
        }
        if (this.frame.canvas.height !== newHeight) {
          this.frame.canvas.height = newHeight;
          emitEvent = true;
        }
      }
      if (emitEvent === true) {
        this.body.emitter.emit("resize", {
          width: Math.round(this.frame.canvas.width / this.pixelRatio),
          height: Math.round(this.frame.canvas.height / this.pixelRatio),
          oldWidth: Math.round(oldWidth / this.pixelRatio),
          oldHeight: Math.round(oldHeight / this.pixelRatio)
        });
        this._setCameraState();
      }
      this.initialized = true;
      return emitEvent;
    }
  }, {
    key: "getContext",
    value: function getContext() {
      return this.frame.canvas.getContext("2d");
    }
  }, {
    key: "_determinePixelRatio",
    value: function _determinePixelRatio() {
      var ctx = this.getContext();
      if (ctx === void 0) {
        throw new Error("Could not get canvax context");
      }
      var numerator = 1;
      if (typeof window !== "undefined") {
        numerator = window.devicePixelRatio || 1;
      }
      var denominator = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
      return numerator / denominator;
    }
  }, {
    key: "_setPixelRatio",
    value: function _setPixelRatio() {
      this.pixelRatio = this._determinePixelRatio();
    }
  }, {
    key: "setTransform",
    value: function setTransform() {
      var ctx = this.getContext();
      if (ctx === void 0) {
        throw new Error("Could not get canvax context");
      }
      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
    }
  }, {
    key: "_XconvertDOMtoCanvas",
    value: function _XconvertDOMtoCanvas(x) {
      return (x - this.body.view.translation.x) / this.body.view.scale;
    }
  }, {
    key: "_XconvertCanvasToDOM",
    value: function _XconvertCanvasToDOM(x) {
      return x * this.body.view.scale + this.body.view.translation.x;
    }
  }, {
    key: "_YconvertDOMtoCanvas",
    value: function _YconvertDOMtoCanvas(y) {
      return (y - this.body.view.translation.y) / this.body.view.scale;
    }
  }, {
    key: "_YconvertCanvasToDOM",
    value: function _YconvertCanvasToDOM(y) {
      return y * this.body.view.scale + this.body.view.translation.y;
    }
  }, {
    key: "canvasToDOM",
    value: function canvasToDOM(pos) {
      return {
        x: this._XconvertCanvasToDOM(pos.x),
        y: this._YconvertCanvasToDOM(pos.y)
      };
    }
  }, {
    key: "DOMtoCanvas",
    value: function DOMtoCanvas(pos) {
      return {
        x: this._XconvertDOMtoCanvas(pos.x),
        y: this._YconvertDOMtoCanvas(pos.y)
      };
    }
  }]);
  return Canvas2;
}();
function normalizeFitOptions(rawOptions, allNodeIds) {
  var options2 = assign$22({
    nodes: allNodeIds,
    minZoomLevel: Number.MIN_VALUE,
    maxZoomLevel: 1
  }, rawOptions !== null && rawOptions !== void 0 ? rawOptions : {});
  if (!isArray$12(options2.nodes)) {
    throw new TypeError("Nodes has to be an array of ids.");
  }
  if (options2.nodes.length === 0) {
    options2.nodes = allNodeIds;
  }
  if (!(typeof options2.minZoomLevel === "number" && options2.minZoomLevel > 0)) {
    throw new TypeError("Min zoom level has to be a number higher than zero.");
  }
  if (!(typeof options2.maxZoomLevel === "number" && options2.minZoomLevel <= options2.maxZoomLevel)) {
    throw new TypeError("Max zoom level has to be a number higher than min zoom level.");
  }
  return options2;
}
var View = function() {
  function View2(body, canvas) {
    var _context, _this = this, _context2;
    _classCallCheck2(this, View2);
    this.body = body;
    this.canvas = canvas;
    this.animationSpeed = 1 / this.renderRefreshRate;
    this.animationEasingFunction = "easeInOutQuint";
    this.easingTime = 0;
    this.sourceScale = 0;
    this.targetScale = 0;
    this.sourceTranslation = 0;
    this.targetTranslation = 0;
    this.lockedOnNodeId = void 0;
    this.lockedOnNodeOffset = void 0;
    this.touchTime = 0;
    this.viewFunction = void 0;
    this.body.emitter.on("fit", bind$52(_context = this.fit).call(_context, this));
    this.body.emitter.on("animationFinished", function() {
      _this.body.emitter.emit("_stopRendering");
    });
    this.body.emitter.on("unlockNode", bind$52(_context2 = this.releaseNode).call(_context2, this));
  }
  _createClass2(View2, [{
    key: "setOptions",
    value: function setOptions() {
      var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      this.options = options2;
    }
  }, {
    key: "fit",
    value: function fit(options2) {
      var initialZoom = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      options2 = normalizeFitOptions(options2, this.body.nodeIndices);
      var canvasWidth = this.canvas.frame.canvas.clientWidth;
      var canvasHeight = this.canvas.frame.canvas.clientHeight;
      var range;
      var zoomLevel;
      if (canvasWidth === 0 || canvasHeight === 0) {
        zoomLevel = 1;
        range = NetworkUtil.getRange(this.body.nodes, options2.nodes);
      } else if (initialZoom === true) {
        var positionDefined = 0;
        for (var nodeId in this.body.nodes) {
          if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
            var node = this.body.nodes[nodeId];
            if (node.predefinedPosition === true) {
              positionDefined += 1;
            }
          }
        }
        if (positionDefined > 0.5 * this.body.nodeIndices.length) {
          this.fit(options2, false);
          return;
        }
        range = NetworkUtil.getRange(this.body.nodes, options2.nodes);
        var numberOfNodes = this.body.nodeIndices.length;
        zoomLevel = 12.662 / (numberOfNodes + 7.4147) + 0.0964822;
        var factor = Math.min(canvasWidth / 600, canvasHeight / 600);
        zoomLevel *= factor;
      } else {
        this.body.emitter.emit("_resizeNodes");
        range = NetworkUtil.getRange(this.body.nodes, options2.nodes);
        var xDistance = Math.abs(range.maxX - range.minX) * 1.1;
        var yDistance = Math.abs(range.maxY - range.minY) * 1.1;
        var xZoomLevel = canvasWidth / xDistance;
        var yZoomLevel = canvasHeight / yDistance;
        zoomLevel = xZoomLevel <= yZoomLevel ? xZoomLevel : yZoomLevel;
      }
      if (zoomLevel > options2.maxZoomLevel) {
        zoomLevel = options2.maxZoomLevel;
      } else if (zoomLevel < options2.minZoomLevel) {
        zoomLevel = options2.minZoomLevel;
      }
      var center = NetworkUtil.findCenter(range);
      var animationOptions = {
        position: center,
        scale: zoomLevel,
        animation: options2.animation
      };
      this.moveTo(animationOptions);
    }
  }, {
    key: "focus",
    value: function focus(nodeId) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (this.body.nodes[nodeId] !== void 0) {
        var nodePosition = {
          x: this.body.nodes[nodeId].x,
          y: this.body.nodes[nodeId].y
        };
        options2.position = nodePosition;
        options2.lockedOnNode = nodeId;
        this.moveTo(options2);
      } else {
        console.error("Node: " + nodeId + " cannot be found.");
      }
    }
  }, {
    key: "moveTo",
    value: function moveTo(options2) {
      if (options2 === void 0) {
        options2 = {};
        return;
      }
      if (options2.offset != null) {
        if (options2.offset.x != null) {
          options2.offset.x = +options2.offset.x;
          if (!_isFinite(options2.offset.x)) {
            throw new TypeError('The option "offset.x" has to be a finite number.');
          }
        } else {
          options2.offset.x = 0;
        }
        if (options2.offset.y != null) {
          options2.offset.y = +options2.offset.y;
          if (!_isFinite(options2.offset.y)) {
            throw new TypeError('The option "offset.y" has to be a finite number.');
          }
        } else {
          options2.offset.x = 0;
        }
      } else {
        options2.offset = {
          x: 0,
          y: 0
        };
      }
      if (options2.position != null) {
        if (options2.position.x != null) {
          options2.position.x = +options2.position.x;
          if (!_isFinite(options2.position.x)) {
            throw new TypeError('The option "position.x" has to be a finite number.');
          }
        } else {
          options2.position.x = 0;
        }
        if (options2.position.y != null) {
          options2.position.y = +options2.position.y;
          if (!_isFinite(options2.position.y)) {
            throw new TypeError('The option "position.y" has to be a finite number.');
          }
        } else {
          options2.position.x = 0;
        }
      } else {
        options2.position = this.getViewPosition();
      }
      if (options2.scale != null) {
        options2.scale = +options2.scale;
        if (!(options2.scale > 0)) {
          throw new TypeError('The option "scale" has to be a number greater than zero.');
        }
      } else {
        options2.scale = this.body.view.scale;
      }
      if (options2.animation === void 0) {
        options2.animation = {
          duration: 0
        };
      }
      if (options2.animation === false) {
        options2.animation = {
          duration: 0
        };
      }
      if (options2.animation === true) {
        options2.animation = {};
      }
      if (options2.animation.duration === void 0) {
        options2.animation.duration = 1e3;
      }
      if (options2.animation.easingFunction === void 0) {
        options2.animation.easingFunction = "easeInOutQuad";
      }
      this.animateView(options2);
    }
  }, {
    key: "animateView",
    value: function animateView(options2) {
      if (options2 === void 0) {
        return;
      }
      this.animationEasingFunction = options2.animation.easingFunction;
      this.releaseNode();
      if (options2.locked === true) {
        this.lockedOnNodeId = options2.lockedOnNode;
        this.lockedOnNodeOffset = options2.offset;
      }
      if (this.easingTime != 0) {
        this._transitionRedraw(true);
      }
      this.sourceScale = this.body.view.scale;
      this.sourceTranslation = this.body.view.translation;
      this.targetScale = options2.scale;
      this.body.view.scale = this.targetScale;
      var viewCenter = this.canvas.DOMtoCanvas({
        x: 0.5 * this.canvas.frame.canvas.clientWidth,
        y: 0.5 * this.canvas.frame.canvas.clientHeight
      });
      var distanceFromCenter = {
        x: viewCenter.x - options2.position.x,
        y: viewCenter.y - options2.position.y
      };
      this.targetTranslation = {
        x: this.sourceTranslation.x + distanceFromCenter.x * this.targetScale + options2.offset.x,
        y: this.sourceTranslation.y + distanceFromCenter.y * this.targetScale + options2.offset.y
      };
      if (options2.animation.duration === 0) {
        if (this.lockedOnNodeId != void 0) {
          var _context3;
          this.viewFunction = bind$52(_context3 = this._lockedRedraw).call(_context3, this);
          this.body.emitter.on("initRedraw", this.viewFunction);
        } else {
          this.body.view.scale = this.targetScale;
          this.body.view.translation = this.targetTranslation;
          this.body.emitter.emit("_requestRedraw");
        }
      } else {
        var _context4;
        this.animationSpeed = 1 / (60 * options2.animation.duration * 1e-3) || 1 / 60;
        this.animationEasingFunction = options2.animation.easingFunction;
        this.viewFunction = bind$52(_context4 = this._transitionRedraw).call(_context4, this);
        this.body.emitter.on("initRedraw", this.viewFunction);
        this.body.emitter.emit("_startRendering");
      }
    }
  }, {
    key: "_lockedRedraw",
    value: function _lockedRedraw() {
      var nodePosition = {
        x: this.body.nodes[this.lockedOnNodeId].x,
        y: this.body.nodes[this.lockedOnNodeId].y
      };
      var viewCenter = this.canvas.DOMtoCanvas({
        x: 0.5 * this.canvas.frame.canvas.clientWidth,
        y: 0.5 * this.canvas.frame.canvas.clientHeight
      });
      var distanceFromCenter = {
        x: viewCenter.x - nodePosition.x,
        y: viewCenter.y - nodePosition.y
      };
      var sourceTranslation = this.body.view.translation;
      var targetTranslation = {
        x: sourceTranslation.x + distanceFromCenter.x * this.body.view.scale + this.lockedOnNodeOffset.x,
        y: sourceTranslation.y + distanceFromCenter.y * this.body.view.scale + this.lockedOnNodeOffset.y
      };
      this.body.view.translation = targetTranslation;
    }
  }, {
    key: "releaseNode",
    value: function releaseNode() {
      if (this.lockedOnNodeId !== void 0 && this.viewFunction !== void 0) {
        this.body.emitter.off("initRedraw", this.viewFunction);
        this.lockedOnNodeId = void 0;
        this.lockedOnNodeOffset = void 0;
      }
    }
  }, {
    key: "_transitionRedraw",
    value: function _transitionRedraw() {
      var finished = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      this.easingTime += this.animationSpeed;
      this.easingTime = finished === true ? 1 : this.easingTime;
      var progress = easingFunctions[this.animationEasingFunction](this.easingTime);
      this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * progress;
      this.body.view.translation = {
        x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * progress,
        y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * progress
      };
      if (this.easingTime >= 1) {
        this.body.emitter.off("initRedraw", this.viewFunction);
        this.easingTime = 0;
        if (this.lockedOnNodeId != void 0) {
          var _context5;
          this.viewFunction = bind$52(_context5 = this._lockedRedraw).call(_context5, this);
          this.body.emitter.on("initRedraw", this.viewFunction);
        }
        this.body.emitter.emit("animationFinished");
      }
    }
  }, {
    key: "getScale",
    value: function getScale3() {
      return this.body.view.scale;
    }
  }, {
    key: "getViewPosition",
    value: function getViewPosition() {
      return this.canvas.DOMtoCanvas({
        x: 0.5 * this.canvas.frame.canvas.clientWidth,
        y: 0.5 * this.canvas.frame.canvas.clientHeight
      });
    }
  }]);
  return View2;
}();
function keycharm(options2) {
  var preventDefault = options2 && options2.preventDefault || false;
  var container = options2 && options2.container || window;
  var _exportFunctions = {};
  var _bound = {
    keydown: {},
    keyup: {}
  };
  var _keys = {};
  var i;
  for (i = 97; i <= 122; i++) {
    _keys[String.fromCharCode(i)] = {
      code: 65 + (i - 97),
      shift: false
    };
  }
  for (i = 65; i <= 90; i++) {
    _keys[String.fromCharCode(i)] = {
      code: i,
      shift: true
    };
  }
  for (i = 0; i <= 9; i++) {
    _keys["" + i] = {
      code: 48 + i,
      shift: false
    };
  }
  for (i = 1; i <= 12; i++) {
    _keys["F" + i] = {
      code: 111 + i,
      shift: false
    };
  }
  for (i = 0; i <= 9; i++) {
    _keys["num" + i] = {
      code: 96 + i,
      shift: false
    };
  }
  _keys["num*"] = {
    code: 106,
    shift: false
  };
  _keys["num+"] = {
    code: 107,
    shift: false
  };
  _keys["num-"] = {
    code: 109,
    shift: false
  };
  _keys["num/"] = {
    code: 111,
    shift: false
  };
  _keys["num."] = {
    code: 110,
    shift: false
  };
  _keys["left"] = {
    code: 37,
    shift: false
  };
  _keys["up"] = {
    code: 38,
    shift: false
  };
  _keys["right"] = {
    code: 39,
    shift: false
  };
  _keys["down"] = {
    code: 40,
    shift: false
  };
  _keys["space"] = {
    code: 32,
    shift: false
  };
  _keys["enter"] = {
    code: 13,
    shift: false
  };
  _keys["shift"] = {
    code: 16,
    shift: void 0
  };
  _keys["esc"] = {
    code: 27,
    shift: false
  };
  _keys["backspace"] = {
    code: 8,
    shift: false
  };
  _keys["tab"] = {
    code: 9,
    shift: false
  };
  _keys["ctrl"] = {
    code: 17,
    shift: false
  };
  _keys["alt"] = {
    code: 18,
    shift: false
  };
  _keys["delete"] = {
    code: 46,
    shift: false
  };
  _keys["pageup"] = {
    code: 33,
    shift: false
  };
  _keys["pagedown"] = {
    code: 34,
    shift: false
  };
  _keys["="] = {
    code: 187,
    shift: false
  };
  _keys["-"] = {
    code: 189,
    shift: false
  };
  _keys["]"] = {
    code: 221,
    shift: false
  };
  _keys["["] = {
    code: 219,
    shift: false
  };
  var down = function(event) {
    handleEvent(event, "keydown");
  };
  var up = function(event) {
    handleEvent(event, "keyup");
  };
  var handleEvent = function(event, type) {
    if (_bound[type][event.keyCode] !== void 0) {
      var bound = _bound[type][event.keyCode];
      for (var i2 = 0; i2 < bound.length; i2++) {
        if (bound[i2].shift === void 0) {
          bound[i2].fn(event);
        } else if (bound[i2].shift == true && event.shiftKey == true) {
          bound[i2].fn(event);
        } else if (bound[i2].shift == false && event.shiftKey == false) {
          bound[i2].fn(event);
        }
      }
      if (preventDefault == true) {
        event.preventDefault();
      }
    }
  };
  _exportFunctions.bind = function(key, callback, type) {
    if (type === void 0) {
      type = "keydown";
    }
    if (_keys[key] === void 0) {
      throw new Error("unsupported key: " + key);
    }
    if (_bound[type][_keys[key].code] === void 0) {
      _bound[type][_keys[key].code] = [];
    }
    _bound[type][_keys[key].code].push({
      fn: callback,
      shift: _keys[key].shift
    });
  };
  _exportFunctions.bindAll = function(callback, type) {
    if (type === void 0) {
      type = "keydown";
    }
    for (var key in _keys) {
      if (_keys.hasOwnProperty(key)) {
        _exportFunctions.bind(key, callback, type);
      }
    }
  };
  _exportFunctions.getKey = function(event) {
    for (var key in _keys) {
      if (_keys.hasOwnProperty(key)) {
        if (event.shiftKey == true && _keys[key].shift == true && event.keyCode == _keys[key].code) {
          return key;
        } else if (event.shiftKey == false && _keys[key].shift == false && event.keyCode == _keys[key].code) {
          return key;
        } else if (event.keyCode == _keys[key].code && key == "shift") {
          return key;
        }
      }
    }
    return "unknown key, currently not supported";
  };
  _exportFunctions.unbind = function(key, callback, type) {
    if (type === void 0) {
      type = "keydown";
    }
    if (_keys[key] === void 0) {
      throw new Error("unsupported key: " + key);
    }
    if (callback !== void 0) {
      var newBindings = [];
      var bound = _bound[type][_keys[key].code];
      if (bound !== void 0) {
        for (var i2 = 0; i2 < bound.length; i2++) {
          if (!(bound[i2].fn == callback && bound[i2].shift == _keys[key].shift)) {
            newBindings.push(_bound[type][_keys[key].code][i2]);
          }
        }
      }
      _bound[type][_keys[key].code] = newBindings;
    } else {
      _bound[type][_keys[key].code] = [];
    }
  };
  _exportFunctions.reset = function() {
    _bound = {
      keydown: {},
      keyup: {}
    };
  };
  _exportFunctions.destroy = function() {
    _bound = {
      keydown: {},
      keyup: {}
    };
    container.removeEventListener("keydown", down, true);
    container.removeEventListener("keyup", up, true);
  };
  container.addEventListener("keydown", down, true);
  container.addEventListener("keyup", up, true);
  return _exportFunctions;
}
var NavigationHandler = function() {
  function NavigationHandler2(body, canvas) {
    var _this = this;
    _classCallCheck2(this, NavigationHandler2);
    this.body = body;
    this.canvas = canvas;
    this.iconsCreated = false;
    this.navigationHammers = [];
    this.boundFunctions = {};
    this.touchTime = 0;
    this.activated = false;
    this.body.emitter.on("activate", function() {
      _this.activated = true;
      _this.configureKeyboardBindings();
    });
    this.body.emitter.on("deactivate", function() {
      _this.activated = false;
      _this.configureKeyboardBindings();
    });
    this.body.emitter.on("destroy", function() {
      if (_this.keycharm !== void 0) {
        _this.keycharm.destroy();
      }
    });
    this.options = {};
  }
  _createClass2(NavigationHandler2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      if (options2 !== void 0) {
        this.options = options2;
        this.create();
      }
    }
  }, {
    key: "create",
    value: function create9() {
      if (this.options.navigationButtons === true) {
        if (this.iconsCreated === false) {
          this.loadNavigationElements();
        }
      } else if (this.iconsCreated === true) {
        this.cleanNavigation();
      }
      this.configureKeyboardBindings();
    }
  }, {
    key: "cleanNavigation",
    value: function cleanNavigation() {
      if (this.navigationHammers.length != 0) {
        for (var i = 0; i < this.navigationHammers.length; i++) {
          this.navigationHammers[i].destroy();
        }
        this.navigationHammers = [];
      }
      if (this.navigationDOM && this.navigationDOM["wrapper"] && this.navigationDOM["wrapper"].parentNode) {
        this.navigationDOM["wrapper"].parentNode.removeChild(this.navigationDOM["wrapper"]);
      }
      this.iconsCreated = false;
    }
  }, {
    key: "loadNavigationElements",
    value: function loadNavigationElements() {
      var _this2 = this;
      this.cleanNavigation();
      this.navigationDOM = {};
      var navigationDivs = ["up", "down", "left", "right", "zoomIn", "zoomOut", "zoomExtends"];
      var navigationDivActions = ["_moveUp", "_moveDown", "_moveLeft", "_moveRight", "_zoomIn", "_zoomOut", "_fit"];
      this.navigationDOM["wrapper"] = document.createElement("div");
      this.navigationDOM["wrapper"].className = "vis-navigation";
      this.canvas.frame.appendChild(this.navigationDOM["wrapper"]);
      for (var i = 0; i < navigationDivs.length; i++) {
        this.navigationDOM[navigationDivs[i]] = document.createElement("div");
        this.navigationDOM[navigationDivs[i]].className = "vis-button vis-" + navigationDivs[i];
        this.navigationDOM["wrapper"].appendChild(this.navigationDOM[navigationDivs[i]]);
        var hammer = new Hammer2(this.navigationDOM[navigationDivs[i]]);
        if (navigationDivActions[i] === "_fit") {
          var _context;
          onTouch(hammer, bind$52(_context = this._fit).call(_context, this));
        } else {
          var _context2;
          onTouch(hammer, bind$52(_context2 = this.bindToRedraw).call(_context2, this, navigationDivActions[i]));
        }
        this.navigationHammers.push(hammer);
      }
      var hammerFrame = new Hammer2(this.canvas.frame);
      onRelease(hammerFrame, function() {
        _this2._stopMovement();
      });
      this.navigationHammers.push(hammerFrame);
      this.iconsCreated = true;
    }
  }, {
    key: "bindToRedraw",
    value: function bindToRedraw(action) {
      if (this.boundFunctions[action] === void 0) {
        var _context3;
        this.boundFunctions[action] = bind$52(_context3 = this[action]).call(_context3, this);
        this.body.emitter.on("initRedraw", this.boundFunctions[action]);
        this.body.emitter.emit("_startRendering");
      }
    }
  }, {
    key: "unbindFromRedraw",
    value: function unbindFromRedraw(action) {
      if (this.boundFunctions[action] !== void 0) {
        this.body.emitter.off("initRedraw", this.boundFunctions[action]);
        this.body.emitter.emit("_stopRendering");
        delete this.boundFunctions[action];
      }
    }
  }, {
    key: "_fit",
    value: function _fit() {
      if (new Date().valueOf() - this.touchTime > 700) {
        this.body.emitter.emit("fit", {
          duration: 700
        });
        this.touchTime = new Date().valueOf();
      }
    }
  }, {
    key: "_stopMovement",
    value: function _stopMovement() {
      for (var boundAction in this.boundFunctions) {
        if (Object.prototype.hasOwnProperty.call(this.boundFunctions, boundAction)) {
          this.body.emitter.off("initRedraw", this.boundFunctions[boundAction]);
          this.body.emitter.emit("_stopRendering");
        }
      }
      this.boundFunctions = {};
    }
  }, {
    key: "_moveUp",
    value: function _moveUp() {
      this.body.view.translation.y += this.options.keyboard.speed.y;
    }
  }, {
    key: "_moveDown",
    value: function _moveDown() {
      this.body.view.translation.y -= this.options.keyboard.speed.y;
    }
  }, {
    key: "_moveLeft",
    value: function _moveLeft() {
      this.body.view.translation.x += this.options.keyboard.speed.x;
    }
  }, {
    key: "_moveRight",
    value: function _moveRight() {
      this.body.view.translation.x -= this.options.keyboard.speed.x;
    }
  }, {
    key: "_zoomIn",
    value: function _zoomIn() {
      var scaleOld = this.body.view.scale;
      var scale = this.body.view.scale * (1 + this.options.keyboard.speed.zoom);
      var translation = this.body.view.translation;
      var scaleFrac = scale / scaleOld;
      var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
      var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;
      this.body.view.scale = scale;
      this.body.view.translation = {
        x: tx,
        y: ty
      };
      this.body.emitter.emit("zoom", {
        direction: "+",
        scale: this.body.view.scale,
        pointer: null
      });
    }
  }, {
    key: "_zoomOut",
    value: function _zoomOut() {
      var scaleOld = this.body.view.scale;
      var scale = this.body.view.scale / (1 + this.options.keyboard.speed.zoom);
      var translation = this.body.view.translation;
      var scaleFrac = scale / scaleOld;
      var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
      var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;
      this.body.view.scale = scale;
      this.body.view.translation = {
        x: tx,
        y: ty
      };
      this.body.emitter.emit("zoom", {
        direction: "-",
        scale: this.body.view.scale,
        pointer: null
      });
    }
  }, {
    key: "configureKeyboardBindings",
    value: function configureKeyboardBindings() {
      var _this3 = this;
      if (this.keycharm !== void 0) {
        this.keycharm.destroy();
      }
      if (this.options.keyboard.enabled === true) {
        if (this.options.keyboard.bindToWindow === true) {
          this.keycharm = keycharm({
            container: window,
            preventDefault: true
          });
        } else {
          this.keycharm = keycharm({
            container: this.canvas.frame,
            preventDefault: true
          });
        }
        this.keycharm.reset();
        if (this.activated === true) {
          var _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13, _context14, _context15, _context16, _context17, _context18, _context19, _context20, _context21, _context22, _context23, _context24, _context25, _context26, _context27;
          bind$52(_context4 = this.keycharm).call(_context4, "up", function() {
            _this3.bindToRedraw("_moveUp");
          }, "keydown");
          bind$52(_context5 = this.keycharm).call(_context5, "down", function() {
            _this3.bindToRedraw("_moveDown");
          }, "keydown");
          bind$52(_context6 = this.keycharm).call(_context6, "left", function() {
            _this3.bindToRedraw("_moveLeft");
          }, "keydown");
          bind$52(_context7 = this.keycharm).call(_context7, "right", function() {
            _this3.bindToRedraw("_moveRight");
          }, "keydown");
          bind$52(_context8 = this.keycharm).call(_context8, "=", function() {
            _this3.bindToRedraw("_zoomIn");
          }, "keydown");
          bind$52(_context9 = this.keycharm).call(_context9, "num+", function() {
            _this3.bindToRedraw("_zoomIn");
          }, "keydown");
          bind$52(_context10 = this.keycharm).call(_context10, "num-", function() {
            _this3.bindToRedraw("_zoomOut");
          }, "keydown");
          bind$52(_context11 = this.keycharm).call(_context11, "-", function() {
            _this3.bindToRedraw("_zoomOut");
          }, "keydown");
          bind$52(_context12 = this.keycharm).call(_context12, "[", function() {
            _this3.bindToRedraw("_zoomOut");
          }, "keydown");
          bind$52(_context13 = this.keycharm).call(_context13, "]", function() {
            _this3.bindToRedraw("_zoomIn");
          }, "keydown");
          bind$52(_context14 = this.keycharm).call(_context14, "pageup", function() {
            _this3.bindToRedraw("_zoomIn");
          }, "keydown");
          bind$52(_context15 = this.keycharm).call(_context15, "pagedown", function() {
            _this3.bindToRedraw("_zoomOut");
          }, "keydown");
          bind$52(_context16 = this.keycharm).call(_context16, "up", function() {
            _this3.unbindFromRedraw("_moveUp");
          }, "keyup");
          bind$52(_context17 = this.keycharm).call(_context17, "down", function() {
            _this3.unbindFromRedraw("_moveDown");
          }, "keyup");
          bind$52(_context18 = this.keycharm).call(_context18, "left", function() {
            _this3.unbindFromRedraw("_moveLeft");
          }, "keyup");
          bind$52(_context19 = this.keycharm).call(_context19, "right", function() {
            _this3.unbindFromRedraw("_moveRight");
          }, "keyup");
          bind$52(_context20 = this.keycharm).call(_context20, "=", function() {
            _this3.unbindFromRedraw("_zoomIn");
          }, "keyup");
          bind$52(_context21 = this.keycharm).call(_context21, "num+", function() {
            _this3.unbindFromRedraw("_zoomIn");
          }, "keyup");
          bind$52(_context22 = this.keycharm).call(_context22, "num-", function() {
            _this3.unbindFromRedraw("_zoomOut");
          }, "keyup");
          bind$52(_context23 = this.keycharm).call(_context23, "-", function() {
            _this3.unbindFromRedraw("_zoomOut");
          }, "keyup");
          bind$52(_context24 = this.keycharm).call(_context24, "[", function() {
            _this3.unbindFromRedraw("_zoomOut");
          }, "keyup");
          bind$52(_context25 = this.keycharm).call(_context25, "]", function() {
            _this3.unbindFromRedraw("_zoomIn");
          }, "keyup");
          bind$52(_context26 = this.keycharm).call(_context26, "pageup", function() {
            _this3.unbindFromRedraw("_zoomIn");
          }, "keyup");
          bind$52(_context27 = this.keycharm).call(_context27, "pagedown", function() {
            _this3.unbindFromRedraw("_zoomOut");
          }, "keyup");
        }
      }
    }
  }]);
  return NavigationHandler2;
}();
function _createForOfIteratorHelper$4(o, allowArrayLike) {
  var it2 = typeof symbol2 !== "undefined" && getIteratorMethod$12(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$12(o) || (it2 = _unsupportedIterableToArray$42(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$42(o, minLen) {
  var _context15;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$42(o, minLen);
  var n = slice4(_context15 = Object.prototype.toString.call(o)).call(_context15, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$32(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$42(o, minLen);
}
function _arrayLikeToArray$42(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var InteractionHandler = function() {
  function InteractionHandler2(body, canvas, selectionHandler) {
    var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8, _context9, _context10, _context11, _context12, _context13;
    _classCallCheck2(this, InteractionHandler2);
    this.body = body;
    this.canvas = canvas;
    this.selectionHandler = selectionHandler;
    this.navigationHandler = new NavigationHandler(body, canvas);
    this.body.eventListeners.onTap = bind$52(_context = this.onTap).call(_context, this);
    this.body.eventListeners.onTouch = bind$52(_context2 = this.onTouch).call(_context2, this);
    this.body.eventListeners.onDoubleTap = bind$52(_context3 = this.onDoubleTap).call(_context3, this);
    this.body.eventListeners.onHold = bind$52(_context4 = this.onHold).call(_context4, this);
    this.body.eventListeners.onDragStart = bind$52(_context5 = this.onDragStart).call(_context5, this);
    this.body.eventListeners.onDrag = bind$52(_context6 = this.onDrag).call(_context6, this);
    this.body.eventListeners.onDragEnd = bind$52(_context7 = this.onDragEnd).call(_context7, this);
    this.body.eventListeners.onMouseWheel = bind$52(_context8 = this.onMouseWheel).call(_context8, this);
    this.body.eventListeners.onPinch = bind$52(_context9 = this.onPinch).call(_context9, this);
    this.body.eventListeners.onMouseMove = bind$52(_context10 = this.onMouseMove).call(_context10, this);
    this.body.eventListeners.onRelease = bind$52(_context11 = this.onRelease).call(_context11, this);
    this.body.eventListeners.onContext = bind$52(_context12 = this.onContext).call(_context12, this);
    this.touchTime = 0;
    this.drag = {};
    this.pinch = {};
    this.popup = void 0;
    this.popupObj = void 0;
    this.popupTimer = void 0;
    this.body.functions.getPointer = bind$52(_context13 = this.getPointer).call(_context13, this);
    this.options = {};
    this.defaultOptions = {
      dragNodes: true,
      dragView: true,
      hover: false,
      keyboard: {
        enabled: false,
        speed: {
          x: 10,
          y: 10,
          zoom: 0.02
        },
        bindToWindow: true,
        autoFocus: true
      },
      navigationButtons: false,
      tooltipDelay: 300,
      zoomView: true,
      zoomSpeed: 1
    };
    assign$22(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  _createClass2(InteractionHandler2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this = this;
      this.body.emitter.on("destroy", function() {
        clearTimeout(_this.popupTimer);
        delete _this.body.functions.getPointer;
      });
    }
  }, {
    key: "setOptions",
    value: function setOptions(options2) {
      if (options2 !== void 0) {
        var fields = ["hideEdgesOnDrag", "hideEdgesOnZoom", "hideNodesOnDrag", "keyboard", "multiselect", "selectable", "selectConnectedEdges"];
        selectiveNotDeepExtend(fields, this.options, options2);
        mergeOptions(this.options, options2, "keyboard");
        if (options2.tooltip) {
          assign$22(this.options.tooltip, options2.tooltip);
          if (options2.tooltip.color) {
            this.options.tooltip.color = parseColor(options2.tooltip.color);
          }
        }
      }
      this.navigationHandler.setOptions(this.options);
    }
  }, {
    key: "getPointer",
    value: function getPointer(touch) {
      return {
        x: touch.x - getAbsoluteLeft(this.canvas.frame.canvas),
        y: touch.y - getAbsoluteTop(this.canvas.frame.canvas)
      };
    }
  }, {
    key: "onTouch",
    value: function onTouch2(event) {
      if (new Date().valueOf() - this.touchTime > 50) {
        this.drag.pointer = this.getPointer(event.center);
        this.drag.pinched = false;
        this.pinch.scale = this.body.view.scale;
        this.touchTime = new Date().valueOf();
      }
    }
  }, {
    key: "onTap",
    value: function onTap(event) {
      var pointer = this.getPointer(event.center);
      var multiselect = this.selectionHandler.options.multiselect && (event.changedPointers[0].ctrlKey || event.changedPointers[0].metaKey);
      this.checkSelectionChanges(pointer, multiselect);
      this.selectionHandler.commitAndEmit(pointer, event);
      this.selectionHandler.generateClickEvent("click", event, pointer);
    }
  }, {
    key: "onDoubleTap",
    value: function onDoubleTap(event) {
      var pointer = this.getPointer(event.center);
      this.selectionHandler.generateClickEvent("doubleClick", event, pointer);
    }
  }, {
    key: "onHold",
    value: function onHold(event) {
      var pointer = this.getPointer(event.center);
      var multiselect = this.selectionHandler.options.multiselect;
      this.checkSelectionChanges(pointer, multiselect);
      this.selectionHandler.commitAndEmit(pointer, event);
      this.selectionHandler.generateClickEvent("click", event, pointer);
      this.selectionHandler.generateClickEvent("hold", event, pointer);
    }
  }, {
    key: "onRelease",
    value: function onRelease2(event) {
      if (new Date().valueOf() - this.touchTime > 10) {
        var pointer = this.getPointer(event.center);
        this.selectionHandler.generateClickEvent("release", event, pointer);
        this.touchTime = new Date().valueOf();
      }
    }
  }, {
    key: "onContext",
    value: function onContext(event) {
      var pointer = this.getPointer({
        x: event.clientX,
        y: event.clientY
      });
      this.selectionHandler.generateClickEvent("oncontext", event, pointer);
    }
  }, {
    key: "checkSelectionChanges",
    value: function checkSelectionChanges(pointer) {
      var add = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      if (add === true) {
        this.selectionHandler.selectAdditionalOnPoint(pointer);
      } else {
        this.selectionHandler.selectOnPoint(pointer);
      }
    }
  }, {
    key: "_determineDifference",
    value: function _determineDifference(firstSet, secondSet) {
      var arrayDiff = function arrayDiff2(firstArr, secondArr) {
        var result = [];
        for (var i = 0; i < firstArr.length; i++) {
          var value = firstArr[i];
          if (indexOf4(secondArr).call(secondArr, value) === -1) {
            result.push(value);
          }
        }
        return result;
      };
      return {
        nodes: arrayDiff(firstSet.nodes, secondSet.nodes),
        edges: arrayDiff(firstSet.edges, secondSet.edges)
      };
    }
  }, {
    key: "onDragStart",
    value: function onDragStart(event) {
      if (this.drag.dragging) {
        return;
      }
      if (this.drag.pointer === void 0) {
        this.onTouch(event);
      }
      var node = this.selectionHandler.getNodeAt(this.drag.pointer);
      this.drag.dragging = true;
      this.drag.selection = [];
      this.drag.translation = assign$22({}, this.body.view.translation);
      this.drag.nodeId = void 0;
      if (event.srcEvent.shiftKey) {
        this.body.selectionBox.show = true;
        var pointer = this.getPointer(event.center);
        this.body.selectionBox.position.start = {
          x: this.canvas._XconvertDOMtoCanvas(pointer.x),
          y: this.canvas._YconvertDOMtoCanvas(pointer.y)
        };
        this.body.selectionBox.position.end = {
          x: this.canvas._XconvertDOMtoCanvas(pointer.x),
          y: this.canvas._YconvertDOMtoCanvas(pointer.y)
        };
      }
      if (node !== void 0 && this.options.dragNodes === true) {
        this.drag.nodeId = node.id;
        if (node.isSelected() === false) {
          this.selectionHandler.setSelection({
            nodes: [node.id]
          });
        }
        this.selectionHandler.generateClickEvent("dragStart", event, this.drag.pointer);
        var _iterator = _createForOfIteratorHelper$4(this.selectionHandler.getSelectedNodes()), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _node = _step.value;
            var s = {
              id: _node.id,
              node: _node,
              x: _node.x,
              y: _node.y,
              xFixed: _node.options.fixed.x,
              yFixed: _node.options.fixed.y
            };
            _node.options.fixed.x = true;
            _node.options.fixed.y = true;
            this.drag.selection.push(s);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else {
        this.selectionHandler.generateClickEvent("dragStart", event, this.drag.pointer, void 0, true);
      }
    }
  }, {
    key: "onDrag",
    value: function onDrag(event) {
      var _this2 = this;
      if (this.drag.pinched === true) {
        return;
      }
      this.body.emitter.emit("unlockNode");
      var pointer = this.getPointer(event.center);
      var selection = this.drag.selection;
      if (selection && selection.length && this.options.dragNodes === true) {
        this.selectionHandler.generateClickEvent("dragging", event, pointer);
        var deltaX = pointer.x - this.drag.pointer.x;
        var deltaY = pointer.y - this.drag.pointer.y;
        forEach$22(selection).call(selection, function(selection2) {
          var node = selection2.node;
          if (selection2.xFixed === false) {
            node.x = _this2.canvas._XconvertDOMtoCanvas(_this2.canvas._XconvertCanvasToDOM(selection2.x) + deltaX);
          }
          if (selection2.yFixed === false) {
            node.y = _this2.canvas._YconvertDOMtoCanvas(_this2.canvas._YconvertCanvasToDOM(selection2.y) + deltaY);
          }
        });
        this.body.emitter.emit("startSimulation");
      } else {
        if (event.srcEvent.shiftKey) {
          this.selectionHandler.generateClickEvent("dragging", event, pointer, void 0, true);
          if (this.drag.pointer === void 0) {
            this.onDragStart(event);
            return;
          }
          this.body.selectionBox.position.end = {
            x: this.canvas._XconvertDOMtoCanvas(pointer.x),
            y: this.canvas._YconvertDOMtoCanvas(pointer.y)
          };
          this.body.emitter.emit("_requestRedraw");
        }
        if (this.options.dragView === true && !event.srcEvent.shiftKey) {
          this.selectionHandler.generateClickEvent("dragging", event, pointer, void 0, true);
          if (this.drag.pointer === void 0) {
            this.onDragStart(event);
            return;
          }
          var diffX = pointer.x - this.drag.pointer.x;
          var diffY = pointer.y - this.drag.pointer.y;
          this.body.view.translation = {
            x: this.drag.translation.x + diffX,
            y: this.drag.translation.y + diffY
          };
          this.body.emitter.emit("_requestRedraw");
        }
      }
    }
  }, {
    key: "onDragEnd",
    value: function onDragEnd(event) {
      var _this3 = this;
      this.drag.dragging = false;
      if (this.body.selectionBox.show) {
        var _context14;
        this.body.selectionBox.show = false;
        var selectionBoxPosition = this.body.selectionBox.position;
        var selectionBoxPositionMinMax = {
          minX: Math.min(selectionBoxPosition.start.x, selectionBoxPosition.end.x),
          minY: Math.min(selectionBoxPosition.start.y, selectionBoxPosition.end.y),
          maxX: Math.max(selectionBoxPosition.start.x, selectionBoxPosition.end.x),
          maxY: Math.max(selectionBoxPosition.start.y, selectionBoxPosition.end.y)
        };
        var toBeSelectedNodes = filter4(_context14 = this.body.nodeIndices).call(_context14, function(nodeId) {
          var node = _this3.body.nodes[nodeId];
          return node.x >= selectionBoxPositionMinMax.minX && node.x <= selectionBoxPositionMinMax.maxX && node.y >= selectionBoxPositionMinMax.minY && node.y <= selectionBoxPositionMinMax.maxY;
        });
        forEach$22(toBeSelectedNodes).call(toBeSelectedNodes, function(nodeId) {
          return _this3.selectionHandler.selectObject(_this3.body.nodes[nodeId]);
        });
        var pointer = this.getPointer(event.center);
        this.selectionHandler.commitAndEmit(pointer, event);
        this.selectionHandler.generateClickEvent("dragEnd", event, this.getPointer(event.center), void 0, true);
        this.body.emitter.emit("_requestRedraw");
      } else {
        var selection = this.drag.selection;
        if (selection && selection.length) {
          forEach$22(selection).call(selection, function(s) {
            s.node.options.fixed.x = s.xFixed;
            s.node.options.fixed.y = s.yFixed;
          });
          this.selectionHandler.generateClickEvent("dragEnd", event, this.getPointer(event.center));
          this.body.emitter.emit("startSimulation");
        } else {
          this.selectionHandler.generateClickEvent("dragEnd", event, this.getPointer(event.center), void 0, true);
          this.body.emitter.emit("_requestRedraw");
        }
      }
    }
  }, {
    key: "onPinch",
    value: function onPinch(event) {
      var pointer = this.getPointer(event.center);
      this.drag.pinched = true;
      if (this.pinch["scale"] === void 0) {
        this.pinch.scale = 1;
      }
      var scale = this.pinch.scale * event.scale;
      this.zoom(scale, pointer);
    }
  }, {
    key: "zoom",
    value: function zoom(scale, pointer) {
      if (this.options.zoomView === true) {
        var scaleOld = this.body.view.scale;
        if (scale < 1e-5) {
          scale = 1e-5;
        }
        if (scale > 10) {
          scale = 10;
        }
        var preScaleDragPointer = void 0;
        if (this.drag !== void 0) {
          if (this.drag.dragging === true) {
            preScaleDragPointer = this.canvas.DOMtoCanvas(this.drag.pointer);
          }
        }
        var translation = this.body.view.translation;
        var scaleFrac = scale / scaleOld;
        var tx = (1 - scaleFrac) * pointer.x + translation.x * scaleFrac;
        var ty = (1 - scaleFrac) * pointer.y + translation.y * scaleFrac;
        this.body.view.scale = scale;
        this.body.view.translation = {
          x: tx,
          y: ty
        };
        if (preScaleDragPointer != void 0) {
          var postScaleDragPointer = this.canvas.canvasToDOM(preScaleDragPointer);
          this.drag.pointer.x = postScaleDragPointer.x;
          this.drag.pointer.y = postScaleDragPointer.y;
        }
        this.body.emitter.emit("_requestRedraw");
        if (scaleOld < scale) {
          this.body.emitter.emit("zoom", {
            direction: "+",
            scale: this.body.view.scale,
            pointer
          });
        } else {
          this.body.emitter.emit("zoom", {
            direction: "-",
            scale: this.body.view.scale,
            pointer
          });
        }
      }
    }
  }, {
    key: "onMouseWheel",
    value: function onMouseWheel(event) {
      if (this.options.zoomView === true) {
        if (event.deltaY !== 0) {
          var scale = this.body.view.scale;
          scale *= 1 + (event.deltaY < 0 ? 1 : -1) * (this.options.zoomSpeed * 0.1);
          var pointer = this.getPointer({
            x: event.clientX,
            y: event.clientY
          });
          this.zoom(scale, pointer);
        }
        event.preventDefault();
      }
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(event) {
      var _this4 = this;
      var pointer = this.getPointer({
        x: event.clientX,
        y: event.clientY
      });
      var popupVisible = false;
      if (this.popup !== void 0) {
        if (this.popup.hidden === false) {
          this._checkHidePopup(pointer);
        }
        if (this.popup.hidden === false) {
          popupVisible = true;
          this.popup.setPosition(pointer.x + 3, pointer.y - 5);
          this.popup.show();
        }
      }
      if (this.options.keyboard.autoFocus && this.options.keyboard.bindToWindow === false && this.options.keyboard.enabled === true) {
        this.canvas.frame.focus();
      }
      if (popupVisible === false) {
        if (this.popupTimer !== void 0) {
          clearInterval(this.popupTimer);
          this.popupTimer = void 0;
        }
        if (!this.drag.dragging) {
          this.popupTimer = setTimeout$12(function() {
            return _this4._checkShowPopup(pointer);
          }, this.options.tooltipDelay);
        }
      }
      if (this.options.hover === true) {
        this.selectionHandler.hoverObject(event, pointer);
      }
    }
  }, {
    key: "_checkShowPopup",
    value: function _checkShowPopup(pointer) {
      var x = this.canvas._XconvertDOMtoCanvas(pointer.x);
      var y = this.canvas._YconvertDOMtoCanvas(pointer.y);
      var pointerObj = {
        left: x,
        top: y,
        right: x,
        bottom: y
      };
      var previousPopupObjId = this.popupObj === void 0 ? void 0 : this.popupObj.id;
      var nodeUnderCursor = false;
      var popupType = "node";
      if (this.popupObj === void 0) {
        var nodeIndices = this.body.nodeIndices;
        var nodes = this.body.nodes;
        var node;
        var overlappingNodes = [];
        for (var i = 0; i < nodeIndices.length; i++) {
          node = nodes[nodeIndices[i]];
          if (node.isOverlappingWith(pointerObj) === true) {
            nodeUnderCursor = true;
            if (node.getTitle() !== void 0) {
              overlappingNodes.push(nodeIndices[i]);
            }
          }
        }
        if (overlappingNodes.length > 0) {
          this.popupObj = nodes[overlappingNodes[overlappingNodes.length - 1]];
          nodeUnderCursor = true;
        }
      }
      if (this.popupObj === void 0 && nodeUnderCursor === false) {
        var edgeIndices = this.body.edgeIndices;
        var edges = this.body.edges;
        var edge;
        var overlappingEdges = [];
        for (var _i = 0; _i < edgeIndices.length; _i++) {
          edge = edges[edgeIndices[_i]];
          if (edge.isOverlappingWith(pointerObj) === true) {
            if (edge.connected === true && edge.getTitle() !== void 0) {
              overlappingEdges.push(edgeIndices[_i]);
            }
          }
        }
        if (overlappingEdges.length > 0) {
          this.popupObj = edges[overlappingEdges[overlappingEdges.length - 1]];
          popupType = "edge";
        }
      }
      if (this.popupObj !== void 0) {
        if (this.popupObj.id !== previousPopupObjId) {
          if (this.popup === void 0) {
            this.popup = new Popup(this.canvas.frame);
          }
          this.popup.popupTargetType = popupType;
          this.popup.popupTargetId = this.popupObj.id;
          this.popup.setPosition(pointer.x + 3, pointer.y - 5);
          this.popup.setText(this.popupObj.getTitle());
          this.popup.show();
          this.body.emitter.emit("showPopup", this.popupObj.id);
        }
      } else {
        if (this.popup !== void 0) {
          this.popup.hide();
          this.body.emitter.emit("hidePopup");
        }
      }
    }
  }, {
    key: "_checkHidePopup",
    value: function _checkHidePopup(pointer) {
      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
      var stillOnObj = false;
      if (this.popup.popupTargetType === "node") {
        if (this.body.nodes[this.popup.popupTargetId] !== void 0) {
          stillOnObj = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(pointerObj);
          if (stillOnObj === true) {
            var overNode = this.selectionHandler.getNodeAt(pointer);
            stillOnObj = overNode === void 0 ? false : overNode.id === this.popup.popupTargetId;
          }
        }
      } else {
        if (this.selectionHandler.getNodeAt(pointer) === void 0) {
          if (this.body.edges[this.popup.popupTargetId] !== void 0) {
            stillOnObj = this.body.edges[this.popup.popupTargetId].isOverlappingWith(pointerObj);
          }
        }
      }
      if (stillOnObj === false) {
        this.popupObj = void 0;
        this.popup.hide();
        this.body.emitter.emit("hidePopup");
      }
    }
  }]);
  return InteractionHandler2;
}();
var collection$12 = collection$3;
var collectionStrong2 = collectionStrong$22;
collection$12("Set", function(init) {
  return function Set() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
}, collectionStrong2);
var path$12 = path$y;
var set$22 = path$12.Set;
var parent$42 = set$22;
var set$12 = parent$42;
var set2 = set$12;
var uncurryThis$22 = functionUncurryThis2;
var redefineAll$12 = redefineAll$3;
var getWeakData2 = internalMetadata2.exports.getWeakData;
var anObject2 = anObject$d;
var isObject$12 = isObject$j;
var anInstance2 = anInstance$3;
var iterate2 = iterate$3;
var ArrayIterationModule = arrayIteration2;
var hasOwn4 = hasOwnProperty_12;
var InternalStateModule2 = internalState2;
var setInternalState2 = InternalStateModule2.set;
var internalStateGetterFor2 = InternalStateModule2.getterFor;
var find = ArrayIterationModule.find;
var findIndex = ArrayIterationModule.findIndex;
var splice4 = uncurryThis$22([].splice);
var id2 = 0;
var uncaughtFrozenStore = function(store) {
  return store.frozen || (store.frozen = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function() {
  this.entries = [];
};
var findUncaughtFrozen = function(store, key) {
  return find(store.entries, function(it2) {
    return it2[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry)
      return entry[1];
  },
  has: function(key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry)
      entry[1] = value;
    else
      this.entries.push([key, value]);
  },
  "delete": function(key) {
    var index2 = findIndex(this.entries, function(it2) {
      return it2[0] === key;
    });
    if (~index2)
      splice4(this.entries, index2, 1);
    return !!~index2;
  }
};
var collectionWeak$1 = {
  getConstructor: function(wrapper2, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper2(function(that, iterable) {
      anInstance2(that, Prototype);
      setInternalState2(that, {
        type: CONSTRUCTOR_NAME,
        id: id2++,
        frozen: void 0
      });
      if (iterable != void 0)
        iterate2(iterable, that[ADDER], {
          that,
          AS_ENTRIES: IS_MAP
        });
    });
    var Prototype = Constructor.prototype;
    var getInternalState3 = internalStateGetterFor2(CONSTRUCTOR_NAME);
    var define = function(that, key, value) {
      var state = getInternalState3(that);
      var data3 = getWeakData2(anObject2(key), true);
      if (data3 === true)
        uncaughtFrozenStore(state).set(key, value);
      else
        data3[state.id] = value;
      return that;
    };
    redefineAll$12(Prototype, {
      "delete": function(key) {
        var state = getInternalState3(this);
        if (!isObject$12(key))
          return false;
        var data3 = getWeakData2(key);
        if (data3 === true)
          return uncaughtFrozenStore(state)["delete"](key);
        return data3 && hasOwn4(data3, state.id) && delete data3[state.id];
      },
      has: function has3(key) {
        var state = getInternalState3(this);
        if (!isObject$12(key))
          return false;
        var data3 = getWeakData2(key);
        if (data3 === true)
          return uncaughtFrozenStore(state).has(key);
        return data3 && hasOwn4(data3, state.id);
      }
    });
    redefineAll$12(Prototype, IS_MAP ? {
      get: function get3(key) {
        var state = getInternalState3(this);
        if (isObject$12(key)) {
          var data3 = getWeakData2(key);
          if (data3 === true)
            return uncaughtFrozenStore(state).get(key);
          return data3 ? data3[state.id] : void 0;
        }
      },
      set: function set3(key, value) {
        return define(this, key, value);
      }
    } : {
      add: function add(value) {
        return define(this, value, true);
      }
    });
    return Constructor;
  }
};
var global$32 = global$O;
var uncurryThis$12 = functionUncurryThis2;
var redefineAll2 = redefineAll$3;
var InternalMetadataModule2 = internalMetadata2.exports;
var collection2 = collection$3;
var collectionWeak = collectionWeak$1;
var isObject2 = isObject$j;
var isExtensible4 = objectIsExtensible2;
var enforceInternalState = internalState2.enforce;
var NATIVE_WEAK_MAP2 = nativeWeakMap2;
var IS_IE11 = !global$32.ActiveXObject && "ActiveXObject" in global$32;
var InternalWeakMap;
var wrapper = function(init) {
  return function WeakMap3() {
    return init(this, arguments.length ? arguments[0] : void 0);
  };
};
var $WeakMap = collection2("WeakMap", wrapper, collectionWeak);
if (NATIVE_WEAK_MAP2 && IS_IE11) {
  InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
  InternalMetadataModule2.enable();
  WeakMapPrototype = $WeakMap.prototype;
  nativeDelete = uncurryThis$12(WeakMapPrototype["delete"]);
  nativeHas = uncurryThis$12(WeakMapPrototype.has);
  nativeGet = uncurryThis$12(WeakMapPrototype.get);
  nativeSet = uncurryThis$12(WeakMapPrototype.set);
  redefineAll2(WeakMapPrototype, {
    "delete": function(key) {
      if (isObject2(key) && !isExtensible4(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen)
          state.frozen = new InternalWeakMap();
        return nativeDelete(this, key) || state.frozen["delete"](key);
      }
      return nativeDelete(this, key);
    },
    has: function has3(key) {
      if (isObject2(key) && !isExtensible4(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen)
          state.frozen = new InternalWeakMap();
        return nativeHas(this, key) || state.frozen.has(key);
      }
      return nativeHas(this, key);
    },
    get: function get3(key) {
      if (isObject2(key) && !isExtensible4(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen)
          state.frozen = new InternalWeakMap();
        return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
      }
      return nativeGet(this, key);
    },
    set: function set3(key, value) {
      if (isObject2(key) && !isExtensible4(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen)
          state.frozen = new InternalWeakMap();
        nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
      } else
        nativeSet(this, key, value);
      return this;
    }
  });
}
var WeakMapPrototype;
var nativeDelete;
var nativeHas;
var nativeGet;
var nativeSet;
var path2 = path$y;
var weakMap$2 = path2.WeakMap;
var parent$32 = weakMap$2;
var weakMap$1 = parent$32;
var weakMap = weakMap$1;
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function _createForOfIteratorHelper$32(o, allowArrayLike) {
  var it2 = typeof symbol2 !== "undefined" && getIteratorMethod$12(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$12(o) || (it2 = _unsupportedIterableToArray$32(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$32(o, minLen) {
  var _context2;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$32(o, minLen);
  var n = slice4(_context2 = Object.prototype.toString.call(o)).call(_context2, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$32(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$32(o, minLen);
}
function _arrayLikeToArray$32(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var _SingleTypeSelectionAccumulator_previousSelection;
var _SingleTypeSelectionAccumulator_selection;
var _SelectionAccumulator_nodes;
var _SelectionAccumulator_edges;
var _SelectionAccumulator_commitHandler;
function diffSets(prev, next4) {
  var diff = new set2();
  var _iterator = _createForOfIteratorHelper$32(next4), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var item = _step.value;
      if (!prev.has(item)) {
        diff.add(item);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return diff;
}
var SingleTypeSelectionAccumulator = function() {
  function SingleTypeSelectionAccumulator2() {
    _classCallCheck2(this, SingleTypeSelectionAccumulator2);
    _SingleTypeSelectionAccumulator_previousSelection.set(this, new set2());
    _SingleTypeSelectionAccumulator_selection.set(this, new set2());
  }
  _createClass2(SingleTypeSelectionAccumulator2, [{
    key: "size",
    get: function get3() {
      return __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").size;
    }
  }, {
    key: "add",
    value: function add() {
      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
        items[_key] = arguments[_key];
      }
      for (var _i = 0, _items = items; _i < _items.length; _i++) {
        var item = _items[_i];
        __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").add(item);
      }
    }
  }, {
    key: "delete",
    value: function _delete() {
      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        items[_key2] = arguments[_key2];
      }
      for (var _i2 = 0, _items2 = items; _i2 < _items2.length; _i2++) {
        var item = _items2[_i2];
        __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").delete(item);
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f").clear();
    }
  }, {
    key: "getSelection",
    value: function getSelection() {
      return _toConsumableArray2(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"));
    }
  }, {
    key: "getChanges",
    value: function getChanges() {
      return {
        added: _toConsumableArray2(diffSets(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f"), __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"))),
        deleted: _toConsumableArray2(diffSets(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"), __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f"))),
        previous: _toConsumableArray2(new set2(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f"))),
        current: _toConsumableArray2(new set2(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f")))
      };
    }
  }, {
    key: "commit",
    value: function commit() {
      var changes = this.getChanges();
      __classPrivateFieldSet(this, _SingleTypeSelectionAccumulator_previousSelection, __classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_selection, "f"), "f");
      __classPrivateFieldSet(this, _SingleTypeSelectionAccumulator_selection, new set2(__classPrivateFieldGet(this, _SingleTypeSelectionAccumulator_previousSelection, "f")), "f");
      var _iterator2 = _createForOfIteratorHelper$32(changes.added), _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
          var item = _step2.value;
          item.select();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var _iterator3 = _createForOfIteratorHelper$32(changes.deleted), _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
          var _item = _step3.value;
          _item.unselect();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return changes;
    }
  }]);
  return SingleTypeSelectionAccumulator2;
}();
_SingleTypeSelectionAccumulator_previousSelection = new weakMap(), _SingleTypeSelectionAccumulator_selection = new weakMap();
var SelectionAccumulator = function() {
  function SelectionAccumulator2() {
    var commitHandler = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function() {
    };
    _classCallCheck2(this, SelectionAccumulator2);
    _SelectionAccumulator_nodes.set(this, new SingleTypeSelectionAccumulator());
    _SelectionAccumulator_edges.set(this, new SingleTypeSelectionAccumulator());
    _SelectionAccumulator_commitHandler.set(this, void 0);
    __classPrivateFieldSet(this, _SelectionAccumulator_commitHandler, commitHandler, "f");
  }
  _createClass2(SelectionAccumulator2, [{
    key: "sizeNodes",
    get: function get3() {
      return __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").size;
    }
  }, {
    key: "sizeEdges",
    get: function get3() {
      return __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").size;
    }
  }, {
    key: "getNodes",
    value: function getNodes() {
      return __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").getSelection();
    }
  }, {
    key: "getEdges",
    value: function getEdges() {
      return __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").getSelection();
    }
  }, {
    key: "addNodes",
    value: function addNodes() {
      var _classPrivateFieldGe;
      (_classPrivateFieldGe = __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f")).add.apply(_classPrivateFieldGe, arguments);
    }
  }, {
    key: "addEdges",
    value: function addEdges() {
      var _classPrivateFieldGe2;
      (_classPrivateFieldGe2 = __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f")).add.apply(_classPrivateFieldGe2, arguments);
    }
  }, {
    key: "deleteNodes",
    value: function deleteNodes(node) {
      __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").delete(node);
    }
  }, {
    key: "deleteEdges",
    value: function deleteEdges(edge) {
      __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").delete(edge);
    }
  }, {
    key: "clear",
    value: function clear() {
      __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").clear();
      __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").clear();
    }
  }, {
    key: "commit",
    value: function commit() {
      var _classPrivateFieldGe3, _context;
      var summary = {
        nodes: __classPrivateFieldGet(this, _SelectionAccumulator_nodes, "f").commit(),
        edges: __classPrivateFieldGet(this, _SelectionAccumulator_edges, "f").commit()
      };
      for (var _len3 = arguments.length, rest = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        rest[_key3] = arguments[_key3];
      }
      (_classPrivateFieldGe3 = __classPrivateFieldGet(this, _SelectionAccumulator_commitHandler, "f")).call.apply(_classPrivateFieldGe3, concat4(_context = [this, summary]).call(_context, rest));
      return summary;
    }
  }]);
  return SelectionAccumulator2;
}();
_SelectionAccumulator_nodes = new weakMap(), _SelectionAccumulator_edges = new weakMap(), _SelectionAccumulator_commitHandler = new weakMap();
function _createForOfIteratorHelper$22(o, allowArrayLike) {
  var it2 = typeof symbol2 !== "undefined" && getIteratorMethod$12(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$12(o) || (it2 = _unsupportedIterableToArray$22(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$22(o, minLen) {
  var _context3;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$22(o, minLen);
  var n = slice4(_context3 = Object.prototype.toString.call(o)).call(_context3, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$32(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$22(o, minLen);
}
function _arrayLikeToArray$22(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var SelectionHandler = function() {
  function SelectionHandler2(body, canvas) {
    var _this = this;
    _classCallCheck2(this, SelectionHandler2);
    this.body = body;
    this.canvas = canvas;
    this._selectionAccumulator = new SelectionAccumulator();
    this.hoverObj = {
      nodes: {},
      edges: {}
    };
    this.options = {};
    this.defaultOptions = {
      multiselect: false,
      selectable: true,
      selectConnectedEdges: true,
      hoverConnectedEdges: true
    };
    assign$22(this.options, this.defaultOptions);
    this.body.emitter.on("_dataChanged", function() {
      _this.updateSelection();
    });
  }
  _createClass2(SelectionHandler2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      if (options2 !== void 0) {
        var fields = ["multiselect", "hoverConnectedEdges", "selectable", "selectConnectedEdges"];
        selectiveDeepExtend(fields, this.options, options2);
      }
    }
  }, {
    key: "selectOnPoint",
    value: function selectOnPoint(pointer) {
      var selected = false;
      if (this.options.selectable === true) {
        var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);
        this.unselectAll();
        if (obj !== void 0) {
          selected = this.selectObject(obj);
        }
        this.body.emitter.emit("_requestRedraw");
      }
      return selected;
    }
  }, {
    key: "selectAdditionalOnPoint",
    value: function selectAdditionalOnPoint(pointer) {
      var selectionChanged = false;
      if (this.options.selectable === true) {
        var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);
        if (obj !== void 0) {
          selectionChanged = true;
          if (obj.isSelected() === true) {
            this.deselectObject(obj);
          } else {
            this.selectObject(obj);
          }
          this.body.emitter.emit("_requestRedraw");
        }
      }
      return selectionChanged;
    }
  }, {
    key: "_initBaseEvent",
    value: function _initBaseEvent(event, pointer) {
      var properties = {};
      properties["pointer"] = {
        DOM: {
          x: pointer.x,
          y: pointer.y
        },
        canvas: this.canvas.DOMtoCanvas(pointer)
      };
      properties["event"] = event;
      return properties;
    }
  }, {
    key: "generateClickEvent",
    value: function generateClickEvent(eventType, event, pointer, oldSelection) {
      var emptySelection = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var properties = this._initBaseEvent(event, pointer);
      if (emptySelection === true) {
        properties.nodes = [];
        properties.edges = [];
      } else {
        var tmp = this.getSelection();
        properties.nodes = tmp.nodes;
        properties.edges = tmp.edges;
      }
      if (oldSelection !== void 0) {
        properties["previousSelection"] = oldSelection;
      }
      if (eventType == "click") {
        properties.items = this.getClickedItems(pointer);
      }
      if (event.controlEdge !== void 0) {
        properties.controlEdge = event.controlEdge;
      }
      this.body.emitter.emit(eventType, properties);
    }
  }, {
    key: "selectObject",
    value: function selectObject(obj) {
      var highlightEdges = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.options.selectConnectedEdges;
      if (obj !== void 0) {
        if (obj instanceof Node) {
          if (highlightEdges === true) {
            var _this$_selectionAccum;
            (_this$_selectionAccum = this._selectionAccumulator).addEdges.apply(_this$_selectionAccum, _toConsumableArray2(obj.edges));
          }
          this._selectionAccumulator.addNodes(obj);
        } else {
          this._selectionAccumulator.addEdges(obj);
        }
        return true;
      }
      return false;
    }
  }, {
    key: "deselectObject",
    value: function deselectObject(obj) {
      if (obj.isSelected() === true) {
        obj.selected = false;
        this._removeFromSelection(obj);
      }
    }
  }, {
    key: "_getAllNodesOverlappingWith",
    value: function _getAllNodesOverlappingWith(object2) {
      var overlappingNodes = [];
      var nodes = this.body.nodes;
      for (var i = 0; i < this.body.nodeIndices.length; i++) {
        var nodeId = this.body.nodeIndices[i];
        if (nodes[nodeId].isOverlappingWith(object2)) {
          overlappingNodes.push(nodeId);
        }
      }
      return overlappingNodes;
    }
  }, {
    key: "_pointerToPositionObject",
    value: function _pointerToPositionObject(pointer) {
      var canvasPos = this.canvas.DOMtoCanvas(pointer);
      return {
        left: canvasPos.x - 1,
        top: canvasPos.y + 1,
        right: canvasPos.x + 1,
        bottom: canvasPos.y - 1
      };
    }
  }, {
    key: "getNodeAt",
    value: function getNodeAt(pointer) {
      var returnNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var positionObject = this._pointerToPositionObject(pointer);
      var overlappingNodes = this._getAllNodesOverlappingWith(positionObject);
      if (overlappingNodes.length > 0) {
        if (returnNode === true) {
          return this.body.nodes[overlappingNodes[overlappingNodes.length - 1]];
        } else {
          return overlappingNodes[overlappingNodes.length - 1];
        }
      } else {
        return void 0;
      }
    }
  }, {
    key: "_getEdgesOverlappingWith",
    value: function _getEdgesOverlappingWith(object2, overlappingEdges) {
      var edges = this.body.edges;
      for (var i = 0; i < this.body.edgeIndices.length; i++) {
        var edgeId = this.body.edgeIndices[i];
        if (edges[edgeId].isOverlappingWith(object2)) {
          overlappingEdges.push(edgeId);
        }
      }
    }
  }, {
    key: "_getAllEdgesOverlappingWith",
    value: function _getAllEdgesOverlappingWith(object2) {
      var overlappingEdges = [];
      this._getEdgesOverlappingWith(object2, overlappingEdges);
      return overlappingEdges;
    }
  }, {
    key: "getEdgeAt",
    value: function getEdgeAt(pointer) {
      var returnEdge = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var canvasPos = this.canvas.DOMtoCanvas(pointer);
      var mindist = 10;
      var overlappingEdge = null;
      var edges = this.body.edges;
      for (var i = 0; i < this.body.edgeIndices.length; i++) {
        var edgeId = this.body.edgeIndices[i];
        var edge = edges[edgeId];
        if (edge.connected) {
          var xFrom = edge.from.x;
          var yFrom = edge.from.y;
          var xTo = edge.to.x;
          var yTo = edge.to.y;
          var dist = edge.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, canvasPos.x, canvasPos.y);
          if (dist < mindist) {
            overlappingEdge = edgeId;
            mindist = dist;
          }
        }
      }
      if (overlappingEdge !== null) {
        if (returnEdge === true) {
          return this.body.edges[overlappingEdge];
        } else {
          return overlappingEdge;
        }
      } else {
        return void 0;
      }
    }
  }, {
    key: "_addToHover",
    value: function _addToHover(obj) {
      if (obj instanceof Node) {
        this.hoverObj.nodes[obj.id] = obj;
      } else {
        this.hoverObj.edges[obj.id] = obj;
      }
    }
  }, {
    key: "_removeFromSelection",
    value: function _removeFromSelection(obj) {
      if (obj instanceof Node) {
        var _this$_selectionAccum2;
        this._selectionAccumulator.deleteNodes(obj);
        (_this$_selectionAccum2 = this._selectionAccumulator).deleteEdges.apply(_this$_selectionAccum2, _toConsumableArray2(obj.edges));
      } else {
        this._selectionAccumulator.deleteEdges(obj);
      }
    }
  }, {
    key: "unselectAll",
    value: function unselectAll() {
      this._selectionAccumulator.clear();
    }
  }, {
    key: "getSelectedNodeCount",
    value: function getSelectedNodeCount() {
      return this._selectionAccumulator.sizeNodes;
    }
  }, {
    key: "getSelectedEdgeCount",
    value: function getSelectedEdgeCount() {
      return this._selectionAccumulator.sizeEdges;
    }
  }, {
    key: "_hoverConnectedEdges",
    value: function _hoverConnectedEdges(node) {
      for (var i = 0; i < node.edges.length; i++) {
        var edge = node.edges[i];
        edge.hover = true;
        this._addToHover(edge);
      }
    }
  }, {
    key: "emitBlurEvent",
    value: function emitBlurEvent(event, pointer, object2) {
      var properties = this._initBaseEvent(event, pointer);
      if (object2.hover === true) {
        object2.hover = false;
        if (object2 instanceof Node) {
          properties.node = object2.id;
          this.body.emitter.emit("blurNode", properties);
        } else {
          properties.edge = object2.id;
          this.body.emitter.emit("blurEdge", properties);
        }
      }
    }
  }, {
    key: "emitHoverEvent",
    value: function emitHoverEvent(event, pointer, object2) {
      var properties = this._initBaseEvent(event, pointer);
      var hoverChanged = false;
      if (object2.hover === false) {
        object2.hover = true;
        this._addToHover(object2);
        hoverChanged = true;
        if (object2 instanceof Node) {
          properties.node = object2.id;
          this.body.emitter.emit("hoverNode", properties);
        } else {
          properties.edge = object2.id;
          this.body.emitter.emit("hoverEdge", properties);
        }
      }
      return hoverChanged;
    }
  }, {
    key: "hoverObject",
    value: function hoverObject(event, pointer) {
      var object2 = this.getNodeAt(pointer);
      if (object2 === void 0) {
        object2 = this.getEdgeAt(pointer);
      }
      var hoverChanged = false;
      for (var nodeId in this.hoverObj.nodes) {
        if (Object.prototype.hasOwnProperty.call(this.hoverObj.nodes, nodeId)) {
          if (object2 === void 0 || object2 instanceof Node && object2.id != nodeId || object2 instanceof Edge) {
            this.emitBlurEvent(event, pointer, this.hoverObj.nodes[nodeId]);
            delete this.hoverObj.nodes[nodeId];
            hoverChanged = true;
          }
        }
      }
      for (var edgeId in this.hoverObj.edges) {
        if (Object.prototype.hasOwnProperty.call(this.hoverObj.edges, edgeId)) {
          if (hoverChanged === true) {
            this.hoverObj.edges[edgeId].hover = false;
            delete this.hoverObj.edges[edgeId];
          } else if (object2 === void 0 || object2 instanceof Edge && object2.id != edgeId || object2 instanceof Node && !object2.hover) {
            this.emitBlurEvent(event, pointer, this.hoverObj.edges[edgeId]);
            delete this.hoverObj.edges[edgeId];
            hoverChanged = true;
          }
        }
      }
      if (object2 !== void 0) {
        var hoveredEdgesCount = keys6(this.hoverObj.edges).length;
        var hoveredNodesCount = keys6(this.hoverObj.nodes).length;
        var newOnlyHoveredEdge = object2 instanceof Edge && hoveredEdgesCount === 0 && hoveredNodesCount === 0;
        var newOnlyHoveredNode = object2 instanceof Node && hoveredEdgesCount === 0 && hoveredNodesCount === 0;
        if (hoverChanged || newOnlyHoveredEdge || newOnlyHoveredNode) {
          hoverChanged = this.emitHoverEvent(event, pointer, object2);
        }
        if (object2 instanceof Node && this.options.hoverConnectedEdges === true) {
          this._hoverConnectedEdges(object2);
        }
      }
      if (hoverChanged === true) {
        this.body.emitter.emit("_requestRedraw");
      }
    }
  }, {
    key: "commitWithoutEmitting",
    value: function commitWithoutEmitting() {
      this._selectionAccumulator.commit();
    }
  }, {
    key: "commitAndEmit",
    value: function commitAndEmit(pointer, event) {
      var selected = false;
      var selectionChanges = this._selectionAccumulator.commit();
      var previousSelection = {
        nodes: selectionChanges.nodes.previous,
        edges: selectionChanges.edges.previous
      };
      if (selectionChanges.edges.deleted.length > 0) {
        this.generateClickEvent("deselectEdge", event, pointer, previousSelection);
        selected = true;
      }
      if (selectionChanges.nodes.deleted.length > 0) {
        this.generateClickEvent("deselectNode", event, pointer, previousSelection);
        selected = true;
      }
      if (selectionChanges.nodes.added.length > 0) {
        this.generateClickEvent("selectNode", event, pointer);
        selected = true;
      }
      if (selectionChanges.edges.added.length > 0) {
        this.generateClickEvent("selectEdge", event, pointer);
        selected = true;
      }
      if (selected === true) {
        this.generateClickEvent("select", event, pointer);
      }
    }
  }, {
    key: "getSelection",
    value: function getSelection() {
      return {
        nodes: this.getSelectedNodeIds(),
        edges: this.getSelectedEdgeIds()
      };
    }
  }, {
    key: "getSelectedNodes",
    value: function getSelectedNodes() {
      return this._selectionAccumulator.getNodes();
    }
  }, {
    key: "getSelectedEdges",
    value: function getSelectedEdges() {
      return this._selectionAccumulator.getEdges();
    }
  }, {
    key: "getSelectedNodeIds",
    value: function getSelectedNodeIds() {
      var _context;
      return map$32(_context = this._selectionAccumulator.getNodes()).call(_context, function(node) {
        return node.id;
      });
    }
  }, {
    key: "getSelectedEdgeIds",
    value: function getSelectedEdgeIds() {
      var _context2;
      return map$32(_context2 = this._selectionAccumulator.getEdges()).call(_context2, function(edge) {
        return edge.id;
      });
    }
  }, {
    key: "setSelection",
    value: function setSelection(selection) {
      var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (!selection || !selection.nodes && !selection.edges) {
        throw new TypeError("Selection must be an object with nodes and/or edges properties");
      }
      if (options2.unselectAll || options2.unselectAll === void 0) {
        this.unselectAll();
      }
      if (selection.nodes) {
        var _iterator = _createForOfIteratorHelper$22(selection.nodes), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var id3 = _step.value;
            var node = this.body.nodes[id3];
            if (!node) {
              throw new RangeError('Node with id "' + id3 + '" not found');
            }
            this.selectObject(node, options2.highlightEdges);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      if (selection.edges) {
        var _iterator2 = _createForOfIteratorHelper$22(selection.edges), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _id = _step2.value;
            var edge = this.body.edges[_id];
            if (!edge) {
              throw new RangeError('Edge with id "' + _id + '" not found');
            }
            this.selectObject(edge);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      this.body.emitter.emit("_requestRedraw");
      this._selectionAccumulator.commit();
    }
  }, {
    key: "selectNodes",
    value: function selectNodes(selection) {
      var highlightEdges = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (!selection || selection.length === void 0)
        throw "Selection must be an array with ids";
      this.setSelection({
        nodes: selection
      }, {
        highlightEdges
      });
    }
  }, {
    key: "selectEdges",
    value: function selectEdges(selection) {
      if (!selection || selection.length === void 0)
        throw "Selection must be an array with ids";
      this.setSelection({
        edges: selection
      });
    }
  }, {
    key: "updateSelection",
    value: function updateSelection() {
      for (var node in this._selectionAccumulator.getNodes()) {
        if (!Object.prototype.hasOwnProperty.call(this.body.nodes, node.id)) {
          this._selectionAccumulator.deleteNodes(node);
        }
      }
      for (var edge in this._selectionAccumulator.getEdges()) {
        if (!Object.prototype.hasOwnProperty.call(this.body.edges, edge.id)) {
          this._selectionAccumulator.deleteEdges(edge);
        }
      }
    }
  }, {
    key: "getClickedItems",
    value: function getClickedItems(pointer) {
      var point = this.canvas.DOMtoCanvas(pointer);
      var items = [];
      var nodeIndices = this.body.nodeIndices;
      var nodes = this.body.nodes;
      for (var i = nodeIndices.length - 1; i >= 0; i--) {
        var node = nodes[nodeIndices[i]];
        var ret = node.getItemsOnPoint(point);
        items.push.apply(items, ret);
      }
      var edgeIndices = this.body.edgeIndices;
      var edges = this.body.edges;
      for (var _i = edgeIndices.length - 1; _i >= 0; _i--) {
        var edge = edges[edgeIndices[_i]];
        var _ret = edge.getItemsOnPoint(point);
        items.push.apply(items, _ret);
      }
      return items;
    }
  }]);
  return SelectionHandler2;
}();
var arraySlice2 = arraySliceSimple2;
var floor2 = Math.floor;
var mergeSort2 = function(array2, comparefn) {
  var length2 = array2.length;
  var middle = floor2(length2 / 2);
  return length2 < 8 ? insertionSort2(array2, comparefn) : merge2(array2, mergeSort2(arraySlice2(array2, 0, middle), comparefn), mergeSort2(arraySlice2(array2, middle), comparefn), comparefn);
};
var insertionSort2 = function(array2, comparefn) {
  var length2 = array2.length;
  var i = 1;
  var element, j;
  while (i < length2) {
    j = i;
    element = array2[i];
    while (j && comparefn(array2[j - 1], element) > 0) {
      array2[j] = array2[--j];
    }
    if (j !== i++)
      array2[j] = element;
  }
  return array2;
};
var merge2 = function(array2, left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;
  while (lindex < llength || rindex < rlength) {
    array2[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
  }
  return array2;
};
var arraySort2 = mergeSort2;
var userAgent$12 = engineUserAgent2;
var firefox2 = userAgent$12.match(/firefox\/(\d+)/i);
var engineFfVersion2 = !!firefox2 && +firefox2[1];
var UA2 = engineUserAgent2;
var engineIsIeOrEdge2 = /MSIE|Trident/.test(UA2);
var userAgent2 = engineUserAgent2;
var webkit2 = userAgent2.match(/AppleWebKit\/(\d+)\./);
var engineWebkitVersion2 = !!webkit2 && +webkit2[1];
var $$22 = _export2;
var uncurryThis2 = functionUncurryThis2;
var aCallable$12 = aCallable$62;
var toObject$12 = toObject$d2;
var lengthOfArrayLike$12 = lengthOfArrayLike$b2;
var toString4 = toString$82;
var fails2 = fails$t;
var internalSort2 = arraySort2;
var arrayMethodIsStrict$22 = arrayMethodIsStrict$6;
var FF2 = engineFfVersion2;
var IE_OR_EDGE2 = engineIsIeOrEdge2;
var V82 = engineV8Version2;
var WEBKIT2 = engineWebkitVersion2;
var test2 = [];
var un$Sort2 = uncurryThis2(test2.sort);
var push2 = uncurryThis2(test2.push);
var FAILS_ON_UNDEFINED2 = fails2(function() {
  test2.sort(void 0);
});
var FAILS_ON_NULL2 = fails2(function() {
  test2.sort(null);
});
var STRICT_METHOD$22 = arrayMethodIsStrict$22("sort");
var STABLE_SORT2 = !fails2(function() {
  if (V82)
    return V82 < 70;
  if (FF2 && FF2 > 3)
    return;
  if (IE_OR_EDGE2)
    return true;
  if (WEBKIT2)
    return WEBKIT2 < 603;
  var result = "";
  var code, chr, value, index2;
  for (code = 65; code < 76; code++) {
    chr = String.fromCharCode(code);
    switch (code) {
      case 66:
      case 69:
      case 70:
      case 72:
        value = 3;
        break;
      case 68:
      case 71:
        value = 4;
        break;
      default:
        value = 2;
    }
    for (index2 = 0; index2 < 47; index2++) {
      test2.push({
        k: chr + index2,
        v: value
      });
    }
  }
  test2.sort(function(a, b) {
    return b.v - a.v;
  });
  for (index2 = 0; index2 < test2.length; index2++) {
    chr = test2[index2].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr)
      result += chr;
  }
  return result !== "DGBEFHACIJK";
});
var FORCED2 = FAILS_ON_UNDEFINED2 || !FAILS_ON_NULL2 || !STRICT_METHOD$22 || !STABLE_SORT2;
var getSortCompare2 = function(comparefn) {
  return function(x, y) {
    if (y === void 0)
      return -1;
    if (x === void 0)
      return 1;
    if (comparefn !== void 0)
      return +comparefn(x, y) || 0;
    return toString4(x) > toString4(y) ? 1 : -1;
  };
};
$$22({
  target: "Array",
  proto: true,
  forced: FORCED2
}, {
  sort: function sort3(comparefn) {
    if (comparefn !== void 0)
      aCallable$12(comparefn);
    var array2 = toObject$12(this);
    if (STABLE_SORT2)
      return comparefn === void 0 ? un$Sort2(array2) : un$Sort2(array2, comparefn);
    var items = [];
    var arrayLength = lengthOfArrayLike$12(array2);
    var itemsLength, index2;
    for (index2 = 0; index2 < arrayLength; index2++) {
      if (index2 in array2)
        push2(items, array2[index2]);
    }
    internalSort2(items, getSortCompare2(comparefn));
    itemsLength = items.length;
    index2 = 0;
    while (index2 < itemsLength)
      array2[index2] = items[index2++];
    while (index2 < arrayLength)
      delete array2[index2++];
    return array2;
  }
});
var entryVirtual$22 = entryVirtual$i2;
var sort$32 = entryVirtual$22("Array").sort;
var isPrototypeOf$22 = objectIsPrototypeOf2;
var method$22 = sort$32;
var ArrayPrototype$22 = Array.prototype;
var sort$22 = function(it2) {
  var own = it2.sort;
  return it2 === ArrayPrototype$22 || isPrototypeOf$22(ArrayPrototype$22, it2) && own === ArrayPrototype$22.sort ? method$22 : own;
};
var parent$22 = sort$22;
var sort$12 = parent$22;
var sort4 = sort$12;
var global$22 = global$O;
var aCallable2 = aCallable$62;
var toObject2 = toObject$d2;
var IndexedObject2 = indexedObject2;
var lengthOfArrayLike2 = lengthOfArrayLike$b2;
var TypeError$12 = global$22.TypeError;
var createMethod2 = function(IS_RIGHT) {
  return function(that, callbackfn, argumentsLength, memo) {
    aCallable2(callbackfn);
    var O = toObject2(that);
    var self2 = IndexedObject2(O);
    var length2 = lengthOfArrayLike2(O);
    var index2 = IS_RIGHT ? length2 - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2)
      while (true) {
        if (index2 in self2) {
          memo = self2[index2];
          index2 += i;
          break;
        }
        index2 += i;
        if (IS_RIGHT ? index2 < 0 : length2 <= index2) {
          throw TypeError$12("Reduce of empty array with no initial value");
        }
      }
    for (; IS_RIGHT ? index2 >= 0 : length2 > index2; index2 += i)
      if (index2 in self2) {
        memo = callbackfn(memo, self2[index2], index2, O);
      }
    return memo;
  };
};
var arrayReduce2 = {
  left: createMethod2(false),
  right: createMethod2(true)
};
var classof2 = classofRaw$12;
var global$12 = global$O;
var engineIsNode2 = classof2(global$12.process) == "process";
var $$12 = _export2;
var $reduce2 = arrayReduce2.left;
var arrayMethodIsStrict$12 = arrayMethodIsStrict$6;
var CHROME_VERSION2 = engineV8Version2;
var IS_NODE2 = engineIsNode2;
var STRICT_METHOD$12 = arrayMethodIsStrict$12("reduce");
var CHROME_BUG2 = !IS_NODE2 && CHROME_VERSION2 > 79 && CHROME_VERSION2 < 83;
$$12({
  target: "Array",
  proto: true,
  forced: !STRICT_METHOD$12 || CHROME_BUG2
}, {
  reduce: function reduce3(callbackfn) {
    var length2 = arguments.length;
    return $reduce2(this, callbackfn, length2, length2 > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual$12 = entryVirtual$i2;
var reduce$32 = entryVirtual$12("Array").reduce;
var isPrototypeOf$12 = objectIsPrototypeOf2;
var method$12 = reduce$32;
var ArrayPrototype$12 = Array.prototype;
var reduce$22 = function(it2) {
  var own = it2.reduce;
  return it2 === ArrayPrototype$12 || isPrototypeOf$12(ArrayPrototype$12, it2) && own === ArrayPrototype$12.reduce ? method$12 : own;
};
var parent$14 = reduce$22;
var reduce$12 = parent$14;
var reduce4 = reduce$12;
var timsort$1 = {};
(function(exports) {
  (function(global2, factory) {
    {
      factory(exports);
    }
  })(commonjsGlobal2, function(exports2) {
    exports2.__esModule = true;
    exports2.sort = sort5;
    function _classCallCheck3(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var DEFAULT_MIN_MERGE = 32;
    var DEFAULT_MIN_GALLOPING = 7;
    var DEFAULT_TMP_STORAGE_LENGTH = 256;
    var POWERS_OF_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9];
    function log10(x) {
      if (x < 1e5) {
        if (x < 100) {
          return x < 10 ? 0 : 1;
        }
        if (x < 1e4) {
          return x < 1e3 ? 2 : 3;
        }
        return 4;
      }
      if (x < 1e7) {
        return x < 1e6 ? 5 : 6;
      }
      if (x < 1e9) {
        return x < 1e8 ? 7 : 8;
      }
      return 9;
    }
    function alphabeticalCompare(a, b) {
      if (a === b) {
        return 0;
      }
      if (~~a === a && ~~b === b) {
        if (a === 0 || b === 0) {
          return a < b ? -1 : 1;
        }
        if (a < 0 || b < 0) {
          if (b >= 0) {
            return -1;
          }
          if (a >= 0) {
            return 1;
          }
          a = -a;
          b = -b;
        }
        var al = log10(a);
        var bl = log10(b);
        var t = 0;
        if (al < bl) {
          a *= POWERS_OF_TEN[bl - al - 1];
          b /= 10;
          t = -1;
        } else if (al > bl) {
          b *= POWERS_OF_TEN[al - bl - 1];
          a /= 10;
          t = 1;
        }
        if (a === b) {
          return t;
        }
        return a < b ? -1 : 1;
      }
      var aStr = String(a);
      var bStr = String(b);
      if (aStr === bStr) {
        return 0;
      }
      return aStr < bStr ? -1 : 1;
    }
    function minRunLength(n) {
      var r = 0;
      while (n >= DEFAULT_MIN_MERGE) {
        r |= n & 1;
        n >>= 1;
      }
      return n + r;
    }
    function makeAscendingRun(array2, lo, hi3, compare) {
      var runHi = lo + 1;
      if (runHi === hi3) {
        return 1;
      }
      if (compare(array2[runHi++], array2[lo]) < 0) {
        while (runHi < hi3 && compare(array2[runHi], array2[runHi - 1]) < 0) {
          runHi++;
        }
        reverseRun(array2, lo, runHi);
      } else {
        while (runHi < hi3 && compare(array2[runHi], array2[runHi - 1]) >= 0) {
          runHi++;
        }
      }
      return runHi - lo;
    }
    function reverseRun(array2, lo, hi3) {
      hi3--;
      while (lo < hi3) {
        var t = array2[lo];
        array2[lo++] = array2[hi3];
        array2[hi3--] = t;
      }
    }
    function binaryInsertionSort(array2, lo, hi3, start, compare) {
      if (start === lo) {
        start++;
      }
      for (; start < hi3; start++) {
        var pivot = array2[start];
        var left = lo;
        var right = start;
        while (left < right) {
          var mid = left + right >>> 1;
          if (compare(pivot, array2[mid]) < 0) {
            right = mid;
          } else {
            left = mid + 1;
          }
        }
        var n = start - left;
        switch (n) {
          case 3:
            array2[left + 3] = array2[left + 2];
          case 2:
            array2[left + 2] = array2[left + 1];
          case 1:
            array2[left + 1] = array2[left];
            break;
          default:
            while (n > 0) {
              array2[left + n] = array2[left + n - 1];
              n--;
            }
        }
        array2[left] = pivot;
      }
    }
    function gallopLeft(value, array2, start, length2, hint, compare) {
      var lastOffset = 0;
      var maxOffset = 0;
      var offset = 1;
      if (compare(value, array2[start + hint]) > 0) {
        maxOffset = length2 - hint;
        while (offset < maxOffset && compare(value, array2[start + hint + offset]) > 0) {
          lastOffset = offset;
          offset = (offset << 1) + 1;
          if (offset <= 0) {
            offset = maxOffset;
          }
        }
        if (offset > maxOffset) {
          offset = maxOffset;
        }
        lastOffset += hint;
        offset += hint;
      } else {
        maxOffset = hint + 1;
        while (offset < maxOffset && compare(value, array2[start + hint - offset]) <= 0) {
          lastOffset = offset;
          offset = (offset << 1) + 1;
          if (offset <= 0) {
            offset = maxOffset;
          }
        }
        if (offset > maxOffset) {
          offset = maxOffset;
        }
        var tmp = lastOffset;
        lastOffset = hint - offset;
        offset = hint - tmp;
      }
      lastOffset++;
      while (lastOffset < offset) {
        var m = lastOffset + (offset - lastOffset >>> 1);
        if (compare(value, array2[start + m]) > 0) {
          lastOffset = m + 1;
        } else {
          offset = m;
        }
      }
      return offset;
    }
    function gallopRight(value, array2, start, length2, hint, compare) {
      var lastOffset = 0;
      var maxOffset = 0;
      var offset = 1;
      if (compare(value, array2[start + hint]) < 0) {
        maxOffset = hint + 1;
        while (offset < maxOffset && compare(value, array2[start + hint - offset]) < 0) {
          lastOffset = offset;
          offset = (offset << 1) + 1;
          if (offset <= 0) {
            offset = maxOffset;
          }
        }
        if (offset > maxOffset) {
          offset = maxOffset;
        }
        var tmp = lastOffset;
        lastOffset = hint - offset;
        offset = hint - tmp;
      } else {
        maxOffset = length2 - hint;
        while (offset < maxOffset && compare(value, array2[start + hint + offset]) >= 0) {
          lastOffset = offset;
          offset = (offset << 1) + 1;
          if (offset <= 0) {
            offset = maxOffset;
          }
        }
        if (offset > maxOffset) {
          offset = maxOffset;
        }
        lastOffset += hint;
        offset += hint;
      }
      lastOffset++;
      while (lastOffset < offset) {
        var m = lastOffset + (offset - lastOffset >>> 1);
        if (compare(value, array2[start + m]) < 0) {
          offset = m;
        } else {
          lastOffset = m + 1;
        }
      }
      return offset;
    }
    var TimSort = function() {
      function TimSort2(array2, compare) {
        _classCallCheck3(this, TimSort2);
        this.array = null;
        this.compare = null;
        this.minGallop = DEFAULT_MIN_GALLOPING;
        this.length = 0;
        this.tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
        this.stackLength = 0;
        this.runStart = null;
        this.runLength = null;
        this.stackSize = 0;
        this.array = array2;
        this.compare = compare;
        this.length = array2.length;
        if (this.length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
          this.tmpStorageLength = this.length >>> 1;
        }
        this.tmp = new Array(this.tmpStorageLength);
        this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;
        this.runStart = new Array(this.stackLength);
        this.runLength = new Array(this.stackLength);
      }
      TimSort2.prototype.pushRun = function pushRun(runStart, runLength) {
        this.runStart[this.stackSize] = runStart;
        this.runLength[this.stackSize] = runLength;
        this.stackSize += 1;
      };
      TimSort2.prototype.mergeRuns = function mergeRuns() {
        while (this.stackSize > 1) {
          var n = this.stackSize - 2;
          if (n >= 1 && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1] || n >= 2 && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]) {
            if (this.runLength[n - 1] < this.runLength[n + 1]) {
              n--;
            }
          } else if (this.runLength[n] > this.runLength[n + 1]) {
            break;
          }
          this.mergeAt(n);
        }
      };
      TimSort2.prototype.forceMergeRuns = function forceMergeRuns() {
        while (this.stackSize > 1) {
          var n = this.stackSize - 2;
          if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {
            n--;
          }
          this.mergeAt(n);
        }
      };
      TimSort2.prototype.mergeAt = function mergeAt(i) {
        var compare = this.compare;
        var array2 = this.array;
        var start1 = this.runStart[i];
        var length1 = this.runLength[i];
        var start2 = this.runStart[i + 1];
        var length2 = this.runLength[i + 1];
        this.runLength[i] = length1 + length2;
        if (i === this.stackSize - 3) {
          this.runStart[i + 1] = this.runStart[i + 2];
          this.runLength[i + 1] = this.runLength[i + 2];
        }
        this.stackSize--;
        var k = gallopRight(array2[start2], array2, start1, length1, 0, compare);
        start1 += k;
        length1 -= k;
        if (length1 === 0) {
          return;
        }
        length2 = gallopLeft(array2[start1 + length1 - 1], array2, start2, length2, length2 - 1, compare);
        if (length2 === 0) {
          return;
        }
        if (length1 <= length2) {
          this.mergeLow(start1, length1, start2, length2);
        } else {
          this.mergeHigh(start1, length1, start2, length2);
        }
      };
      TimSort2.prototype.mergeLow = function mergeLow(start1, length1, start2, length2) {
        var compare = this.compare;
        var array2 = this.array;
        var tmp = this.tmp;
        var i = 0;
        for (i = 0; i < length1; i++) {
          tmp[i] = array2[start1 + i];
        }
        var cursor1 = 0;
        var cursor2 = start2;
        var dest = start1;
        array2[dest++] = array2[cursor2++];
        if (--length2 === 0) {
          for (i = 0; i < length1; i++) {
            array2[dest + i] = tmp[cursor1 + i];
          }
          return;
        }
        if (length1 === 1) {
          for (i = 0; i < length2; i++) {
            array2[dest + i] = array2[cursor2 + i];
          }
          array2[dest + length2] = tmp[cursor1];
          return;
        }
        var minGallop = this.minGallop;
        while (true) {
          var count1 = 0;
          var count2 = 0;
          var exit = false;
          do {
            if (compare(array2[cursor2], tmp[cursor1]) < 0) {
              array2[dest++] = array2[cursor2++];
              count2++;
              count1 = 0;
              if (--length2 === 0) {
                exit = true;
                break;
              }
            } else {
              array2[dest++] = tmp[cursor1++];
              count1++;
              count2 = 0;
              if (--length1 === 1) {
                exit = true;
                break;
              }
            }
          } while ((count1 | count2) < minGallop);
          if (exit) {
            break;
          }
          do {
            count1 = gallopRight(array2[cursor2], tmp, cursor1, length1, 0, compare);
            if (count1 !== 0) {
              for (i = 0; i < count1; i++) {
                array2[dest + i] = tmp[cursor1 + i];
              }
              dest += count1;
              cursor1 += count1;
              length1 -= count1;
              if (length1 <= 1) {
                exit = true;
                break;
              }
            }
            array2[dest++] = array2[cursor2++];
            if (--length2 === 0) {
              exit = true;
              break;
            }
            count2 = gallopLeft(tmp[cursor1], array2, cursor2, length2, 0, compare);
            if (count2 !== 0) {
              for (i = 0; i < count2; i++) {
                array2[dest + i] = array2[cursor2 + i];
              }
              dest += count2;
              cursor2 += count2;
              length2 -= count2;
              if (length2 === 0) {
                exit = true;
                break;
              }
            }
            array2[dest++] = tmp[cursor1++];
            if (--length1 === 1) {
              exit = true;
              break;
            }
            minGallop--;
          } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
          if (exit) {
            break;
          }
          if (minGallop < 0) {
            minGallop = 0;
          }
          minGallop += 2;
        }
        this.minGallop = minGallop;
        if (minGallop < 1) {
          this.minGallop = 1;
        }
        if (length1 === 1) {
          for (i = 0; i < length2; i++) {
            array2[dest + i] = array2[cursor2 + i];
          }
          array2[dest + length2] = tmp[cursor1];
        } else if (length1 === 0) {
          throw new Error("mergeLow preconditions were not respected");
        } else {
          for (i = 0; i < length1; i++) {
            array2[dest + i] = tmp[cursor1 + i];
          }
        }
      };
      TimSort2.prototype.mergeHigh = function mergeHigh(start1, length1, start2, length2) {
        var compare = this.compare;
        var array2 = this.array;
        var tmp = this.tmp;
        var i = 0;
        for (i = 0; i < length2; i++) {
          tmp[i] = array2[start2 + i];
        }
        var cursor1 = start1 + length1 - 1;
        var cursor2 = length2 - 1;
        var dest = start2 + length2 - 1;
        var customCursor = 0;
        var customDest = 0;
        array2[dest--] = array2[cursor1--];
        if (--length1 === 0) {
          customCursor = dest - (length2 - 1);
          for (i = 0; i < length2; i++) {
            array2[customCursor + i] = tmp[i];
          }
          return;
        }
        if (length2 === 1) {
          dest -= length1;
          cursor1 -= length1;
          customDest = dest + 1;
          customCursor = cursor1 + 1;
          for (i = length1 - 1; i >= 0; i--) {
            array2[customDest + i] = array2[customCursor + i];
          }
          array2[dest] = tmp[cursor2];
          return;
        }
        var minGallop = this.minGallop;
        while (true) {
          var count1 = 0;
          var count2 = 0;
          var exit = false;
          do {
            if (compare(tmp[cursor2], array2[cursor1]) < 0) {
              array2[dest--] = array2[cursor1--];
              count1++;
              count2 = 0;
              if (--length1 === 0) {
                exit = true;
                break;
              }
            } else {
              array2[dest--] = tmp[cursor2--];
              count2++;
              count1 = 0;
              if (--length2 === 1) {
                exit = true;
                break;
              }
            }
          } while ((count1 | count2) < minGallop);
          if (exit) {
            break;
          }
          do {
            count1 = length1 - gallopRight(tmp[cursor2], array2, start1, length1, length1 - 1, compare);
            if (count1 !== 0) {
              dest -= count1;
              cursor1 -= count1;
              length1 -= count1;
              customDest = dest + 1;
              customCursor = cursor1 + 1;
              for (i = count1 - 1; i >= 0; i--) {
                array2[customDest + i] = array2[customCursor + i];
              }
              if (length1 === 0) {
                exit = true;
                break;
              }
            }
            array2[dest--] = tmp[cursor2--];
            if (--length2 === 1) {
              exit = true;
              break;
            }
            count2 = length2 - gallopLeft(array2[cursor1], tmp, 0, length2, length2 - 1, compare);
            if (count2 !== 0) {
              dest -= count2;
              cursor2 -= count2;
              length2 -= count2;
              customDest = dest + 1;
              customCursor = cursor2 + 1;
              for (i = 0; i < count2; i++) {
                array2[customDest + i] = tmp[customCursor + i];
              }
              if (length2 <= 1) {
                exit = true;
                break;
              }
            }
            array2[dest--] = array2[cursor1--];
            if (--length1 === 0) {
              exit = true;
              break;
            }
            minGallop--;
          } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
          if (exit) {
            break;
          }
          if (minGallop < 0) {
            minGallop = 0;
          }
          minGallop += 2;
        }
        this.minGallop = minGallop;
        if (minGallop < 1) {
          this.minGallop = 1;
        }
        if (length2 === 1) {
          dest -= length1;
          cursor1 -= length1;
          customDest = dest + 1;
          customCursor = cursor1 + 1;
          for (i = length1 - 1; i >= 0; i--) {
            array2[customDest + i] = array2[customCursor + i];
          }
          array2[dest] = tmp[cursor2];
        } else if (length2 === 0) {
          throw new Error("mergeHigh preconditions were not respected");
        } else {
          customCursor = dest - (length2 - 1);
          for (i = 0; i < length2; i++) {
            array2[customCursor + i] = tmp[i];
          }
        }
      };
      return TimSort2;
    }();
    function sort5(array2, compare, lo, hi3) {
      if (!Array.isArray(array2)) {
        throw new TypeError("Can only sort arrays");
      }
      if (!compare) {
        compare = alphabeticalCompare;
      } else if (typeof compare !== "function") {
        hi3 = lo;
        lo = compare;
        compare = alphabeticalCompare;
      }
      if (!lo) {
        lo = 0;
      }
      if (!hi3) {
        hi3 = array2.length;
      }
      var remaining = hi3 - lo;
      if (remaining < 2) {
        return;
      }
      var runLength = 0;
      if (remaining < DEFAULT_MIN_MERGE) {
        runLength = makeAscendingRun(array2, lo, hi3, compare);
        binaryInsertionSort(array2, lo, hi3, lo + runLength, compare);
        return;
      }
      var ts = new TimSort(array2, compare);
      var minRun = minRunLength(remaining);
      do {
        runLength = makeAscendingRun(array2, lo, hi3, compare);
        if (runLength < minRun) {
          var force = remaining;
          if (force > minRun) {
            force = minRun;
          }
          binaryInsertionSort(array2, lo, lo + force, lo + runLength, compare);
          runLength = force;
        }
        ts.pushRun(lo, runLength);
        ts.mergeRuns();
        remaining -= runLength;
        lo += runLength;
      } while (remaining !== 0);
      ts.forceMergeRuns();
    }
  });
})(timsort$1);
var timsort = timsort$1;
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = construct4(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !construct4)
    return false;
  if (construct4.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(construct4(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var DirectionInterface = function() {
  function DirectionInterface2() {
    _classCallCheck2(this, DirectionInterface2);
  }
  _createClass2(DirectionInterface2, [{
    key: "abstract",
    value: function abstract() {
      throw new Error("Can't instantiate abstract class!");
    }
  }, {
    key: "fake_use",
    value: function fake_use() {
    }
  }, {
    key: "curveType",
    value: function curveType() {
      return this.abstract();
    }
  }, {
    key: "getPosition",
    value: function getPosition(node) {
      this.fake_use(node);
      return this.abstract();
    }
  }, {
    key: "setPosition",
    value: function setPosition(node, position) {
      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
      this.fake_use(node, position, level);
      this.abstract();
    }
  }, {
    key: "getTreeSize",
    value: function getTreeSize(index2) {
      this.fake_use(index2);
      return this.abstract();
    }
  }, {
    key: "sort",
    value: function sort5(nodeArray) {
      this.fake_use(nodeArray);
      this.abstract();
    }
  }, {
    key: "fix",
    value: function fix3(node, level) {
      this.fake_use(node, level);
      this.abstract();
    }
  }, {
    key: "shift",
    value: function shift(nodeId, diff) {
      this.fake_use(nodeId, diff);
      this.abstract();
    }
  }]);
  return DirectionInterface2;
}();
var VerticalStrategy = function(_DirectionInterface) {
  _inherits2(VerticalStrategy2, _DirectionInterface);
  var _super = _createSuper2(VerticalStrategy2);
  function VerticalStrategy2(layout) {
    var _this;
    _classCallCheck2(this, VerticalStrategy2);
    _this = _super.call(this);
    _this.layout = layout;
    return _this;
  }
  _createClass2(VerticalStrategy2, [{
    key: "curveType",
    value: function curveType() {
      return "horizontal";
    }
  }, {
    key: "getPosition",
    value: function getPosition(node) {
      return node.x;
    }
  }, {
    key: "setPosition",
    value: function setPosition(node, position) {
      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
      if (level !== void 0) {
        this.layout.hierarchical.addToOrdering(node, level);
      }
      node.x = position;
    }
  }, {
    key: "getTreeSize",
    value: function getTreeSize(index2) {
      var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index2);
      return {
        min: res.min_x,
        max: res.max_x
      };
    }
  }, {
    key: "sort",
    value: function sort5(nodeArray) {
      timsort.sort(nodeArray, function(a, b) {
        return a.x - b.x;
      });
    }
  }, {
    key: "fix",
    value: function fix3(node, level) {
      node.y = this.layout.options.hierarchical.levelSeparation * level;
      node.options.fixed.y = true;
    }
  }, {
    key: "shift",
    value: function shift(nodeId, diff) {
      this.layout.body.nodes[nodeId].x += diff;
    }
  }]);
  return VerticalStrategy2;
}(DirectionInterface);
var HorizontalStrategy = function(_DirectionInterface2) {
  _inherits2(HorizontalStrategy2, _DirectionInterface2);
  var _super2 = _createSuper2(HorizontalStrategy2);
  function HorizontalStrategy2(layout) {
    var _this2;
    _classCallCheck2(this, HorizontalStrategy2);
    _this2 = _super2.call(this);
    _this2.layout = layout;
    return _this2;
  }
  _createClass2(HorizontalStrategy2, [{
    key: "curveType",
    value: function curveType() {
      return "vertical";
    }
  }, {
    key: "getPosition",
    value: function getPosition(node) {
      return node.y;
    }
  }, {
    key: "setPosition",
    value: function setPosition(node, position) {
      var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
      if (level !== void 0) {
        this.layout.hierarchical.addToOrdering(node, level);
      }
      node.y = position;
    }
  }, {
    key: "getTreeSize",
    value: function getTreeSize(index2) {
      var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index2);
      return {
        min: res.min_y,
        max: res.max_y
      };
    }
  }, {
    key: "sort",
    value: function sort5(nodeArray) {
      timsort.sort(nodeArray, function(a, b) {
        return a.y - b.y;
      });
    }
  }, {
    key: "fix",
    value: function fix3(node, level) {
      node.x = this.layout.options.hierarchical.levelSeparation * level;
      node.options.fixed.x = true;
    }
  }, {
    key: "shift",
    value: function shift(nodeId, diff) {
      this.layout.body.nodes[nodeId].y += diff;
    }
  }]);
  return HorizontalStrategy2;
}(DirectionInterface);
var $2 = _export2;
var $every = arrayIteration2.every;
var arrayMethodIsStrict2 = arrayMethodIsStrict$6;
var STRICT_METHOD2 = arrayMethodIsStrict2("every");
$2({
  target: "Array",
  proto: true,
  forced: !STRICT_METHOD2
}, {
  every: function every(callbackfn) {
    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var entryVirtual2 = entryVirtual$i2;
var every$3 = entryVirtual2("Array").every;
var isPrototypeOf2 = objectIsPrototypeOf2;
var method2 = every$3;
var ArrayPrototype2 = Array.prototype;
var every$2 = function(it2) {
  var own = it2.every;
  return it2 === ArrayPrototype2 || isPrototypeOf2(ArrayPrototype2, it2) && own === ArrayPrototype2.every ? method2 : own;
};
var parent2 = every$2;
var every$1 = parent2;
var every2 = every$1;
function _createForOfIteratorHelper$12(o, allowArrayLike) {
  var it2 = typeof symbol2 !== "undefined" && getIteratorMethod$12(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$12(o) || (it2 = _unsupportedIterableToArray$12(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray$12(o, minLen) {
  var _context9;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$12(o, minLen);
  var n = slice4(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$32(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$12(o, minLen);
}
function _arrayLikeToArray$12(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function fillLevelsByDirectionCyclic(nodes, levels) {
  var edges = new set2();
  forEach$22(nodes).call(nodes, function(node) {
    var _context;
    forEach$22(_context = node.edges).call(_context, function(edge) {
      if (edge.connected) {
        edges.add(edge);
      }
    });
  });
  forEach$22(edges).call(edges, function(edge) {
    var fromId = edge.from.id;
    var toId = edge.to.id;
    if (levels[fromId] == null) {
      levels[fromId] = 0;
    }
    if (levels[toId] == null || levels[fromId] >= levels[toId]) {
      levels[toId] = levels[fromId] + 1;
    }
  });
  return levels;
}
function fillLevelsByDirectionLeaves(nodes) {
  return fillLevelsByDirection(function(node) {
    var _context2, _context3;
    return every2(_context2 = filter4(_context3 = node.edges).call(_context3, function(edge) {
      return nodes.has(edge.toId);
    })).call(_context2, function(edge) {
      return edge.to === node;
    });
  }, function(newLevel, oldLevel) {
    return oldLevel > newLevel;
  }, "from", nodes);
}
function fillLevelsByDirectionRoots(nodes) {
  return fillLevelsByDirection(function(node) {
    var _context4, _context5;
    return every2(_context4 = filter4(_context5 = node.edges).call(_context5, function(edge) {
      return nodes.has(edge.toId);
    })).call(_context4, function(edge) {
      return edge.from === node;
    });
  }, function(newLevel, oldLevel) {
    return oldLevel < newLevel;
  }, "to", nodes);
}
function fillLevelsByDirection(isEntryNode, shouldLevelBeReplaced, direction, nodes) {
  var _context6;
  var levels = create$52(null);
  var limit = reduce4(_context6 = _toConsumableArray2(values4(nodes).call(nodes))).call(_context6, function(acc, node) {
    return acc + 1 + node.edges.length;
  }, 0);
  var edgeIdProp = direction + "Id";
  var newLevelDiff = direction === "to" ? 1 : -1;
  var _iterator = _createForOfIteratorHelper$12(nodes), _step;
  try {
    var _loop = function _loop2() {
      var _step$value = _slicedToArray2(_step.value, 2), entryNodeId = _step$value[0], entryNode = _step$value[1];
      if (!nodes.has(entryNodeId) || !isEntryNode(entryNode)) {
        return "continue";
      }
      levels[entryNodeId] = 0;
      var stack = [entryNode];
      var done = 0;
      var node = void 0;
      var _loop22 = function _loop23() {
        var _context7, _context8;
        if (!nodes.has(entryNodeId)) {
          return "continue";
        }
        var newLevel = levels[node.id] + newLevelDiff;
        forEach$22(_context7 = filter4(_context8 = node.edges).call(_context8, function(edge) {
          return edge.connected && edge.to !== edge.from && edge[direction] !== node && nodes.has(edge.toId) && nodes.has(edge.fromId);
        })).call(_context7, function(edge) {
          var targetNodeId = edge[edgeIdProp];
          var oldLevel = levels[targetNodeId];
          if (oldLevel == null || shouldLevelBeReplaced(newLevel, oldLevel)) {
            levels[targetNodeId] = newLevel;
            stack.push(edge[direction]);
          }
        });
        if (done > limit) {
          return {
            v: {
              v: fillLevelsByDirectionCyclic(nodes, levels)
            }
          };
        } else {
          ++done;
        }
      };
      while (node = stack.pop()) {
        var _ret2 = _loop22();
        if (_ret2 === "continue")
          continue;
        if (_typeof2(_ret2) === "object")
          return _ret2.v;
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if (_ret === "continue")
        continue;
      if (_typeof2(_ret) === "object")
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return levels;
}
var HierarchicalStatus = function() {
  function HierarchicalStatus2() {
    _classCallCheck2(this, HierarchicalStatus2);
    this.childrenReference = {};
    this.parentReference = {};
    this.trees = {};
    this.distributionOrdering = {};
    this.levels = {};
    this.distributionIndex = {};
    this.isTree = false;
    this.treeIndex = -1;
  }
  _createClass2(HierarchicalStatus2, [{
    key: "addRelation",
    value: function addRelation(parentNodeId, childNodeId) {
      if (this.childrenReference[parentNodeId] === void 0) {
        this.childrenReference[parentNodeId] = [];
      }
      this.childrenReference[parentNodeId].push(childNodeId);
      if (this.parentReference[childNodeId] === void 0) {
        this.parentReference[childNodeId] = [];
      }
      this.parentReference[childNodeId].push(parentNodeId);
    }
  }, {
    key: "checkIfTree",
    value: function checkIfTree() {
      for (var i in this.parentReference) {
        if (this.parentReference[i].length > 1) {
          this.isTree = false;
          return;
        }
      }
      this.isTree = true;
    }
  }, {
    key: "numTrees",
    value: function numTrees() {
      return this.treeIndex + 1;
    }
  }, {
    key: "setTreeIndex",
    value: function setTreeIndex(node, treeId) {
      if (treeId === void 0)
        return;
      if (this.trees[node.id] === void 0) {
        this.trees[node.id] = treeId;
        this.treeIndex = Math.max(treeId, this.treeIndex);
      }
    }
  }, {
    key: "ensureLevel",
    value: function ensureLevel(nodeId) {
      if (this.levels[nodeId] === void 0) {
        this.levels[nodeId] = 0;
      }
    }
  }, {
    key: "getMaxLevel",
    value: function getMaxLevel(nodeId) {
      var _this = this;
      var accumulator = {};
      var _getMaxLevel = function _getMaxLevel2(nodeId2) {
        if (accumulator[nodeId2] !== void 0) {
          return accumulator[nodeId2];
        }
        var level = _this.levels[nodeId2];
        if (_this.childrenReference[nodeId2]) {
          var children = _this.childrenReference[nodeId2];
          if (children.length > 0) {
            for (var i = 0; i < children.length; i++) {
              level = Math.max(level, _getMaxLevel2(children[i]));
            }
          }
        }
        accumulator[nodeId2] = level;
        return level;
      };
      return _getMaxLevel(nodeId);
    }
  }, {
    key: "levelDownstream",
    value: function levelDownstream(nodeA, nodeB) {
      if (this.levels[nodeB.id] === void 0) {
        if (this.levels[nodeA.id] === void 0) {
          this.levels[nodeA.id] = 0;
        }
        this.levels[nodeB.id] = this.levels[nodeA.id] + 1;
      }
    }
  }, {
    key: "setMinLevelToZero",
    value: function setMinLevelToZero(nodes) {
      var minLevel = 1e9;
      for (var nodeId in nodes) {
        if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {
          if (this.levels[nodeId] !== void 0) {
            minLevel = Math.min(this.levels[nodeId], minLevel);
          }
        }
      }
      for (var _nodeId in nodes) {
        if (Object.prototype.hasOwnProperty.call(nodes, _nodeId)) {
          if (this.levels[_nodeId] !== void 0) {
            this.levels[_nodeId] -= minLevel;
          }
        }
      }
    }
  }, {
    key: "getTreeSize",
    value: function getTreeSize(nodes, index2) {
      var min_x = 1e9;
      var max_x = -1e9;
      var min_y = 1e9;
      var max_y = -1e9;
      for (var nodeId in this.trees) {
        if (Object.prototype.hasOwnProperty.call(this.trees, nodeId)) {
          if (this.trees[nodeId] === index2) {
            var node = nodes[nodeId];
            min_x = Math.min(node.x, min_x);
            max_x = Math.max(node.x, max_x);
            min_y = Math.min(node.y, min_y);
            max_y = Math.max(node.y, max_y);
          }
        }
      }
      return {
        min_x,
        max_x,
        min_y,
        max_y
      };
    }
  }, {
    key: "hasSameParent",
    value: function hasSameParent(node1, node2) {
      var parents1 = this.parentReference[node1.id];
      var parents2 = this.parentReference[node2.id];
      if (parents1 === void 0 || parents2 === void 0) {
        return false;
      }
      for (var i = 0; i < parents1.length; i++) {
        for (var j = 0; j < parents2.length; j++) {
          if (parents1[i] == parents2[j]) {
            return true;
          }
        }
      }
      return false;
    }
  }, {
    key: "inSameSubNetwork",
    value: function inSameSubNetwork(node1, node2) {
      return this.trees[node1.id] === this.trees[node2.id];
    }
  }, {
    key: "getLevels",
    value: function getLevels() {
      return keys6(this.distributionOrdering);
    }
  }, {
    key: "addToOrdering",
    value: function addToOrdering(node, level) {
      if (this.distributionOrdering[level] === void 0) {
        this.distributionOrdering[level] = [];
      }
      var isPresent = false;
      var curLevel = this.distributionOrdering[level];
      for (var n in curLevel) {
        if (curLevel[n] === node) {
          isPresent = true;
          break;
        }
      }
      if (!isPresent) {
        this.distributionOrdering[level].push(node);
        this.distributionIndex[node.id] = this.distributionOrdering[level].length - 1;
      }
    }
  }]);
  return HierarchicalStatus2;
}();
var LayoutEngine = function() {
  function LayoutEngine2(body) {
    _classCallCheck2(this, LayoutEngine2);
    this.body = body;
    this._resetRNG(Math.random() + ":" + now$1());
    this.setPhysics = false;
    this.options = {};
    this.optionsBackup = {
      physics: {}
    };
    this.defaultOptions = {
      randomSeed: void 0,
      improvedLayout: true,
      clusterThreshold: 150,
      hierarchical: {
        enabled: false,
        levelSeparation: 150,
        nodeSpacing: 100,
        treeSpacing: 200,
        blockShifting: true,
        edgeMinimization: true,
        parentCentralization: true,
        direction: "UD",
        sortMethod: "hubsize"
      }
    };
    assign$22(this.options, this.defaultOptions);
    this.bindEventListeners();
  }
  _createClass2(LayoutEngine2, [{
    key: "bindEventListeners",
    value: function bindEventListeners() {
      var _this2 = this;
      this.body.emitter.on("_dataChanged", function() {
        _this2.setupHierarchicalLayout();
      });
      this.body.emitter.on("_dataLoaded", function() {
        _this2.layoutNetwork();
      });
      this.body.emitter.on("_resetHierarchicalLayout", function() {
        _this2.setupHierarchicalLayout();
      });
      this.body.emitter.on("_adjustEdgesForHierarchicalLayout", function() {
        if (_this2.options.hierarchical.enabled !== true) {
          return;
        }
        var type = _this2.direction.curveType();
        _this2.body.emitter.emit("_forceDisableDynamicCurves", type, false);
      });
    }
  }, {
    key: "setOptions",
    value: function setOptions(options2, allOptions2) {
      if (options2 !== void 0) {
        var hierarchical = this.options.hierarchical;
        var prevHierarchicalState = hierarchical.enabled;
        selectiveDeepExtend(["randomSeed", "improvedLayout", "clusterThreshold"], this.options, options2);
        mergeOptions(this.options, options2, "hierarchical");
        if (options2.randomSeed !== void 0) {
          this._resetRNG(options2.randomSeed);
        }
        if (hierarchical.enabled === true) {
          if (prevHierarchicalState === true) {
            this.body.emitter.emit("refresh", true);
          }
          if (hierarchical.direction === "RL" || hierarchical.direction === "DU") {
            if (hierarchical.levelSeparation > 0) {
              hierarchical.levelSeparation *= -1;
            }
          } else {
            if (hierarchical.levelSeparation < 0) {
              hierarchical.levelSeparation *= -1;
            }
          }
          this.setDirectionStrategy();
          this.body.emitter.emit("_resetHierarchicalLayout");
          return this.adaptAllOptionsForHierarchicalLayout(allOptions2);
        } else {
          if (prevHierarchicalState === true) {
            this.body.emitter.emit("refresh");
            return deepExtend(allOptions2, this.optionsBackup);
          }
        }
      }
      return allOptions2;
    }
  }, {
    key: "_resetRNG",
    value: function _resetRNG(seed) {
      this.initialRandomSeed = seed;
      this._rng = Alea(this.initialRandomSeed);
    }
  }, {
    key: "adaptAllOptionsForHierarchicalLayout",
    value: function adaptAllOptionsForHierarchicalLayout(allOptions2) {
      if (this.options.hierarchical.enabled === true) {
        var backupPhysics = this.optionsBackup.physics;
        if (allOptions2.physics === void 0 || allOptions2.physics === true) {
          allOptions2.physics = {
            enabled: backupPhysics.enabled === void 0 ? true : backupPhysics.enabled,
            solver: "hierarchicalRepulsion"
          };
          backupPhysics.enabled = backupPhysics.enabled === void 0 ? true : backupPhysics.enabled;
          backupPhysics.solver = backupPhysics.solver || "barnesHut";
        } else if (_typeof2(allOptions2.physics) === "object") {
          backupPhysics.enabled = allOptions2.physics.enabled === void 0 ? true : allOptions2.physics.enabled;
          backupPhysics.solver = allOptions2.physics.solver || "barnesHut";
          allOptions2.physics.solver = "hierarchicalRepulsion";
        } else if (allOptions2.physics !== false) {
          backupPhysics.solver = "barnesHut";
          allOptions2.physics = {
            solver: "hierarchicalRepulsion"
          };
        }
        var type = this.direction.curveType();
        if (allOptions2.edges === void 0) {
          this.optionsBackup.edges = {
            smooth: {
              enabled: true,
              type: "dynamic"
            }
          };
          allOptions2.edges = {
            smooth: false
          };
        } else if (allOptions2.edges.smooth === void 0) {
          this.optionsBackup.edges = {
            smooth: {
              enabled: true,
              type: "dynamic"
            }
          };
          allOptions2.edges.smooth = false;
        } else {
          if (typeof allOptions2.edges.smooth === "boolean") {
            this.optionsBackup.edges = {
              smooth: allOptions2.edges.smooth
            };
            allOptions2.edges.smooth = {
              enabled: allOptions2.edges.smooth,
              type
            };
          } else {
            var smooth = allOptions2.edges.smooth;
            if (smooth.type !== void 0 && smooth.type !== "dynamic") {
              type = smooth.type;
            }
            this.optionsBackup.edges = {
              smooth: {
                enabled: smooth.enabled === void 0 ? true : smooth.enabled,
                type: smooth.type === void 0 ? "dynamic" : smooth.type,
                roundness: smooth.roundness === void 0 ? 0.5 : smooth.roundness,
                forceDirection: smooth.forceDirection === void 0 ? false : smooth.forceDirection
              }
            };
            allOptions2.edges.smooth = {
              enabled: smooth.enabled === void 0 ? true : smooth.enabled,
              type,
              roundness: smooth.roundness === void 0 ? 0.5 : smooth.roundness,
              forceDirection: smooth.forceDirection === void 0 ? false : smooth.forceDirection
            };
          }
        }
        this.body.emitter.emit("_forceDisableDynamicCurves", type);
      }
      return allOptions2;
    }
  }, {
    key: "positionInitially",
    value: function positionInitially(nodesArray) {
      if (this.options.hierarchical.enabled !== true) {
        this._resetRNG(this.initialRandomSeed);
        var radius = nodesArray.length + 50;
        for (var i = 0; i < nodesArray.length; i++) {
          var node = nodesArray[i];
          var angle = 2 * Math.PI * this._rng();
          if (node.x === void 0) {
            node.x = radius * Math.cos(angle);
          }
          if (node.y === void 0) {
            node.y = radius * Math.sin(angle);
          }
        }
      }
    }
  }, {
    key: "layoutNetwork",
    value: function layoutNetwork() {
      if (this.options.hierarchical.enabled !== true && this.options.improvedLayout === true) {
        var indices = this.body.nodeIndices;
        var positionDefined = 0;
        for (var i = 0; i < indices.length; i++) {
          var node = this.body.nodes[indices[i]];
          if (node.predefinedPosition === true) {
            positionDefined += 1;
          }
        }
        if (positionDefined < 0.5 * indices.length) {
          var MAX_LEVELS = 10;
          var level = 0;
          var clusterThreshold = this.options.clusterThreshold;
          var clusterOptions = {
            clusterNodeProperties: {
              shape: "ellipse",
              label: "",
              group: "",
              font: {
                multi: false
              }
            },
            clusterEdgeProperties: {
              label: "",
              font: {
                multi: false
              },
              smooth: {
                enabled: false
              }
            }
          };
          if (indices.length > clusterThreshold) {
            var startLength = indices.length;
            while (indices.length > clusterThreshold && level <= MAX_LEVELS) {
              level += 1;
              var before = indices.length;
              if (level % 3 === 0) {
                this.body.modules.clustering.clusterBridges(clusterOptions);
              } else {
                this.body.modules.clustering.clusterOutliers(clusterOptions);
              }
              var after = indices.length;
              if (before == after && level % 3 !== 0) {
                this._declusterAll();
                this.body.emitter.emit("_layoutFailed");
                console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.");
                return;
              }
            }
            this.body.modules.kamadaKawai.setOptions({
              springLength: Math.max(150, 2 * startLength)
            });
          }
          if (level > MAX_LEVELS) {
            console.info("The clustering didn't succeed within the amount of interations allowed, progressing with partial result.");
          }
          this.body.modules.kamadaKawai.solve(indices, this.body.edgeIndices, true);
          this._shiftToCenter();
          var offset = 70;
          for (var _i = 0; _i < indices.length; _i++) {
            var _node = this.body.nodes[indices[_i]];
            if (_node.predefinedPosition === false) {
              _node.x += (0.5 - this._rng()) * offset;
              _node.y += (0.5 - this._rng()) * offset;
            }
          }
          this._declusterAll();
          this.body.emitter.emit("_repositionBezierNodes");
        }
      }
    }
  }, {
    key: "_shiftToCenter",
    value: function _shiftToCenter() {
      var range = NetworkUtil.getRangeCore(this.body.nodes, this.body.nodeIndices);
      var center = NetworkUtil.findCenter(range);
      for (var i = 0; i < this.body.nodeIndices.length; i++) {
        var node = this.body.nodes[this.body.nodeIndices[i]];
        node.x -= center.x;
        node.y -= center.y;
      }
    }
  }, {
    key: "_declusterAll",
    value: function _declusterAll() {
      var clustersPresent = true;
      while (clustersPresent === true) {
        clustersPresent = false;
        for (var i = 0; i < this.body.nodeIndices.length; i++) {
          if (this.body.nodes[this.body.nodeIndices[i]].isCluster === true) {
            clustersPresent = true;
            this.body.modules.clustering.openCluster(this.body.nodeIndices[i], {}, false);
          }
        }
        if (clustersPresent === true) {
          this.body.emitter.emit("_dataChanged");
        }
      }
    }
  }, {
    key: "getSeed",
    value: function getSeed() {
      return this.initialRandomSeed;
    }
  }, {
    key: "setupHierarchicalLayout",
    value: function setupHierarchicalLayout() {
      if (this.options.hierarchical.enabled === true && this.body.nodeIndices.length > 0) {
        var node, nodeId;
        var definedLevel = false;
        var undefinedLevel = false;
        this.lastNodeOnLevel = {};
        this.hierarchical = new HierarchicalStatus();
        for (nodeId in this.body.nodes) {
          if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
            node = this.body.nodes[nodeId];
            if (node.options.level !== void 0) {
              definedLevel = true;
              this.hierarchical.levels[nodeId] = node.options.level;
            } else {
              undefinedLevel = true;
            }
          }
        }
        if (undefinedLevel === true && definedLevel === true) {
          throw new Error("To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.");
        } else {
          if (undefinedLevel === true) {
            var sortMethod = this.options.hierarchical.sortMethod;
            if (sortMethod === "hubsize") {
              this._determineLevelsByHubsize();
            } else if (sortMethod === "directed") {
              this._determineLevelsDirected();
            } else if (sortMethod === "custom") {
              this._determineLevelsCustomCallback();
            }
          }
          for (var _nodeId2 in this.body.nodes) {
            if (Object.prototype.hasOwnProperty.call(this.body.nodes, _nodeId2)) {
              this.hierarchical.ensureLevel(_nodeId2);
            }
          }
          var distribution = this._getDistribution();
          this._generateMap();
          this._placeNodesByHierarchy(distribution);
          this._condenseHierarchy();
          this._shiftToCenter();
        }
      }
    }
  }, {
    key: "_condenseHierarchy",
    value: function _condenseHierarchy() {
      var _this3 = this;
      var stillShifting = false;
      var branches = {};
      var shiftTrees = function shiftTrees2() {
        var treeSizes = getTreeSizes();
        var shiftBy = 0;
        for (var i = 0; i < treeSizes.length - 1; i++) {
          var diff = treeSizes[i].max - treeSizes[i + 1].min;
          shiftBy += diff + _this3.options.hierarchical.treeSpacing;
          shiftTree(i + 1, shiftBy);
        }
      };
      var shiftTree = function shiftTree2(index2, offset) {
        var trees = _this3.hierarchical.trees;
        for (var nodeId in trees) {
          if (Object.prototype.hasOwnProperty.call(trees, nodeId)) {
            if (trees[nodeId] === index2) {
              _this3.direction.shift(nodeId, offset);
            }
          }
        }
      };
      var getTreeSizes = function getTreeSizes2() {
        var treeWidths = [];
        for (var i = 0; i < _this3.hierarchical.numTrees(); i++) {
          treeWidths.push(_this3.direction.getTreeSize(i));
        }
        return treeWidths;
      };
      var getBranchNodes = function getBranchNodes2(source, map5) {
        if (map5[source.id]) {
          return;
        }
        map5[source.id] = true;
        if (_this3.hierarchical.childrenReference[source.id]) {
          var children = _this3.hierarchical.childrenReference[source.id];
          if (children.length > 0) {
            for (var i = 0; i < children.length; i++) {
              getBranchNodes2(_this3.body.nodes[children[i]], map5);
            }
          }
        }
      };
      var getBranchBoundary = function getBranchBoundary2(branchMap) {
        var maxLevel = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1e9;
        var minSpace = 1e9;
        var maxSpace = 1e9;
        var min3 = 1e9;
        var max3 = -1e9;
        for (var branchNode in branchMap) {
          if (Object.prototype.hasOwnProperty.call(branchMap, branchNode)) {
            var node = _this3.body.nodes[branchNode];
            var level = _this3.hierarchical.levels[node.id];
            var position = _this3.direction.getPosition(node);
            var _this3$_getSpaceAroun = _this3._getSpaceAroundNode(node, branchMap), _this3$_getSpaceAroun2 = _slicedToArray2(_this3$_getSpaceAroun, 2), minSpaceNode = _this3$_getSpaceAroun2[0], maxSpaceNode = _this3$_getSpaceAroun2[1];
            minSpace = Math.min(minSpaceNode, minSpace);
            maxSpace = Math.min(maxSpaceNode, maxSpace);
            if (level <= maxLevel) {
              min3 = Math.min(position, min3);
              max3 = Math.max(position, max3);
            }
          }
        }
        return [min3, max3, minSpace, maxSpace];
      };
      var getCollisionLevel = function getCollisionLevel2(node1, node2) {
        var maxLevel1 = _this3.hierarchical.getMaxLevel(node1.id);
        var maxLevel2 = _this3.hierarchical.getMaxLevel(node2.id);
        return Math.min(maxLevel1, maxLevel2);
      };
      var shiftElementsCloser = function shiftElementsCloser2(callback, levels, centerParents) {
        var hier = _this3.hierarchical;
        for (var i = 0; i < levels.length; i++) {
          var level = levels[i];
          var levelNodes = hier.distributionOrdering[level];
          if (levelNodes.length > 1) {
            for (var j = 0; j < levelNodes.length - 1; j++) {
              var node1 = levelNodes[j];
              var node2 = levelNodes[j + 1];
              if (hier.hasSameParent(node1, node2) && hier.inSameSubNetwork(node1, node2)) {
                callback(node1, node2, centerParents);
              }
            }
          }
        }
      };
      var branchShiftCallback = function branchShiftCallback2(node1, node2) {
        var centerParent = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var pos1 = _this3.direction.getPosition(node1);
        var pos2 = _this3.direction.getPosition(node2);
        var diffAbs = Math.abs(pos2 - pos1);
        var nodeSpacing = _this3.options.hierarchical.nodeSpacing;
        if (diffAbs > nodeSpacing) {
          var branchNodes1 = {};
          var branchNodes2 = {};
          getBranchNodes(node1, branchNodes1);
          getBranchNodes(node2, branchNodes2);
          var maxLevel = getCollisionLevel(node1, node2);
          var branchNodeBoundary1 = getBranchBoundary(branchNodes1, maxLevel);
          var branchNodeBoundary2 = getBranchBoundary(branchNodes2, maxLevel);
          var max1 = branchNodeBoundary1[1];
          var min22 = branchNodeBoundary2[0];
          var minSpace2 = branchNodeBoundary2[2];
          var diffBranch = Math.abs(max1 - min22);
          if (diffBranch > nodeSpacing) {
            var offset = max1 - min22 + nodeSpacing;
            if (offset < -minSpace2 + nodeSpacing) {
              offset = -minSpace2 + nodeSpacing;
            }
            if (offset < 0) {
              _this3._shiftBlock(node2.id, offset);
              stillShifting = true;
              if (centerParent === true)
                _this3._centerParent(node2);
            }
          }
        }
      };
      var minimizeEdgeLength = function minimizeEdgeLength2(iterations, node) {
        var nodeId = node.id;
        var allEdges = node.edges;
        var nodeLevel = _this3.hierarchical.levels[node.id];
        var C2 = _this3.options.hierarchical.levelSeparation * _this3.options.hierarchical.levelSeparation;
        var referenceNodes = {};
        var aboveEdges = [];
        for (var i = 0; i < allEdges.length; i++) {
          var edge = allEdges[i];
          if (edge.toId != edge.fromId) {
            var otherNode = edge.toId == nodeId ? edge.from : edge.to;
            referenceNodes[allEdges[i].id] = otherNode;
            if (_this3.hierarchical.levels[otherNode.id] < nodeLevel) {
              aboveEdges.push(edge);
            }
          }
        }
        var getFx = function getFx2(point, edges) {
          var sum = 0;
          for (var _i2 = 0; _i2 < edges.length; _i2++) {
            if (referenceNodes[edges[_i2].id] !== void 0) {
              var a = _this3.direction.getPosition(referenceNodes[edges[_i2].id]) - point;
              sum += a / Math.sqrt(a * a + C2);
            }
          }
          return sum;
        };
        var getDFx = function getDFx2(point, edges) {
          var sum = 0;
          for (var _i3 = 0; _i3 < edges.length; _i3++) {
            if (referenceNodes[edges[_i3].id] !== void 0) {
              var a = _this3.direction.getPosition(referenceNodes[edges[_i3].id]) - point;
              sum -= C2 * Math.pow(a * a + C2, -1.5);
            }
          }
          return sum;
        };
        var getGuess = function getGuess2(iterations2, edges) {
          var guess2 = _this3.direction.getPosition(node);
          var guessMap = {};
          for (var _i4 = 0; _i4 < iterations2; _i4++) {
            var fx = getFx(guess2, edges);
            var dfx = getDFx(guess2, edges);
            var limit = 40;
            var ratio = Math.max(-limit, Math.min(limit, Math.round(fx / dfx)));
            guess2 = guess2 - ratio;
            if (guessMap[guess2] !== void 0) {
              break;
            }
            guessMap[guess2] = _i4;
          }
          return guess2;
        };
        var moveBranch = function moveBranch2(guess2) {
          var nodePosition = _this3.direction.getPosition(node);
          if (branches[node.id] === void 0) {
            var branchNodes = {};
            getBranchNodes(node, branchNodes);
            branches[node.id] = branchNodes;
          }
          var branchBoundary = getBranchBoundary(branches[node.id]);
          var minSpaceBranch = branchBoundary[2];
          var maxSpaceBranch = branchBoundary[3];
          var diff = guess2 - nodePosition;
          var branchOffset = 0;
          if (diff > 0) {
            branchOffset = Math.min(diff, maxSpaceBranch - _this3.options.hierarchical.nodeSpacing);
          } else if (diff < 0) {
            branchOffset = -Math.min(-diff, minSpaceBranch - _this3.options.hierarchical.nodeSpacing);
          }
          if (branchOffset != 0) {
            _this3._shiftBlock(node.id, branchOffset);
            stillShifting = true;
          }
        };
        var moveNode = function moveNode2(guess2) {
          var nodePosition = _this3.direction.getPosition(node);
          var _this3$_getSpaceAroun3 = _this3._getSpaceAroundNode(node), _this3$_getSpaceAroun4 = _slicedToArray2(_this3$_getSpaceAroun3, 2), minSpace = _this3$_getSpaceAroun4[0], maxSpace = _this3$_getSpaceAroun4[1];
          var diff = guess2 - nodePosition;
          var newPosition = nodePosition;
          if (diff > 0) {
            newPosition = Math.min(nodePosition + (maxSpace - _this3.options.hierarchical.nodeSpacing), guess2);
          } else if (diff < 0) {
            newPosition = Math.max(nodePosition - (minSpace - _this3.options.hierarchical.nodeSpacing), guess2);
          }
          if (newPosition !== nodePosition) {
            _this3.direction.setPosition(node, newPosition);
            stillShifting = true;
          }
        };
        var guess = getGuess(iterations, aboveEdges);
        moveBranch(guess);
        guess = getGuess(iterations, allEdges);
        moveNode(guess);
      };
      var minimizeEdgeLengthBottomUp = function minimizeEdgeLengthBottomUp2(iterations) {
        var levels = _this3.hierarchical.getLevels();
        levels = reverse4(levels).call(levels);
        for (var i = 0; i < iterations; i++) {
          stillShifting = false;
          for (var j = 0; j < levels.length; j++) {
            var level = levels[j];
            var levelNodes = _this3.hierarchical.distributionOrdering[level];
            for (var k = 0; k < levelNodes.length; k++) {
              minimizeEdgeLength(1e3, levelNodes[k]);
            }
          }
          if (stillShifting !== true) {
            break;
          }
        }
      };
      var shiftBranchesCloserBottomUp = function shiftBranchesCloserBottomUp2(iterations) {
        var levels = _this3.hierarchical.getLevels();
        levels = reverse4(levels).call(levels);
        for (var i = 0; i < iterations; i++) {
          stillShifting = false;
          shiftElementsCloser(branchShiftCallback, levels, true);
          if (stillShifting !== true) {
            break;
          }
        }
      };
      var centerAllParents = function centerAllParents2() {
        for (var nodeId in _this3.body.nodes) {
          if (Object.prototype.hasOwnProperty.call(_this3.body.nodes, nodeId))
            _this3._centerParent(_this3.body.nodes[nodeId]);
        }
      };
      var centerAllParentsBottomUp = function centerAllParentsBottomUp2() {
        var levels = _this3.hierarchical.getLevels();
        levels = reverse4(levels).call(levels);
        for (var i = 0; i < levels.length; i++) {
          var level = levels[i];
          var levelNodes = _this3.hierarchical.distributionOrdering[level];
          for (var j = 0; j < levelNodes.length; j++) {
            _this3._centerParent(levelNodes[j]);
          }
        }
      };
      if (this.options.hierarchical.blockShifting === true) {
        shiftBranchesCloserBottomUp(5);
        centerAllParents();
      }
      if (this.options.hierarchical.edgeMinimization === true) {
        minimizeEdgeLengthBottomUp(20);
      }
      if (this.options.hierarchical.parentCentralization === true) {
        centerAllParentsBottomUp();
      }
      shiftTrees();
    }
  }, {
    key: "_getSpaceAroundNode",
    value: function _getSpaceAroundNode(node, map5) {
      var useMap = true;
      if (map5 === void 0) {
        useMap = false;
      }
      var level = this.hierarchical.levels[node.id];
      if (level !== void 0) {
        var index2 = this.hierarchical.distributionIndex[node.id];
        var position = this.direction.getPosition(node);
        var ordering = this.hierarchical.distributionOrdering[level];
        var minSpace = 1e9;
        var maxSpace = 1e9;
        if (index2 !== 0) {
          var prevNode = ordering[index2 - 1];
          if (useMap === true && map5[prevNode.id] === void 0 || useMap === false) {
            var prevPos = this.direction.getPosition(prevNode);
            minSpace = position - prevPos;
          }
        }
        if (index2 != ordering.length - 1) {
          var nextNode = ordering[index2 + 1];
          if (useMap === true && map5[nextNode.id] === void 0 || useMap === false) {
            var nextPos = this.direction.getPosition(nextNode);
            maxSpace = Math.min(maxSpace, nextPos - position);
          }
        }
        return [minSpace, maxSpace];
      } else {
        return [0, 0];
      }
    }
  }, {
    key: "_centerParent",
    value: function _centerParent(node) {
      if (this.hierarchical.parentReference[node.id]) {
        var parents = this.hierarchical.parentReference[node.id];
        for (var i = 0; i < parents.length; i++) {
          var parentId = parents[i];
          var parentNode = this.body.nodes[parentId];
          var children = this.hierarchical.childrenReference[parentId];
          if (children !== void 0) {
            var newPosition = this._getCenterPosition(children);
            var position = this.direction.getPosition(parentNode);
            var _this$_getSpaceAround = this._getSpaceAroundNode(parentNode), _this$_getSpaceAround2 = _slicedToArray2(_this$_getSpaceAround, 2), minSpace = _this$_getSpaceAround2[0], maxSpace = _this$_getSpaceAround2[1];
            var diff = position - newPosition;
            if (diff < 0 && Math.abs(diff) < maxSpace - this.options.hierarchical.nodeSpacing || diff > 0 && Math.abs(diff) < minSpace - this.options.hierarchical.nodeSpacing) {
              this.direction.setPosition(parentNode, newPosition);
            }
          }
        }
      }
    }
  }, {
    key: "_placeNodesByHierarchy",
    value: function _placeNodesByHierarchy(distribution) {
      this.positionedNodes = {};
      for (var level in distribution) {
        if (Object.prototype.hasOwnProperty.call(distribution, level)) {
          var _context;
          var nodeArray = keys6(distribution[level]);
          nodeArray = this._indexArrayToNodes(nodeArray);
          sort4(_context = this.direction).call(_context, nodeArray);
          var handledNodeCount = 0;
          for (var i = 0; i < nodeArray.length; i++) {
            var node = nodeArray[i];
            if (this.positionedNodes[node.id] === void 0) {
              var spacing = this.options.hierarchical.nodeSpacing;
              var pos = spacing * handledNodeCount;
              if (handledNodeCount > 0) {
                pos = this.direction.getPosition(nodeArray[i - 1]) + spacing;
              }
              this.direction.setPosition(node, pos, level);
              this._validatePositionAndContinue(node, level, pos);
              handledNodeCount++;
            }
          }
        }
      }
    }
  }, {
    key: "_placeBranchNodes",
    value: function _placeBranchNodes(parentId, parentLevel) {
      var _context2;
      var childRef = this.hierarchical.childrenReference[parentId];
      if (childRef === void 0) {
        return;
      }
      var childNodes = [];
      for (var i = 0; i < childRef.length; i++) {
        childNodes.push(this.body.nodes[childRef[i]]);
      }
      sort4(_context2 = this.direction).call(_context2, childNodes);
      for (var _i5 = 0; _i5 < childNodes.length; _i5++) {
        var childNode = childNodes[_i5];
        var childNodeLevel = this.hierarchical.levels[childNode.id];
        if (childNodeLevel > parentLevel && this.positionedNodes[childNode.id] === void 0) {
          var spacing = this.options.hierarchical.nodeSpacing;
          var pos = void 0;
          if (_i5 === 0) {
            pos = this.direction.getPosition(this.body.nodes[parentId]);
          } else {
            pos = this.direction.getPosition(childNodes[_i5 - 1]) + spacing;
          }
          this.direction.setPosition(childNode, pos, childNodeLevel);
          this._validatePositionAndContinue(childNode, childNodeLevel, pos);
        } else {
          return;
        }
      }
      var center = this._getCenterPosition(childNodes);
      this.direction.setPosition(this.body.nodes[parentId], center, parentLevel);
    }
  }, {
    key: "_validatePositionAndContinue",
    value: function _validatePositionAndContinue(node, level, pos) {
      if (!this.hierarchical.isTree)
        return;
      if (this.lastNodeOnLevel[level] !== void 0) {
        var previousPos = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[level]]);
        if (pos - previousPos < this.options.hierarchical.nodeSpacing) {
          var diff = previousPos + this.options.hierarchical.nodeSpacing - pos;
          var sharedParent = this._findCommonParent(this.lastNodeOnLevel[level], node.id);
          this._shiftBlock(sharedParent.withChild, diff);
        }
      }
      this.lastNodeOnLevel[level] = node.id;
      this.positionedNodes[node.id] = true;
      this._placeBranchNodes(node.id, level);
    }
  }, {
    key: "_indexArrayToNodes",
    value: function _indexArrayToNodes(idArray) {
      var array2 = [];
      for (var i = 0; i < idArray.length; i++) {
        array2.push(this.body.nodes[idArray[i]]);
      }
      return array2;
    }
  }, {
    key: "_getDistribution",
    value: function _getDistribution() {
      var distribution = {};
      var nodeId, node;
      for (nodeId in this.body.nodes) {
        if (Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId)) {
          node = this.body.nodes[nodeId];
          var level = this.hierarchical.levels[nodeId] === void 0 ? 0 : this.hierarchical.levels[nodeId];
          this.direction.fix(node, level);
          if (distribution[level] === void 0) {
            distribution[level] = {};
          }
          distribution[level][nodeId] = node;
        }
      }
      return distribution;
    }
  }, {
    key: "_getActiveEdges",
    value: function _getActiveEdges(node) {
      var _this4 = this;
      var result = [];
      forEach$12(node.edges, function(edge) {
        var _context3;
        if (indexOf4(_context3 = _this4.body.edgeIndices).call(_context3, edge.id) !== -1) {
          result.push(edge);
        }
      });
      return result;
    }
  }, {
    key: "_getHubSizes",
    value: function _getHubSizes() {
      var _this5 = this;
      var hubSizes = {};
      var nodeIds = this.body.nodeIndices;
      forEach$12(nodeIds, function(nodeId) {
        var node = _this5.body.nodes[nodeId];
        var hubSize = _this5._getActiveEdges(node).length;
        hubSizes[hubSize] = true;
      });
      var result = [];
      forEach$12(hubSizes, function(size) {
        result.push(Number(size));
      });
      sort4(timsort).call(timsort, result, function(a, b) {
        return b - a;
      });
      return result;
    }
  }, {
    key: "_determineLevelsByHubsize",
    value: function _determineLevelsByHubsize() {
      var _this6 = this;
      var levelDownstream = function levelDownstream2(nodeA, nodeB) {
        _this6.hierarchical.levelDownstream(nodeA, nodeB);
      };
      var hubSizes = this._getHubSizes();
      var _loop = function _loop2(i2) {
        var hubSize = hubSizes[i2];
        if (hubSize === 0)
          return "break";
        forEach$12(_this6.body.nodeIndices, function(nodeId) {
          var node = _this6.body.nodes[nodeId];
          if (hubSize === _this6._getActiveEdges(node).length) {
            _this6._crawlNetwork(levelDownstream, nodeId);
          }
        });
      };
      for (var i = 0; i < hubSizes.length; ++i) {
        var _ret = _loop(i);
        if (_ret === "break")
          break;
      }
    }
  }, {
    key: "_determineLevelsCustomCallback",
    value: function _determineLevelsCustomCallback() {
      var _this7 = this;
      var minLevel = 1e5;
      var customCallback = function customCallback2(nodeA, nodeB, edge) {
      };
      var levelByDirection = function levelByDirection2(nodeA, nodeB, edge) {
        var levelA = _this7.hierarchical.levels[nodeA.id];
        if (levelA === void 0) {
          levelA = _this7.hierarchical.levels[nodeA.id] = minLevel;
        }
        var diff = customCallback(NetworkUtil.cloneOptions(nodeA, "node"), NetworkUtil.cloneOptions(nodeB, "node"), NetworkUtil.cloneOptions(edge, "edge"));
        _this7.hierarchical.levels[nodeB.id] = levelA + diff;
      };
      this._crawlNetwork(levelByDirection);
      this.hierarchical.setMinLevelToZero(this.body.nodes);
    }
  }, {
    key: "_determineLevelsDirected",
    value: function _determineLevelsDirected() {
      var _context4, _this8 = this;
      var nodes = reduce4(_context4 = this.body.nodeIndices).call(_context4, function(acc, id3) {
        acc.set(id3, _this8.body.nodes[id3]);
        return acc;
      }, new map4());
      if (this.options.hierarchical.shakeTowards === "roots") {
        this.hierarchical.levels = fillLevelsByDirectionRoots(nodes);
      } else {
        this.hierarchical.levels = fillLevelsByDirectionLeaves(nodes);
      }
      this.hierarchical.setMinLevelToZero(this.body.nodes);
    }
  }, {
    key: "_generateMap",
    value: function _generateMap() {
      var _this9 = this;
      var fillInRelations = function fillInRelations2(parentNode, childNode) {
        if (_this9.hierarchical.levels[childNode.id] > _this9.hierarchical.levels[parentNode.id]) {
          _this9.hierarchical.addRelation(parentNode.id, childNode.id);
        }
      };
      this._crawlNetwork(fillInRelations);
      this.hierarchical.checkIfTree();
    }
  }, {
    key: "_crawlNetwork",
    value: function _crawlNetwork() {
      var _this10 = this;
      var callback = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function() {
      };
      var startingNodeId = arguments.length > 1 ? arguments[1] : void 0;
      var progress = {};
      var crawler = function crawler2(node2, tree) {
        if (progress[node2.id] === void 0) {
          _this10.hierarchical.setTreeIndex(node2, tree);
          progress[node2.id] = true;
          var childNode;
          var edges = _this10._getActiveEdges(node2);
          for (var i2 = 0; i2 < edges.length; i2++) {
            var edge = edges[i2];
            if (edge.connected === true) {
              if (edge.toId == node2.id) {
                childNode = edge.from;
              } else {
                childNode = edge.to;
              }
              if (node2.id != childNode.id) {
                callback(node2, childNode, edge);
                crawler2(childNode, tree);
              }
            }
          }
        }
      };
      if (startingNodeId === void 0) {
        var treeIndex = 0;
        for (var i = 0; i < this.body.nodeIndices.length; i++) {
          var nodeId = this.body.nodeIndices[i];
          if (progress[nodeId] === void 0) {
            var node = this.body.nodes[nodeId];
            crawler(node, treeIndex);
            treeIndex += 1;
          }
        }
      } else {
        var _node2 = this.body.nodes[startingNodeId];
        if (_node2 === void 0) {
          console.error("Node not found:", startingNodeId);
          return;
        }
        crawler(_node2);
      }
    }
  }, {
    key: "_shiftBlock",
    value: function _shiftBlock(parentId, diff) {
      var _this11 = this;
      var progress = {};
      var shifter = function shifter2(parentId2) {
        if (progress[parentId2]) {
          return;
        }
        progress[parentId2] = true;
        _this11.direction.shift(parentId2, diff);
        var childRef = _this11.hierarchical.childrenReference[parentId2];
        if (childRef !== void 0) {
          for (var i = 0; i < childRef.length; i++) {
            shifter2(childRef[i]);
          }
        }
      };
      shifter(parentId);
    }
  }, {
    key: "_findCommonParent",
    value: function _findCommonParent(childA, childB) {
      var _this12 = this;
      var parents = {};
      var iterateParents = function iterateParents2(parents2, child) {
        var parentRef = _this12.hierarchical.parentReference[child];
        if (parentRef !== void 0) {
          for (var i = 0; i < parentRef.length; i++) {
            var parent3 = parentRef[i];
            parents2[parent3] = true;
            iterateParents2(parents2, parent3);
          }
        }
      };
      var findParent = function findParent2(parents2, child) {
        var parentRef = _this12.hierarchical.parentReference[child];
        if (parentRef !== void 0) {
          for (var i = 0; i < parentRef.length; i++) {
            var parent3 = parentRef[i];
            if (parents2[parent3] !== void 0) {
              return {
                foundParent: parent3,
                withChild: child
              };
            }
            var branch = findParent2(parents2, parent3);
            if (branch.foundParent !== null) {
              return branch;
            }
          }
        }
        return {
          foundParent: null,
          withChild: child
        };
      };
      iterateParents(parents, childA);
      return findParent(parents, childB);
    }
  }, {
    key: "setDirectionStrategy",
    value: function setDirectionStrategy() {
      var isVertical = this.options.hierarchical.direction === "UD" || this.options.hierarchical.direction === "DU";
      if (isVertical) {
        this.direction = new VerticalStrategy(this);
      } else {
        this.direction = new HorizontalStrategy(this);
      }
    }
  }, {
    key: "_getCenterPosition",
    value: function _getCenterPosition(childNodes) {
      var minPos = 1e9;
      var maxPos = -1e9;
      for (var i = 0; i < childNodes.length; i++) {
        var childNode = void 0;
        if (childNodes[i].id !== void 0) {
          childNode = childNodes[i];
        } else {
          var childNodeId = childNodes[i];
          childNode = this.body.nodes[childNodeId];
        }
        var position = this.direction.getPosition(childNode);
        minPos = Math.min(minPos, position);
        maxPos = Math.max(maxPos, position);
      }
      return 0.5 * (minPos + maxPos);
    }
  }]);
  return LayoutEngine2;
}();
function _createForOfIteratorHelper2(o, allowArrayLike) {
  var it2 = typeof symbol2 !== "undefined" && getIteratorMethod$12(o) || o["@@iterator"];
  if (!it2) {
    if (isArray$12(o) || (it2 = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it2)
        o = it2;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it2 = it2.call(o);
  }, n: function n() {
    var step = it2.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it2.return != null)
        it2.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray2(o, minLen) {
  var _context32;
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = slice4(_context32 = Object.prototype.toString.call(o)).call(_context32, 8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return from$32(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var ManipulationSystem = function() {
  function ManipulationSystem2(body, canvas, selectionHandler, interactionHandler) {
    var _this = this, _context, _context2;
    _classCallCheck2(this, ManipulationSystem2);
    this.body = body;
    this.canvas = canvas;
    this.selectionHandler = selectionHandler;
    this.interactionHandler = interactionHandler;
    this.editMode = false;
    this.manipulationDiv = void 0;
    this.editModeDiv = void 0;
    this.closeDiv = void 0;
    this._domEventListenerCleanupQueue = [];
    this.temporaryUIFunctions = {};
    this.temporaryEventFunctions = [];
    this.touchTime = 0;
    this.temporaryIds = {
      nodes: [],
      edges: []
    };
    this.guiEnabled = false;
    this.inMode = false;
    this.selectedControlNode = void 0;
    this.options = {};
    this.defaultOptions = {
      enabled: false,
      initiallyActive: false,
      addNode: true,
      addEdge: true,
      editNode: void 0,
      editEdge: true,
      deleteNode: true,
      deleteEdge: true,
      controlNodeStyle: {
        shape: "dot",
        size: 6,
        color: {
          background: "#ff0000",
          border: "#3c3c3c",
          highlight: {
            background: "#07f968",
            border: "#3c3c3c"
          }
        },
        borderWidth: 2,
        borderWidthSelected: 2
      }
    };
    assign$22(this.options, this.defaultOptions);
    this.body.emitter.on("destroy", function() {
      _this._clean();
    });
    this.body.emitter.on("_dataChanged", bind$52(_context = this._restore).call(_context, this));
    this.body.emitter.on("_resetData", bind$52(_context2 = this._restore).call(_context2, this));
  }
  _createClass2(ManipulationSystem2, [{
    key: "_restore",
    value: function _restore() {
      if (this.inMode !== false) {
        if (this.options.initiallyActive === true) {
          this.enableEditMode();
        } else {
          this.disableEditMode();
        }
      }
    }
  }, {
    key: "setOptions",
    value: function setOptions(options2, allOptions2, globalOptions) {
      if (allOptions2 !== void 0) {
        if (allOptions2.locale !== void 0) {
          this.options.locale = allOptions2.locale;
        } else {
          this.options.locale = globalOptions.locale;
        }
        if (allOptions2.locales !== void 0) {
          this.options.locales = allOptions2.locales;
        } else {
          this.options.locales = globalOptions.locales;
        }
      }
      if (options2 !== void 0) {
        if (typeof options2 === "boolean") {
          this.options.enabled = options2;
        } else {
          this.options.enabled = true;
          deepExtend(this.options, options2);
        }
        if (this.options.initiallyActive === true) {
          this.editMode = true;
        }
        this._setup();
      }
    }
  }, {
    key: "toggleEditMode",
    value: function toggleEditMode() {
      if (this.editMode === true) {
        this.disableEditMode();
      } else {
        this.enableEditMode();
      }
    }
  }, {
    key: "enableEditMode",
    value: function enableEditMode() {
      this.editMode = true;
      this._clean();
      if (this.guiEnabled === true) {
        this.manipulationDiv.style.display = "block";
        this.closeDiv.style.display = "block";
        this.editModeDiv.style.display = "none";
        this.showManipulatorToolbar();
      }
    }
  }, {
    key: "disableEditMode",
    value: function disableEditMode() {
      this.editMode = false;
      this._clean();
      if (this.guiEnabled === true) {
        this.manipulationDiv.style.display = "none";
        this.closeDiv.style.display = "none";
        this.editModeDiv.style.display = "block";
        this._createEditButton();
      }
    }
  }, {
    key: "showManipulatorToolbar",
    value: function showManipulatorToolbar() {
      this._clean();
      this.manipulationDOM = {};
      if (this.guiEnabled === true) {
        var _context3, _context4;
        this.editMode = true;
        this.manipulationDiv.style.display = "block";
        this.closeDiv.style.display = "block";
        var selectedNodeCount = this.selectionHandler.getSelectedNodeCount();
        var selectedEdgeCount = this.selectionHandler.getSelectedEdgeCount();
        var selectedTotalCount = selectedNodeCount + selectedEdgeCount;
        var locale = this.options.locales[this.options.locale];
        var needSeperator = false;
        if (this.options.addNode !== false) {
          this._createAddNodeButton(locale);
          needSeperator = true;
        }
        if (this.options.addEdge !== false) {
          if (needSeperator === true) {
            this._createSeperator(1);
          } else {
            needSeperator = true;
          }
          this._createAddEdgeButton(locale);
        }
        if (selectedNodeCount === 1 && typeof this.options.editNode === "function") {
          if (needSeperator === true) {
            this._createSeperator(2);
          } else {
            needSeperator = true;
          }
          this._createEditNodeButton(locale);
        } else if (selectedEdgeCount === 1 && selectedNodeCount === 0 && this.options.editEdge !== false) {
          if (needSeperator === true) {
            this._createSeperator(3);
          } else {
            needSeperator = true;
          }
          this._createEditEdgeButton(locale);
        }
        if (selectedTotalCount !== 0) {
          if (selectedNodeCount > 0 && this.options.deleteNode !== false) {
            if (needSeperator === true) {
              this._createSeperator(4);
            }
            this._createDeleteButton(locale);
          } else if (selectedNodeCount === 0 && this.options.deleteEdge !== false) {
            if (needSeperator === true) {
              this._createSeperator(4);
            }
            this._createDeleteButton(locale);
          }
        }
        this._bindElementEvents(this.closeDiv, bind$52(_context3 = this.toggleEditMode).call(_context3, this));
        this._temporaryBindEvent("select", bind$52(_context4 = this.showManipulatorToolbar).call(_context4, this));
      }
      this.body.emitter.emit("_redraw");
    }
  }, {
    key: "addNodeMode",
    value: function addNodeMode() {
      var _context6;
      if (this.editMode !== true) {
        this.enableEditMode();
      }
      this._clean();
      this.inMode = "addNode";
      if (this.guiEnabled === true) {
        var _context5;
        var locale = this.options.locales[this.options.locale];
        this.manipulationDOM = {};
        this._createBackButton(locale);
        this._createSeperator();
        this._createDescription(locale["addDescription"] || this.options.locales["en"]["addDescription"]);
        this._bindElementEvents(this.closeDiv, bind$52(_context5 = this.toggleEditMode).call(_context5, this));
      }
      this._temporaryBindEvent("click", bind$52(_context6 = this._performAddNode).call(_context6, this));
    }
  }, {
    key: "editNode",
    value: function editNode() {
      var _this2 = this;
      if (this.editMode !== true) {
        this.enableEditMode();
      }
      this._clean();
      var node = this.selectionHandler.getSelectedNodes()[0];
      if (node !== void 0) {
        this.inMode = "editNode";
        if (typeof this.options.editNode === "function") {
          if (node.isCluster !== true) {
            var data3 = deepExtend({}, node.options, false);
            data3.x = node.x;
            data3.y = node.y;
            if (this.options.editNode.length === 2) {
              this.options.editNode(data3, function(finalizedData) {
                if (finalizedData !== null && finalizedData !== void 0 && _this2.inMode === "editNode") {
                  _this2.body.data.nodes.getDataSet().update(finalizedData);
                }
                _this2.showManipulatorToolbar();
              });
            } else {
              throw new Error("The function for edit does not support two arguments (data, callback)");
            }
          } else {
            alert(this.options.locales[this.options.locale]["editClusterError"] || this.options.locales["en"]["editClusterError"]);
          }
        } else {
          throw new Error("No function has been configured to handle the editing of nodes.");
        }
      } else {
        this.showManipulatorToolbar();
      }
    }
  }, {
    key: "addEdgeMode",
    value: function addEdgeMode() {
      var _context8, _context9, _context10, _context11, _context12;
      if (this.editMode !== true) {
        this.enableEditMode();
      }
      this._clean();
      this.inMode = "addEdge";
      if (this.guiEnabled === true) {
        var _context7;
        var locale = this.options.locales[this.options.locale];
        this.manipulationDOM = {};
        this._createBackButton(locale);
        this._createSeperator();
        this._createDescription(locale["edgeDescription"] || this.options.locales["en"]["edgeDescription"]);
        this._bindElementEvents(this.closeDiv, bind$52(_context7 = this.toggleEditMode).call(_context7, this));
      }
      this._temporaryBindUI("onTouch", bind$52(_context8 = this._handleConnect).call(_context8, this));
      this._temporaryBindUI("onDragEnd", bind$52(_context9 = this._finishConnect).call(_context9, this));
      this._temporaryBindUI("onDrag", bind$52(_context10 = this._dragControlNode).call(_context10, this));
      this._temporaryBindUI("onRelease", bind$52(_context11 = this._finishConnect).call(_context11, this));
      this._temporaryBindUI("onDragStart", bind$52(_context12 = this._dragStartEdge).call(_context12, this));
      this._temporaryBindUI("onHold", function() {
      });
    }
  }, {
    key: "editEdgeMode",
    value: function editEdgeMode() {
      if (this.editMode !== true) {
        this.enableEditMode();
      }
      this._clean();
      this.inMode = "editEdge";
      if (_typeof2(this.options.editEdge) === "object" && typeof this.options.editEdge.editWithoutDrag === "function") {
        this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0];
        if (this.edgeBeingEditedId !== void 0) {
          var edge = this.body.edges[this.edgeBeingEditedId];
          this._performEditEdge(edge.from.id, edge.to.id);
          return;
        }
      }
      if (this.guiEnabled === true) {
        var _context13;
        var locale = this.options.locales[this.options.locale];
        this.manipulationDOM = {};
        this._createBackButton(locale);
        this._createSeperator();
        this._createDescription(locale["editEdgeDescription"] || this.options.locales["en"]["editEdgeDescription"]);
        this._bindElementEvents(this.closeDiv, bind$52(_context13 = this.toggleEditMode).call(_context13, this));
      }
      this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0];
      if (this.edgeBeingEditedId !== void 0) {
        var _context14, _context15, _context16, _context17;
        var _edge = this.body.edges[this.edgeBeingEditedId];
        var controlNodeFrom = this._getNewTargetNode(_edge.from.x, _edge.from.y);
        var controlNodeTo = this._getNewTargetNode(_edge.to.x, _edge.to.y);
        this.temporaryIds.nodes.push(controlNodeFrom.id);
        this.temporaryIds.nodes.push(controlNodeTo.id);
        this.body.nodes[controlNodeFrom.id] = controlNodeFrom;
        this.body.nodeIndices.push(controlNodeFrom.id);
        this.body.nodes[controlNodeTo.id] = controlNodeTo;
        this.body.nodeIndices.push(controlNodeTo.id);
        this._temporaryBindUI("onTouch", bind$52(_context14 = this._controlNodeTouch).call(_context14, this));
        this._temporaryBindUI("onTap", function() {
        });
        this._temporaryBindUI("onHold", function() {
        });
        this._temporaryBindUI("onDragStart", bind$52(_context15 = this._controlNodeDragStart).call(_context15, this));
        this._temporaryBindUI("onDrag", bind$52(_context16 = this._controlNodeDrag).call(_context16, this));
        this._temporaryBindUI("onDragEnd", bind$52(_context17 = this._controlNodeDragEnd).call(_context17, this));
        this._temporaryBindUI("onMouseMove", function() {
        });
        this._temporaryBindEvent("beforeDrawing", function(ctx) {
          var positions = _edge.edgeType.findBorderPositions(ctx);
          if (controlNodeFrom.selected === false) {
            controlNodeFrom.x = positions.from.x;
            controlNodeFrom.y = positions.from.y;
          }
          if (controlNodeTo.selected === false) {
            controlNodeTo.x = positions.to.x;
            controlNodeTo.y = positions.to.y;
          }
        });
        this.body.emitter.emit("_redraw");
      } else {
        this.showManipulatorToolbar();
      }
    }
  }, {
    key: "deleteSelected",
    value: function deleteSelected() {
      var _this3 = this;
      if (this.editMode !== true) {
        this.enableEditMode();
      }
      this._clean();
      this.inMode = "delete";
      var selectedNodes = this.selectionHandler.getSelectedNodeIds();
      var selectedEdges = this.selectionHandler.getSelectedEdgeIds();
      var deleteFunction = void 0;
      if (selectedNodes.length > 0) {
        for (var i = 0; i < selectedNodes.length; i++) {
          if (this.body.nodes[selectedNodes[i]].isCluster === true) {
            alert(this.options.locales[this.options.locale]["deleteClusterError"] || this.options.locales["en"]["deleteClusterError"]);
            return;
          }
        }
        if (typeof this.options.deleteNode === "function") {
          deleteFunction = this.options.deleteNode;
        }
      } else if (selectedEdges.length > 0) {
        if (typeof this.options.deleteEdge === "function") {
          deleteFunction = this.options.deleteEdge;
        }
      }
      if (typeof deleteFunction === "function") {
        var data3 = {
          nodes: selectedNodes,
          edges: selectedEdges
        };
        if (deleteFunction.length === 2) {
          deleteFunction(data3, function(finalizedData) {
            if (finalizedData !== null && finalizedData !== void 0 && _this3.inMode === "delete") {
              _this3.body.data.edges.getDataSet().remove(finalizedData.edges);
              _this3.body.data.nodes.getDataSet().remove(finalizedData.nodes);
              _this3.body.emitter.emit("startSimulation");
              _this3.showManipulatorToolbar();
            } else {
              _this3.body.emitter.emit("startSimulation");
              _this3.showManipulatorToolbar();
            }
          });
        } else {
          throw new Error("The function for delete does not support two arguments (data, callback)");
        }
      } else {
        this.body.data.edges.getDataSet().remove(selectedEdges);
        this.body.data.nodes.getDataSet().remove(selectedNodes);
        this.body.emitter.emit("startSimulation");
        this.showManipulatorToolbar();
      }
    }
  }, {
    key: "_setup",
    value: function _setup() {
      if (this.options.enabled === true) {
        this.guiEnabled = true;
        this._createWrappers();
        if (this.editMode === false) {
          this._createEditButton();
        } else {
          this.showManipulatorToolbar();
        }
      } else {
        this._removeManipulationDOM();
        this.guiEnabled = false;
      }
    }
  }, {
    key: "_createWrappers",
    value: function _createWrappers() {
      if (this.manipulationDiv === void 0) {
        this.manipulationDiv = document.createElement("div");
        this.manipulationDiv.className = "vis-manipulation";
        if (this.editMode === true) {
          this.manipulationDiv.style.display = "block";
        } else {
          this.manipulationDiv.style.display = "none";
        }
        this.canvas.frame.appendChild(this.manipulationDiv);
      }
      if (this.editModeDiv === void 0) {
        this.editModeDiv = document.createElement("div");
        this.editModeDiv.className = "vis-edit-mode";
        if (this.editMode === true) {
          this.editModeDiv.style.display = "none";
        } else {
          this.editModeDiv.style.display = "block";
        }
        this.canvas.frame.appendChild(this.editModeDiv);
      }
      if (this.closeDiv === void 0) {
        var _this$options$locales, _this$options$locales2;
        this.closeDiv = document.createElement("button");
        this.closeDiv.className = "vis-close";
        this.closeDiv.setAttribute("aria-label", (_this$options$locales = (_this$options$locales2 = this.options.locales[this.options.locale]) === null || _this$options$locales2 === void 0 ? void 0 : _this$options$locales2["close"]) !== null && _this$options$locales !== void 0 ? _this$options$locales : this.options.locales["en"]["close"]);
        this.closeDiv.style.display = this.manipulationDiv.style.display;
        this.canvas.frame.appendChild(this.closeDiv);
      }
    }
  }, {
    key: "_getNewTargetNode",
    value: function _getNewTargetNode(x, y) {
      var controlNodeStyle = deepExtend({}, this.options.controlNodeStyle);
      controlNodeStyle.id = "targetNode" + v42();
      controlNodeStyle.hidden = false;
      controlNodeStyle.physics = false;
      controlNodeStyle.x = x;
      controlNodeStyle.y = y;
      var node = this.body.functions.createNode(controlNodeStyle);
      node.shape.boundingBox = {
        left: x,
        right: x,
        top: y,
        bottom: y
      };
      return node;
    }
  }, {
    key: "_createEditButton",
    value: function _createEditButton() {
      var _context18;
      this._clean();
      this.manipulationDOM = {};
      recursiveDOMDelete(this.editModeDiv);
      var locale = this.options.locales[this.options.locale];
      var button = this._createButton("editMode", "vis-edit vis-edit-mode", locale["edit"] || this.options.locales["en"]["edit"]);
      this.editModeDiv.appendChild(button);
      this._bindElementEvents(button, bind$52(_context18 = this.toggleEditMode).call(_context18, this));
    }
  }, {
    key: "_clean",
    value: function _clean() {
      this.inMode = false;
      if (this.guiEnabled === true) {
        recursiveDOMDelete(this.editModeDiv);
        recursiveDOMDelete(this.manipulationDiv);
        this._cleanupDOMEventListeners();
      }
      this._cleanupTemporaryNodesAndEdges();
      this._unbindTemporaryUIs();
      this._unbindTemporaryEvents();
      this.body.emitter.emit("restorePhysics");
    }
  }, {
    key: "_cleanupDOMEventListeners",
    value: function _cleanupDOMEventListeners() {
      var _context19;
      var _iterator = _createForOfIteratorHelper2(splice$12(_context19 = this._domEventListenerCleanupQueue).call(_context19, 0)), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var callback = _step.value;
          callback();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "_removeManipulationDOM",
    value: function _removeManipulationDOM() {
      this._clean();
      recursiveDOMDelete(this.manipulationDiv);
      recursiveDOMDelete(this.editModeDiv);
      recursiveDOMDelete(this.closeDiv);
      if (this.manipulationDiv) {
        this.canvas.frame.removeChild(this.manipulationDiv);
      }
      if (this.editModeDiv) {
        this.canvas.frame.removeChild(this.editModeDiv);
      }
      if (this.closeDiv) {
        this.canvas.frame.removeChild(this.closeDiv);
      }
      this.manipulationDiv = void 0;
      this.editModeDiv = void 0;
      this.closeDiv = void 0;
    }
  }, {
    key: "_createSeperator",
    value: function _createSeperator() {
      var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
      this.manipulationDOM["seperatorLineDiv" + index2] = document.createElement("div");
      this.manipulationDOM["seperatorLineDiv" + index2].className = "vis-separator-line";
      this.manipulationDiv.appendChild(this.manipulationDOM["seperatorLineDiv" + index2]);
    }
  }, {
    key: "_createAddNodeButton",
    value: function _createAddNodeButton(locale) {
      var _context20;
      var button = this._createButton("addNode", "vis-add", locale["addNode"] || this.options.locales["en"]["addNode"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, bind$52(_context20 = this.addNodeMode).call(_context20, this));
    }
  }, {
    key: "_createAddEdgeButton",
    value: function _createAddEdgeButton(locale) {
      var _context21;
      var button = this._createButton("addEdge", "vis-connect", locale["addEdge"] || this.options.locales["en"]["addEdge"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, bind$52(_context21 = this.addEdgeMode).call(_context21, this));
    }
  }, {
    key: "_createEditNodeButton",
    value: function _createEditNodeButton(locale) {
      var _context22;
      var button = this._createButton("editNode", "vis-edit", locale["editNode"] || this.options.locales["en"]["editNode"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, bind$52(_context22 = this.editNode).call(_context22, this));
    }
  }, {
    key: "_createEditEdgeButton",
    value: function _createEditEdgeButton(locale) {
      var _context23;
      var button = this._createButton("editEdge", "vis-edit", locale["editEdge"] || this.options.locales["en"]["editEdge"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, bind$52(_context23 = this.editEdgeMode).call(_context23, this));
    }
  }, {
    key: "_createDeleteButton",
    value: function _createDeleteButton(locale) {
      var _context24;
      var deleteBtnClass;
      if (this.options.rtl) {
        deleteBtnClass = "vis-delete-rtl";
      } else {
        deleteBtnClass = "vis-delete";
      }
      var button = this._createButton("delete", deleteBtnClass, locale["del"] || this.options.locales["en"]["del"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, bind$52(_context24 = this.deleteSelected).call(_context24, this));
    }
  }, {
    key: "_createBackButton",
    value: function _createBackButton(locale) {
      var _context25;
      var button = this._createButton("back", "vis-back", locale["back"] || this.options.locales["en"]["back"]);
      this.manipulationDiv.appendChild(button);
      this._bindElementEvents(button, bind$52(_context25 = this.showManipulatorToolbar).call(_context25, this));
    }
  }, {
    key: "_createButton",
    value: function _createButton(id3, className, label) {
      var labelClassName = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "vis-label";
      this.manipulationDOM[id3 + "Div"] = document.createElement("button");
      this.manipulationDOM[id3 + "Div"].className = "vis-button " + className;
      this.manipulationDOM[id3 + "Label"] = document.createElement("div");
      this.manipulationDOM[id3 + "Label"].className = labelClassName;
      this.manipulationDOM[id3 + "Label"].innerText = label;
      this.manipulationDOM[id3 + "Div"].appendChild(this.manipulationDOM[id3 + "Label"]);
      return this.manipulationDOM[id3 + "Div"];
    }
  }, {
    key: "_createDescription",
    value: function _createDescription(label) {
      this.manipulationDOM["descriptionLabel"] = document.createElement("div");
      this.manipulationDOM["descriptionLabel"].className = "vis-none";
      this.manipulationDOM["descriptionLabel"].innerText = label;
      this.manipulationDiv.appendChild(this.manipulationDOM["descriptionLabel"]);
    }
  }, {
    key: "_temporaryBindEvent",
    value: function _temporaryBindEvent(event, newFunction) {
      this.temporaryEventFunctions.push({
        event,
        boundFunction: newFunction
      });
      this.body.emitter.on(event, newFunction);
    }
  }, {
    key: "_temporaryBindUI",
    value: function _temporaryBindUI(UIfunctionName, newFunction) {
      if (this.body.eventListeners[UIfunctionName] !== void 0) {
        this.temporaryUIFunctions[UIfunctionName] = this.body.eventListeners[UIfunctionName];
        this.body.eventListeners[UIfunctionName] = newFunction;
      } else {
        throw new Error("This UI function does not exist. Typo? You tried: " + UIfunctionName + " possible are: " + stringify$12(keys6(this.body.eventListeners)));
      }
    }
  }, {
    key: "_unbindTemporaryUIs",
    value: function _unbindTemporaryUIs() {
      for (var functionName3 in this.temporaryUIFunctions) {
        if (Object.prototype.hasOwnProperty.call(this.temporaryUIFunctions, functionName3)) {
          this.body.eventListeners[functionName3] = this.temporaryUIFunctions[functionName3];
          delete this.temporaryUIFunctions[functionName3];
        }
      }
      this.temporaryUIFunctions = {};
    }
  }, {
    key: "_unbindTemporaryEvents",
    value: function _unbindTemporaryEvents() {
      for (var i = 0; i < this.temporaryEventFunctions.length; i++) {
        var eventName = this.temporaryEventFunctions[i].event;
        var boundFunction = this.temporaryEventFunctions[i].boundFunction;
        this.body.emitter.off(eventName, boundFunction);
      }
      this.temporaryEventFunctions = [];
    }
  }, {
    key: "_bindElementEvents",
    value: function _bindElementEvents(domElement, boundFunction) {
      var hammer = new Hammer2(domElement, {});
      onTouch(hammer, boundFunction);
      this._domEventListenerCleanupQueue.push(function() {
        hammer.destroy();
      });
      var keyupListener = function keyupListener2(_ref) {
        var keyCode = _ref.keyCode, key = _ref.key;
        if (key === "Enter" || key === " " || keyCode === 13 || keyCode === 32) {
          boundFunction();
        }
      };
      domElement.addEventListener("keyup", keyupListener, false);
      this._domEventListenerCleanupQueue.push(function() {
        domElement.removeEventListener("keyup", keyupListener, false);
      });
    }
  }, {
    key: "_cleanupTemporaryNodesAndEdges",
    value: function _cleanupTemporaryNodesAndEdges() {
      for (var i = 0; i < this.temporaryIds.edges.length; i++) {
        var _context26;
        this.body.edges[this.temporaryIds.edges[i]].disconnect();
        delete this.body.edges[this.temporaryIds.edges[i]];
        var indexTempEdge = indexOf4(_context26 = this.body.edgeIndices).call(_context26, this.temporaryIds.edges[i]);
        if (indexTempEdge !== -1) {
          var _context27;
          splice$12(_context27 = this.body.edgeIndices).call(_context27, indexTempEdge, 1);
        }
      }
      for (var _i = 0; _i < this.temporaryIds.nodes.length; _i++) {
        var _context28;
        delete this.body.nodes[this.temporaryIds.nodes[_i]];
        var indexTempNode = indexOf4(_context28 = this.body.nodeIndices).call(_context28, this.temporaryIds.nodes[_i]);
        if (indexTempNode !== -1) {
          var _context29;
          splice$12(_context29 = this.body.nodeIndices).call(_context29, indexTempNode, 1);
        }
      }
      this.temporaryIds = {
        nodes: [],
        edges: []
      };
    }
  }, {
    key: "_controlNodeTouch",
    value: function _controlNodeTouch(event) {
      this.selectionHandler.unselectAll();
      this.lastTouch = this.body.functions.getPointer(event.center);
      this.lastTouch.translation = assign$22({}, this.body.view.translation);
    }
  }, {
    key: "_controlNodeDragStart",
    value: function _controlNodeDragStart() {
      var pointer = this.lastTouch;
      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
      var from5 = this.body.nodes[this.temporaryIds.nodes[0]];
      var to = this.body.nodes[this.temporaryIds.nodes[1]];
      var edge = this.body.edges[this.edgeBeingEditedId];
      this.selectedControlNode = void 0;
      var fromSelect = from5.isOverlappingWith(pointerObj);
      var toSelect = to.isOverlappingWith(pointerObj);
      if (fromSelect === true) {
        this.selectedControlNode = from5;
        edge.edgeType.from = from5;
      } else if (toSelect === true) {
        this.selectedControlNode = to;
        edge.edgeType.to = to;
      }
      if (this.selectedControlNode !== void 0) {
        this.selectionHandler.selectObject(this.selectedControlNode);
      }
      this.body.emitter.emit("_redraw");
    }
  }, {
    key: "_controlNodeDrag",
    value: function _controlNodeDrag(event) {
      this.body.emitter.emit("disablePhysics");
      var pointer = this.body.functions.getPointer(event.center);
      var pos = this.canvas.DOMtoCanvas(pointer);
      if (this.selectedControlNode !== void 0) {
        this.selectedControlNode.x = pos.x;
        this.selectedControlNode.y = pos.y;
      } else {
        this.interactionHandler.onDrag(event);
      }
      this.body.emitter.emit("_redraw");
    }
  }, {
    key: "_controlNodeDragEnd",
    value: function _controlNodeDragEnd(event) {
      var pointer = this.body.functions.getPointer(event.center);
      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
      var edge = this.body.edges[this.edgeBeingEditedId];
      if (this.selectedControlNode === void 0) {
        return;
      }
      this.selectionHandler.unselectAll();
      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
      var node = void 0;
      for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {
        if (overlappingNodeIds[i] !== this.selectedControlNode.id) {
          node = this.body.nodes[overlappingNodeIds[i]];
          break;
        }
      }
      if (node !== void 0 && this.selectedControlNode !== void 0) {
        if (node.isCluster === true) {
          alert(this.options.locales[this.options.locale]["createEdgeError"] || this.options.locales["en"]["createEdgeError"]);
        } else {
          var from5 = this.body.nodes[this.temporaryIds.nodes[0]];
          if (this.selectedControlNode.id === from5.id) {
            this._performEditEdge(node.id, edge.to.id);
          } else {
            this._performEditEdge(edge.from.id, node.id);
          }
        }
      } else {
        edge.updateEdgeType();
        this.body.emitter.emit("restorePhysics");
      }
      this.body.emitter.emit("_redraw");
    }
  }, {
    key: "_handleConnect",
    value: function _handleConnect(event) {
      if (new Date().valueOf() - this.touchTime > 100) {
        this.lastTouch = this.body.functions.getPointer(event.center);
        this.lastTouch.translation = assign$22({}, this.body.view.translation);
        this.interactionHandler.drag.pointer = this.lastTouch;
        this.interactionHandler.drag.translation = this.lastTouch.translation;
        var pointer = this.lastTouch;
        var node = this.selectionHandler.getNodeAt(pointer);
        if (node !== void 0) {
          if (node.isCluster === true) {
            alert(this.options.locales[this.options.locale]["createEdgeError"] || this.options.locales["en"]["createEdgeError"]);
          } else {
            var targetNode = this._getNewTargetNode(node.x, node.y);
            this.body.nodes[targetNode.id] = targetNode;
            this.body.nodeIndices.push(targetNode.id);
            var connectionEdge = this.body.functions.createEdge({
              id: "connectionEdge" + v42(),
              from: node.id,
              to: targetNode.id,
              physics: false,
              smooth: {
                enabled: true,
                type: "continuous",
                roundness: 0.5
              }
            });
            this.body.edges[connectionEdge.id] = connectionEdge;
            this.body.edgeIndices.push(connectionEdge.id);
            this.temporaryIds.nodes.push(targetNode.id);
            this.temporaryIds.edges.push(connectionEdge.id);
          }
        }
        this.touchTime = new Date().valueOf();
      }
    }
  }, {
    key: "_dragControlNode",
    value: function _dragControlNode(event) {
      var pointer = this.body.functions.getPointer(event.center);
      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
      var connectFromId = void 0;
      if (this.temporaryIds.edges[0] !== void 0) {
        connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;
      }
      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
      var node = void 0;
      for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {
        var _context30;
        if (indexOf4(_context30 = this.temporaryIds.nodes).call(_context30, overlappingNodeIds[i]) === -1) {
          node = this.body.nodes[overlappingNodeIds[i]];
          break;
        }
      }
      event.controlEdge = {
        from: connectFromId,
        to: node ? node.id : void 0
      };
      this.selectionHandler.generateClickEvent("controlNodeDragging", event, pointer);
      if (this.temporaryIds.nodes[0] !== void 0) {
        var targetNode = this.body.nodes[this.temporaryIds.nodes[0]];
        targetNode.x = this.canvas._XconvertDOMtoCanvas(pointer.x);
        targetNode.y = this.canvas._YconvertDOMtoCanvas(pointer.y);
        this.body.emitter.emit("_redraw");
      } else {
        this.interactionHandler.onDrag(event);
      }
    }
  }, {
    key: "_finishConnect",
    value: function _finishConnect(event) {
      var pointer = this.body.functions.getPointer(event.center);
      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
      var connectFromId = void 0;
      if (this.temporaryIds.edges[0] !== void 0) {
        connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;
      }
      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
      var node = void 0;
      for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {
        var _context31;
        if (indexOf4(_context31 = this.temporaryIds.nodes).call(_context31, overlappingNodeIds[i]) === -1) {
          node = this.body.nodes[overlappingNodeIds[i]];
          break;
        }
      }
      this._cleanupTemporaryNodesAndEdges();
      if (node !== void 0) {
        if (node.isCluster === true) {
          alert(this.options.locales[this.options.locale]["createEdgeError"] || this.options.locales["en"]["createEdgeError"]);
        } else {
          if (this.body.nodes[connectFromId] !== void 0 && this.body.nodes[node.id] !== void 0) {
            this._performAddEdge(connectFromId, node.id);
          }
        }
      }
      event.controlEdge = {
        from: connectFromId,
        to: node ? node.id : void 0
      };
      this.selectionHandler.generateClickEvent("controlNodeDragEnd", event, pointer);
      this.body.emitter.emit("_redraw");
    }
  }, {
    key: "_dragStartEdge",
    value: function _dragStartEdge(event) {
      var pointer = this.lastTouch;
      this.selectionHandler.generateClickEvent("dragStart", event, pointer, void 0, true);
    }
  }, {
    key: "_performAddNode",
    value: function _performAddNode(clickData) {
      var _this4 = this;
      var defaultData = {
        id: v42(),
        x: clickData.pointer.canvas.x,
        y: clickData.pointer.canvas.y,
        label: "new"
      };
      if (typeof this.options.addNode === "function") {
        if (this.options.addNode.length === 2) {
          this.options.addNode(defaultData, function(finalizedData) {
            if (finalizedData !== null && finalizedData !== void 0 && _this4.inMode === "addNode") {
              _this4.body.data.nodes.getDataSet().add(finalizedData);
            }
            _this4.showManipulatorToolbar();
          });
        } else {
          this.showManipulatorToolbar();
          throw new Error("The function for add does not support two arguments (data,callback)");
        }
      } else {
        this.body.data.nodes.getDataSet().add(defaultData);
        this.showManipulatorToolbar();
      }
    }
  }, {
    key: "_performAddEdge",
    value: function _performAddEdge(sourceNodeId, targetNodeId) {
      var _this5 = this;
      var defaultData = {
        from: sourceNodeId,
        to: targetNodeId
      };
      if (typeof this.options.addEdge === "function") {
        if (this.options.addEdge.length === 2) {
          this.options.addEdge(defaultData, function(finalizedData) {
            if (finalizedData !== null && finalizedData !== void 0 && _this5.inMode === "addEdge") {
              _this5.body.data.edges.getDataSet().add(finalizedData);
              _this5.selectionHandler.unselectAll();
              _this5.showManipulatorToolbar();
            }
          });
        } else {
          throw new Error("The function for connect does not support two arguments (data,callback)");
        }
      } else {
        this.body.data.edges.getDataSet().add(defaultData);
        this.selectionHandler.unselectAll();
        this.showManipulatorToolbar();
      }
    }
  }, {
    key: "_performEditEdge",
    value: function _performEditEdge(sourceNodeId, targetNodeId) {
      var _this6 = this;
      var defaultData = {
        id: this.edgeBeingEditedId,
        from: sourceNodeId,
        to: targetNodeId,
        label: this.body.data.edges.get(this.edgeBeingEditedId).label
      };
      var eeFunct = this.options.editEdge;
      if (_typeof2(eeFunct) === "object") {
        eeFunct = eeFunct.editWithoutDrag;
      }
      if (typeof eeFunct === "function") {
        if (eeFunct.length === 2) {
          eeFunct(defaultData, function(finalizedData) {
            if (finalizedData === null || finalizedData === void 0 || _this6.inMode !== "editEdge") {
              _this6.body.edges[defaultData.id].updateEdgeType();
              _this6.body.emitter.emit("_redraw");
              _this6.showManipulatorToolbar();
            } else {
              _this6.body.data.edges.getDataSet().update(finalizedData);
              _this6.selectionHandler.unselectAll();
              _this6.showManipulatorToolbar();
            }
          });
        } else {
          throw new Error("The function for edit does not support two arguments (data, callback)");
        }
      } else {
        this.body.data.edges.getDataSet().update(defaultData);
        this.selectionHandler.unselectAll();
        this.showManipulatorToolbar();
      }
    }
  }]);
  return ManipulationSystem2;
}();
var string = "string";
var bool = "boolean";
var number = "number";
var array = "array";
var object = "object";
var dom = "dom";
var any = "any";
var endPoints = ["arrow", "bar", "box", "circle", "crow", "curve", "diamond", "image", "inv_curve", "inv_triangle", "triangle", "vee"];
var nodeOptions = {
  borderWidth: {
    number
  },
  borderWidthSelected: {
    number,
    undefined: "undefined"
  },
  brokenImage: {
    string,
    undefined: "undefined"
  },
  chosen: {
    label: {
      boolean: bool,
      function: "function"
    },
    node: {
      boolean: bool,
      function: "function"
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  color: {
    border: {
      string
    },
    background: {
      string
    },
    highlight: {
      border: {
        string
      },
      background: {
        string
      },
      __type__: {
        object,
        string
      }
    },
    hover: {
      border: {
        string
      },
      background: {
        string
      },
      __type__: {
        object,
        string
      }
    },
    __type__: {
      object,
      string
    }
  },
  opacity: {
    number,
    undefined: "undefined"
  },
  fixed: {
    x: {
      boolean: bool
    },
    y: {
      boolean: bool
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  font: {
    align: {
      string
    },
    color: {
      string
    },
    size: {
      number
    },
    face: {
      string
    },
    background: {
      string
    },
    strokeWidth: {
      number
    },
    strokeColor: {
      string
    },
    vadjust: {
      number
    },
    multi: {
      boolean: bool,
      string
    },
    bold: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    boldital: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    ital: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    mono: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      mod: {
        string
      },
      vadjust: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    __type__: {
      object,
      string
    }
  },
  group: {
    string,
    number,
    undefined: "undefined"
  },
  heightConstraint: {
    minimum: {
      number
    },
    valign: {
      string
    },
    __type__: {
      object,
      boolean: bool,
      number
    }
  },
  hidden: {
    boolean: bool
  },
  icon: {
    face: {
      string
    },
    code: {
      string
    },
    size: {
      number
    },
    color: {
      string
    },
    weight: {
      string,
      number
    },
    __type__: {
      object
    }
  },
  id: {
    string,
    number
  },
  image: {
    selected: {
      string,
      undefined: "undefined"
    },
    unselected: {
      string,
      undefined: "undefined"
    },
    __type__: {
      object,
      string
    }
  },
  imagePadding: {
    top: {
      number
    },
    right: {
      number
    },
    bottom: {
      number
    },
    left: {
      number
    },
    __type__: {
      object,
      number
    }
  },
  label: {
    string,
    undefined: "undefined"
  },
  labelHighlightBold: {
    boolean: bool
  },
  level: {
    number,
    undefined: "undefined"
  },
  margin: {
    top: {
      number
    },
    right: {
      number
    },
    bottom: {
      number
    },
    left: {
      number
    },
    __type__: {
      object,
      number
    }
  },
  mass: {
    number
  },
  physics: {
    boolean: bool
  },
  scaling: {
    min: {
      number
    },
    max: {
      number
    },
    label: {
      enabled: {
        boolean: bool
      },
      min: {
        number
      },
      max: {
        number
      },
      maxVisible: {
        number
      },
      drawThreshold: {
        number
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    customScalingFunction: {
      function: "function"
    },
    __type__: {
      object
    }
  },
  shadow: {
    enabled: {
      boolean: bool
    },
    color: {
      string
    },
    size: {
      number
    },
    x: {
      number
    },
    y: {
      number
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  shape: {
    string: ["custom", "ellipse", "circle", "database", "box", "text", "image", "circularImage", "diamond", "dot", "star", "triangle", "triangleDown", "square", "icon", "hexagon"]
  },
  ctxRenderer: {
    function: "function"
  },
  shapeProperties: {
    borderDashes: {
      boolean: bool,
      array
    },
    borderRadius: {
      number
    },
    interpolation: {
      boolean: bool
    },
    useImageSize: {
      boolean: bool
    },
    useBorderWithImage: {
      boolean: bool
    },
    coordinateOrigin: {
      string: ["center", "top-left"]
    },
    __type__: {
      object
    }
  },
  size: {
    number
  },
  title: {
    string,
    dom,
    undefined: "undefined"
  },
  value: {
    number,
    undefined: "undefined"
  },
  widthConstraint: {
    minimum: {
      number
    },
    maximum: {
      number
    },
    __type__: {
      object,
      boolean: bool,
      number
    }
  },
  x: {
    number
  },
  y: {
    number
  },
  __type__: {
    object
  }
};
var allOptions = {
  configure: {
    enabled: {
      boolean: bool
    },
    filter: {
      boolean: bool,
      string,
      array,
      function: "function"
    },
    container: {
      dom
    },
    showButton: {
      boolean: bool
    },
    __type__: {
      object,
      boolean: bool,
      string,
      array,
      function: "function"
    }
  },
  edges: {
    arrows: {
      to: {
        enabled: {
          boolean: bool
        },
        scaleFactor: {
          number
        },
        type: {
          string: endPoints
        },
        imageHeight: {
          number
        },
        imageWidth: {
          number
        },
        src: {
          string
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      middle: {
        enabled: {
          boolean: bool
        },
        scaleFactor: {
          number
        },
        type: {
          string: endPoints
        },
        imageWidth: {
          number
        },
        imageHeight: {
          number
        },
        src: {
          string
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      from: {
        enabled: {
          boolean: bool
        },
        scaleFactor: {
          number
        },
        type: {
          string: endPoints
        },
        imageWidth: {
          number
        },
        imageHeight: {
          number
        },
        src: {
          string
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      __type__: {
        string: ["from", "to", "middle"],
        object
      }
    },
    endPointOffset: {
      from: {
        number
      },
      to: {
        number
      },
      __type__: {
        object,
        number
      }
    },
    arrowStrikethrough: {
      boolean: bool
    },
    background: {
      enabled: {
        boolean: bool
      },
      color: {
        string
      },
      size: {
        number
      },
      dashes: {
        boolean: bool,
        array
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    chosen: {
      label: {
        boolean: bool,
        function: "function"
      },
      edge: {
        boolean: bool,
        function: "function"
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    color: {
      color: {
        string
      },
      highlight: {
        string
      },
      hover: {
        string
      },
      inherit: {
        string: ["from", "to", "both"],
        boolean: bool
      },
      opacity: {
        number
      },
      __type__: {
        object,
        string
      }
    },
    dashes: {
      boolean: bool,
      array
    },
    font: {
      color: {
        string
      },
      size: {
        number
      },
      face: {
        string
      },
      background: {
        string
      },
      strokeWidth: {
        number
      },
      strokeColor: {
        string
      },
      align: {
        string: ["horizontal", "top", "middle", "bottom"]
      },
      vadjust: {
        number
      },
      multi: {
        boolean: bool,
        string
      },
      bold: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      boldital: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      ital: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      mono: {
        color: {
          string
        },
        size: {
          number
        },
        face: {
          string
        },
        mod: {
          string
        },
        vadjust: {
          number
        },
        __type__: {
          object,
          string
        }
      },
      __type__: {
        object,
        string
      }
    },
    hidden: {
      boolean: bool
    },
    hoverWidth: {
      function: "function",
      number
    },
    label: {
      string,
      undefined: "undefined"
    },
    labelHighlightBold: {
      boolean: bool
    },
    length: {
      number,
      undefined: "undefined"
    },
    physics: {
      boolean: bool
    },
    scaling: {
      min: {
        number
      },
      max: {
        number
      },
      label: {
        enabled: {
          boolean: bool
        },
        min: {
          number
        },
        max: {
          number
        },
        maxVisible: {
          number
        },
        drawThreshold: {
          number
        },
        __type__: {
          object,
          boolean: bool
        }
      },
      customScalingFunction: {
        function: "function"
      },
      __type__: {
        object
      }
    },
    selectionWidth: {
      function: "function",
      number
    },
    selfReferenceSize: {
      number
    },
    selfReference: {
      size: {
        number
      },
      angle: {
        number
      },
      renderBehindTheNode: {
        boolean: bool
      },
      __type__: {
        object
      }
    },
    shadow: {
      enabled: {
        boolean: bool
      },
      color: {
        string
      },
      size: {
        number
      },
      x: {
        number
      },
      y: {
        number
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    smooth: {
      enabled: {
        boolean: bool
      },
      type: {
        string: ["dynamic", "continuous", "discrete", "diagonalCross", "straightCross", "horizontal", "vertical", "curvedCW", "curvedCCW", "cubicBezier"]
      },
      roundness: {
        number
      },
      forceDirection: {
        string: ["horizontal", "vertical", "none"],
        boolean: bool
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    title: {
      string,
      undefined: "undefined"
    },
    width: {
      number
    },
    widthConstraint: {
      maximum: {
        number
      },
      __type__: {
        object,
        boolean: bool,
        number
      }
    },
    value: {
      number,
      undefined: "undefined"
    },
    __type__: {
      object
    }
  },
  groups: {
    useDefaultGroups: {
      boolean: bool
    },
    __any__: nodeOptions,
    __type__: {
      object
    }
  },
  interaction: {
    dragNodes: {
      boolean: bool
    },
    dragView: {
      boolean: bool
    },
    hideEdgesOnDrag: {
      boolean: bool
    },
    hideEdgesOnZoom: {
      boolean: bool
    },
    hideNodesOnDrag: {
      boolean: bool
    },
    hover: {
      boolean: bool
    },
    keyboard: {
      enabled: {
        boolean: bool
      },
      speed: {
        x: {
          number
        },
        y: {
          number
        },
        zoom: {
          number
        },
        __type__: {
          object
        }
      },
      bindToWindow: {
        boolean: bool
      },
      autoFocus: {
        boolean: bool
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    multiselect: {
      boolean: bool
    },
    navigationButtons: {
      boolean: bool
    },
    selectable: {
      boolean: bool
    },
    selectConnectedEdges: {
      boolean: bool
    },
    hoverConnectedEdges: {
      boolean: bool
    },
    tooltipDelay: {
      number
    },
    zoomView: {
      boolean: bool
    },
    zoomSpeed: {
      number
    },
    __type__: {
      object
    }
  },
  layout: {
    randomSeed: {
      undefined: "undefined",
      number,
      string
    },
    improvedLayout: {
      boolean: bool
    },
    clusterThreshold: {
      number
    },
    hierarchical: {
      enabled: {
        boolean: bool
      },
      levelSeparation: {
        number
      },
      nodeSpacing: {
        number
      },
      treeSpacing: {
        number
      },
      blockShifting: {
        boolean: bool
      },
      edgeMinimization: {
        boolean: bool
      },
      parentCentralization: {
        boolean: bool
      },
      direction: {
        string: ["UD", "DU", "LR", "RL"]
      },
      sortMethod: {
        string: ["hubsize", "directed"]
      },
      shakeTowards: {
        string: ["leaves", "roots"]
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    __type__: {
      object
    }
  },
  manipulation: {
    enabled: {
      boolean: bool
    },
    initiallyActive: {
      boolean: bool
    },
    addNode: {
      boolean: bool,
      function: "function"
    },
    addEdge: {
      boolean: bool,
      function: "function"
    },
    editNode: {
      function: "function"
    },
    editEdge: {
      editWithoutDrag: {
        function: "function"
      },
      __type__: {
        object,
        boolean: bool,
        function: "function"
      }
    },
    deleteNode: {
      boolean: bool,
      function: "function"
    },
    deleteEdge: {
      boolean: bool,
      function: "function"
    },
    controlNodeStyle: nodeOptions,
    __type__: {
      object,
      boolean: bool
    }
  },
  nodes: nodeOptions,
  physics: {
    enabled: {
      boolean: bool
    },
    barnesHut: {
      theta: {
        number
      },
      gravitationalConstant: {
        number
      },
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      damping: {
        number
      },
      avoidOverlap: {
        number
      },
      __type__: {
        object
      }
    },
    forceAtlas2Based: {
      theta: {
        number
      },
      gravitationalConstant: {
        number
      },
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      damping: {
        number
      },
      avoidOverlap: {
        number
      },
      __type__: {
        object
      }
    },
    repulsion: {
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      nodeDistance: {
        number
      },
      damping: {
        number
      },
      __type__: {
        object
      }
    },
    hierarchicalRepulsion: {
      centralGravity: {
        number
      },
      springLength: {
        number
      },
      springConstant: {
        number
      },
      nodeDistance: {
        number
      },
      damping: {
        number
      },
      avoidOverlap: {
        number
      },
      __type__: {
        object
      }
    },
    maxVelocity: {
      number
    },
    minVelocity: {
      number
    },
    solver: {
      string: ["barnesHut", "repulsion", "hierarchicalRepulsion", "forceAtlas2Based"]
    },
    stabilization: {
      enabled: {
        boolean: bool
      },
      iterations: {
        number
      },
      updateInterval: {
        number
      },
      onlyDynamicEdges: {
        boolean: bool
      },
      fit: {
        boolean: bool
      },
      __type__: {
        object,
        boolean: bool
      }
    },
    timestep: {
      number
    },
    adaptiveTimestep: {
      boolean: bool
    },
    wind: {
      x: {
        number
      },
      y: {
        number
      },
      __type__: {
        object
      }
    },
    __type__: {
      object,
      boolean: bool
    }
  },
  autoResize: {
    boolean: bool
  },
  clickToUse: {
    boolean: bool
  },
  locale: {
    string
  },
  locales: {
    __any__: {
      any
    },
    __type__: {
      object
    }
  },
  height: {
    string
  },
  width: {
    string
  },
  __type__: {
    object
  }
};
var configureOptions = {
  nodes: {
    borderWidth: [1, 0, 10, 1],
    borderWidthSelected: [2, 0, 10, 1],
    color: {
      border: ["color", "#2B7CE9"],
      background: ["color", "#97C2FC"],
      highlight: {
        border: ["color", "#2B7CE9"],
        background: ["color", "#D2E5FF"]
      },
      hover: {
        border: ["color", "#2B7CE9"],
        background: ["color", "#D2E5FF"]
      }
    },
    opacity: [0, 0, 1, 0.1],
    fixed: {
      x: false,
      y: false
    },
    font: {
      color: ["color", "#343434"],
      size: [14, 0, 100, 1],
      face: ["arial", "verdana", "tahoma"],
      background: ["color", "none"],
      strokeWidth: [0, 0, 50, 1],
      strokeColor: ["color", "#ffffff"]
    },
    hidden: false,
    labelHighlightBold: true,
    physics: true,
    scaling: {
      min: [10, 0, 200, 1],
      max: [30, 0, 200, 1],
      label: {
        enabled: false,
        min: [14, 0, 200, 1],
        max: [30, 0, 200, 1],
        maxVisible: [30, 0, 200, 1],
        drawThreshold: [5, 0, 20, 1]
      }
    },
    shadow: {
      enabled: false,
      color: "rgba(0,0,0,0.5)",
      size: [10, 0, 20, 1],
      x: [5, -30, 30, 1],
      y: [5, -30, 30, 1]
    },
    shape: ["ellipse", "box", "circle", "database", "diamond", "dot", "square", "star", "text", "triangle", "triangleDown", "hexagon"],
    shapeProperties: {
      borderDashes: false,
      borderRadius: [6, 0, 20, 1],
      interpolation: true,
      useImageSize: false
    },
    size: [25, 0, 200, 1]
  },
  edges: {
    arrows: {
      to: {
        enabled: false,
        scaleFactor: [1, 0, 3, 0.05],
        type: "arrow"
      },
      middle: {
        enabled: false,
        scaleFactor: [1, 0, 3, 0.05],
        type: "arrow"
      },
      from: {
        enabled: false,
        scaleFactor: [1, 0, 3, 0.05],
        type: "arrow"
      }
    },
    endPointOffset: {
      from: [0, -10, 10, 1],
      to: [0, -10, 10, 1]
    },
    arrowStrikethrough: true,
    color: {
      color: ["color", "#848484"],
      highlight: ["color", "#848484"],
      hover: ["color", "#848484"],
      inherit: ["from", "to", "both", true, false],
      opacity: [1, 0, 1, 0.05]
    },
    dashes: false,
    font: {
      color: ["color", "#343434"],
      size: [14, 0, 100, 1],
      face: ["arial", "verdana", "tahoma"],
      background: ["color", "none"],
      strokeWidth: [2, 0, 50, 1],
      strokeColor: ["color", "#ffffff"],
      align: ["horizontal", "top", "middle", "bottom"]
    },
    hidden: false,
    hoverWidth: [1.5, 0, 5, 0.1],
    labelHighlightBold: true,
    physics: true,
    scaling: {
      min: [1, 0, 100, 1],
      max: [15, 0, 100, 1],
      label: {
        enabled: true,
        min: [14, 0, 200, 1],
        max: [30, 0, 200, 1],
        maxVisible: [30, 0, 200, 1],
        drawThreshold: [5, 0, 20, 1]
      }
    },
    selectionWidth: [1.5, 0, 5, 0.1],
    selfReferenceSize: [20, 0, 200, 1],
    selfReference: {
      size: [20, 0, 200, 1],
      angle: [Math.PI / 2, -6 * Math.PI, 6 * Math.PI, Math.PI / 8],
      renderBehindTheNode: true
    },
    shadow: {
      enabled: false,
      color: "rgba(0,0,0,0.5)",
      size: [10, 0, 20, 1],
      x: [5, -30, 30, 1],
      y: [5, -30, 30, 1]
    },
    smooth: {
      enabled: true,
      type: ["dynamic", "continuous", "discrete", "diagonalCross", "straightCross", "horizontal", "vertical", "curvedCW", "curvedCCW", "cubicBezier"],
      forceDirection: ["horizontal", "vertical", "none"],
      roundness: [0.5, 0, 1, 0.05]
    },
    width: [1, 0, 30, 1]
  },
  layout: {
    hierarchical: {
      enabled: false,
      levelSeparation: [150, 20, 500, 5],
      nodeSpacing: [100, 20, 500, 5],
      treeSpacing: [200, 20, 500, 5],
      blockShifting: true,
      edgeMinimization: true,
      parentCentralization: true,
      direction: ["UD", "DU", "LR", "RL"],
      sortMethod: ["hubsize", "directed"],
      shakeTowards: ["leaves", "roots"]
    }
  },
  interaction: {
    dragNodes: true,
    dragView: true,
    hideEdgesOnDrag: false,
    hideEdgesOnZoom: false,
    hideNodesOnDrag: false,
    hover: false,
    keyboard: {
      enabled: false,
      speed: {
        x: [10, 0, 40, 1],
        y: [10, 0, 40, 1],
        zoom: [0.02, 0, 0.1, 5e-3]
      },
      bindToWindow: true,
      autoFocus: true
    },
    multiselect: false,
    navigationButtons: false,
    selectable: true,
    selectConnectedEdges: true,
    hoverConnectedEdges: true,
    tooltipDelay: [300, 0, 1e3, 25],
    zoomView: true,
    zoomSpeed: [1, 0.1, 2, 0.1]
  },
  manipulation: {
    enabled: false,
    initiallyActive: false
  },
  physics: {
    enabled: true,
    barnesHut: {
      theta: [0.5, 0.1, 1, 0.05],
      gravitationalConstant: [-2e3, -3e4, 0, 50],
      centralGravity: [0.3, 0, 10, 0.05],
      springLength: [95, 0, 500, 5],
      springConstant: [0.04, 0, 1.2, 5e-3],
      damping: [0.09, 0, 1, 0.01],
      avoidOverlap: [0, 0, 1, 0.01]
    },
    forceAtlas2Based: {
      theta: [0.5, 0.1, 1, 0.05],
      gravitationalConstant: [-50, -500, 0, 1],
      centralGravity: [0.01, 0, 1, 5e-3],
      springLength: [95, 0, 500, 5],
      springConstant: [0.08, 0, 1.2, 5e-3],
      damping: [0.4, 0, 1, 0.01],
      avoidOverlap: [0, 0, 1, 0.01]
    },
    repulsion: {
      centralGravity: [0.2, 0, 10, 0.05],
      springLength: [200, 0, 500, 5],
      springConstant: [0.05, 0, 1.2, 5e-3],
      nodeDistance: [100, 0, 500, 5],
      damping: [0.09, 0, 1, 0.01]
    },
    hierarchicalRepulsion: {
      centralGravity: [0.2, 0, 10, 0.05],
      springLength: [100, 0, 500, 5],
      springConstant: [0.01, 0, 1.2, 5e-3],
      nodeDistance: [120, 0, 500, 5],
      damping: [0.09, 0, 1, 0.01],
      avoidOverlap: [0, 0, 1, 0.01]
    },
    maxVelocity: [50, 0, 150, 1],
    minVelocity: [0.1, 0.01, 0.5, 0.01],
    solver: ["barnesHut", "forceAtlas2Based", "repulsion", "hierarchicalRepulsion"],
    timestep: [0.5, 0.01, 1, 0.01],
    wind: {
      x: [0, -10, 10, 0.1],
      y: [0, -10, 10, 0.1]
    }
  }
};
var configuratorHideOption = function configuratorHideOption2(parentPath, optionName, options2) {
  var _context;
  if (includes5(parentPath).call(parentPath, "physics") && includes5(_context = configureOptions.physics.solver).call(_context, optionName) && options2.physics.solver !== optionName && optionName !== "wind") {
    return true;
  }
  return false;
};
var options = Object.freeze({
  __proto__: null,
  configuratorHideOption,
  allOptions,
  configureOptions
});
var FloydWarshall = function() {
  function FloydWarshall2() {
    _classCallCheck2(this, FloydWarshall2);
  }
  _createClass2(FloydWarshall2, [{
    key: "getDistances",
    value: function getDistances(body, nodesArray, edgesArray) {
      var D_matrix = {};
      var edges = body.edges;
      for (var i = 0; i < nodesArray.length; i++) {
        var node = nodesArray[i];
        var cell = {};
        D_matrix[node] = cell;
        for (var j = 0; j < nodesArray.length; j++) {
          cell[nodesArray[j]] = i == j ? 0 : 1e9;
        }
      }
      for (var _i = 0; _i < edgesArray.length; _i++) {
        var edge = edges[edgesArray[_i]];
        if (edge.connected === true && D_matrix[edge.fromId] !== void 0 && D_matrix[edge.toId] !== void 0) {
          D_matrix[edge.fromId][edge.toId] = 1;
          D_matrix[edge.toId][edge.fromId] = 1;
        }
      }
      var nodeCount = nodesArray.length;
      for (var k = 0; k < nodeCount; k++) {
        var knode = nodesArray[k];
        var kcolm = D_matrix[knode];
        for (var _i2 = 0; _i2 < nodeCount - 1; _i2++) {
          var inode = nodesArray[_i2];
          var icolm = D_matrix[inode];
          for (var _j = _i2 + 1; _j < nodeCount; _j++) {
            var jnode = nodesArray[_j];
            var jcolm = D_matrix[jnode];
            var val = Math.min(icolm[jnode], icolm[knode] + kcolm[jnode]);
            icolm[jnode] = val;
            jcolm[inode] = val;
          }
        }
      }
      return D_matrix;
    }
  }]);
  return FloydWarshall2;
}();
var KamadaKawai = function() {
  function KamadaKawai2(body, edgeLength, edgeStrength) {
    _classCallCheck2(this, KamadaKawai2);
    this.body = body;
    this.springLength = edgeLength;
    this.springConstant = edgeStrength;
    this.distanceSolver = new FloydWarshall();
  }
  _createClass2(KamadaKawai2, [{
    key: "setOptions",
    value: function setOptions(options2) {
      if (options2) {
        if (options2.springLength) {
          this.springLength = options2.springLength;
        }
        if (options2.springConstant) {
          this.springConstant = options2.springConstant;
        }
      }
    }
  }, {
    key: "solve",
    value: function solve(nodesArray, edgesArray) {
      var ignoreClusters = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var D_matrix = this.distanceSolver.getDistances(this.body, nodesArray, edgesArray);
      this._createL_matrix(D_matrix);
      this._createK_matrix(D_matrix);
      this._createE_matrix();
      var threshold = 0.01;
      var innerThreshold = 1;
      var iterations = 0;
      var maxIterations = Math.max(1e3, Math.min(10 * this.body.nodeIndices.length, 6e3));
      var maxInnerIterations = 5;
      var maxEnergy = 1e9;
      var highE_nodeId = 0, dE_dx = 0, dE_dy = 0, delta_m = 0, subIterations = 0;
      while (maxEnergy > threshold && iterations < maxIterations) {
        iterations += 1;
        var _this$_getHighestEner = this._getHighestEnergyNode(ignoreClusters);
        var _this$_getHighestEner2 = _slicedToArray2(_this$_getHighestEner, 4);
        highE_nodeId = _this$_getHighestEner2[0];
        maxEnergy = _this$_getHighestEner2[1];
        dE_dx = _this$_getHighestEner2[2];
        dE_dy = _this$_getHighestEner2[3];
        delta_m = maxEnergy;
        subIterations = 0;
        while (delta_m > innerThreshold && subIterations < maxInnerIterations) {
          subIterations += 1;
          this._moveNode(highE_nodeId, dE_dx, dE_dy);
          var _this$_getEnergy = this._getEnergy(highE_nodeId);
          var _this$_getEnergy2 = _slicedToArray2(_this$_getEnergy, 3);
          delta_m = _this$_getEnergy2[0];
          dE_dx = _this$_getEnergy2[1];
          dE_dy = _this$_getEnergy2[2];
        }
      }
    }
  }, {
    key: "_getHighestEnergyNode",
    value: function _getHighestEnergyNode(ignoreClusters) {
      var nodesArray = this.body.nodeIndices;
      var nodes = this.body.nodes;
      var maxEnergy = 0;
      var maxEnergyNodeId = nodesArray[0];
      var dE_dx_max = 0, dE_dy_max = 0;
      for (var nodeIdx = 0; nodeIdx < nodesArray.length; nodeIdx++) {
        var m = nodesArray[nodeIdx];
        if (nodes[m].predefinedPosition !== true || nodes[m].isCluster === true && ignoreClusters === true || nodes[m].options.fixed.x !== true || nodes[m].options.fixed.y !== true) {
          var _this$_getEnergy3 = this._getEnergy(m), _this$_getEnergy4 = _slicedToArray2(_this$_getEnergy3, 3), delta_m = _this$_getEnergy4[0], dE_dx = _this$_getEnergy4[1], dE_dy = _this$_getEnergy4[2];
          if (maxEnergy < delta_m) {
            maxEnergy = delta_m;
            maxEnergyNodeId = m;
            dE_dx_max = dE_dx;
            dE_dy_max = dE_dy;
          }
        }
      }
      return [maxEnergyNodeId, maxEnergy, dE_dx_max, dE_dy_max];
    }
  }, {
    key: "_getEnergy",
    value: function _getEnergy(m) {
      var _this$E_sums$m = _slicedToArray2(this.E_sums[m], 2), dE_dx = _this$E_sums$m[0], dE_dy = _this$E_sums$m[1];
      var delta_m = Math.sqrt(Math.pow(dE_dx, 2) + Math.pow(dE_dy, 2));
      return [delta_m, dE_dx, dE_dy];
    }
  }, {
    key: "_moveNode",
    value: function _moveNode(m, dE_dx, dE_dy) {
      var nodesArray = this.body.nodeIndices;
      var nodes = this.body.nodes;
      var d2E_dx2 = 0;
      var d2E_dxdy = 0;
      var d2E_dy2 = 0;
      var x_m = nodes[m].x;
      var y_m = nodes[m].y;
      var km = this.K_matrix[m];
      var lm = this.L_matrix[m];
      for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
        var i = nodesArray[iIdx];
        if (i !== m) {
          var x_i = nodes[i].x;
          var y_i = nodes[i].y;
          var kmat = km[i];
          var lmat = lm[i];
          var denominator = 1 / Math.pow(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2), 1.5);
          d2E_dx2 += kmat * (1 - lmat * Math.pow(y_m - y_i, 2) * denominator);
          d2E_dxdy += kmat * (lmat * (x_m - x_i) * (y_m - y_i) * denominator);
          d2E_dy2 += kmat * (1 - lmat * Math.pow(x_m - x_i, 2) * denominator);
        }
      }
      var A = d2E_dx2, B = d2E_dxdy, C = dE_dx, D = d2E_dy2, E = dE_dy;
      var dy = (C / A + E / B) / (B / A - D / B);
      var dx = -(B * dy + C) / A;
      nodes[m].x += dx;
      nodes[m].y += dy;
      this._updateE_matrix(m);
    }
  }, {
    key: "_createL_matrix",
    value: function _createL_matrix(D_matrix) {
      var nodesArray = this.body.nodeIndices;
      var edgeLength = this.springLength;
      this.L_matrix = [];
      for (var i = 0; i < nodesArray.length; i++) {
        this.L_matrix[nodesArray[i]] = {};
        for (var j = 0; j < nodesArray.length; j++) {
          this.L_matrix[nodesArray[i]][nodesArray[j]] = edgeLength * D_matrix[nodesArray[i]][nodesArray[j]];
        }
      }
    }
  }, {
    key: "_createK_matrix",
    value: function _createK_matrix(D_matrix) {
      var nodesArray = this.body.nodeIndices;
      var edgeStrength = this.springConstant;
      this.K_matrix = [];
      for (var i = 0; i < nodesArray.length; i++) {
        this.K_matrix[nodesArray[i]] = {};
        for (var j = 0; j < nodesArray.length; j++) {
          this.K_matrix[nodesArray[i]][nodesArray[j]] = edgeStrength * Math.pow(D_matrix[nodesArray[i]][nodesArray[j]], -2);
        }
      }
    }
  }, {
    key: "_createE_matrix",
    value: function _createE_matrix() {
      var nodesArray = this.body.nodeIndices;
      var nodes = this.body.nodes;
      this.E_matrix = {};
      this.E_sums = {};
      for (var mIdx = 0; mIdx < nodesArray.length; mIdx++) {
        this.E_matrix[nodesArray[mIdx]] = [];
      }
      for (var _mIdx = 0; _mIdx < nodesArray.length; _mIdx++) {
        var m = nodesArray[_mIdx];
        var x_m = nodes[m].x;
        var y_m = nodes[m].y;
        var dE_dx = 0;
        var dE_dy = 0;
        for (var iIdx = _mIdx; iIdx < nodesArray.length; iIdx++) {
          var i = nodesArray[iIdx];
          if (i !== m) {
            var x_i = nodes[i].x;
            var y_i = nodes[i].y;
            var denominator = 1 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));
            this.E_matrix[m][iIdx] = [this.K_matrix[m][i] * (x_m - x_i - this.L_matrix[m][i] * (x_m - x_i) * denominator), this.K_matrix[m][i] * (y_m - y_i - this.L_matrix[m][i] * (y_m - y_i) * denominator)];
            this.E_matrix[i][_mIdx] = this.E_matrix[m][iIdx];
            dE_dx += this.E_matrix[m][iIdx][0];
            dE_dy += this.E_matrix[m][iIdx][1];
          }
        }
        this.E_sums[m] = [dE_dx, dE_dy];
      }
    }
  }, {
    key: "_updateE_matrix",
    value: function _updateE_matrix(m) {
      var nodesArray = this.body.nodeIndices;
      var nodes = this.body.nodes;
      var colm = this.E_matrix[m];
      var kcolm = this.K_matrix[m];
      var lcolm = this.L_matrix[m];
      var x_m = nodes[m].x;
      var y_m = nodes[m].y;
      var dE_dx = 0;
      var dE_dy = 0;
      for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
        var i = nodesArray[iIdx];
        if (i !== m) {
          var cell = colm[iIdx];
          var oldDx = cell[0];
          var oldDy = cell[1];
          var x_i = nodes[i].x;
          var y_i = nodes[i].y;
          var denominator = 1 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));
          var dx = kcolm[i] * (x_m - x_i - lcolm[i] * (x_m - x_i) * denominator);
          var dy = kcolm[i] * (y_m - y_i - lcolm[i] * (y_m - y_i) * denominator);
          colm[iIdx] = [dx, dy];
          dE_dx += dx;
          dE_dy += dy;
          var sum = this.E_sums[i];
          sum[0] += dx - oldDx;
          sum[1] += dy - oldDy;
        }
      }
      this.E_sums[m] = [dE_dx, dE_dy];
    }
  }]);
  return KamadaKawai2;
}();
function Network(container, data3, options2) {
  var _context, _context2, _context3, _context4, _this = this;
  if (!(this instanceof Network)) {
    throw new SyntaxError("Constructor must be called with the new operator");
  }
  this.options = {};
  this.defaultOptions = {
    locale: "en",
    locales,
    clickToUse: false
  };
  assign$22(this.options, this.defaultOptions);
  this.body = {
    container,
    nodes: {},
    nodeIndices: [],
    edges: {},
    edgeIndices: [],
    emitter: {
      on: bind$52(_context = this.on).call(_context, this),
      off: bind$52(_context2 = this.off).call(_context2, this),
      emit: bind$52(_context3 = this.emit).call(_context3, this),
      once: bind$52(_context4 = this.once).call(_context4, this)
    },
    eventListeners: {
      onTap: function onTap() {
      },
      onTouch: function onTouch2() {
      },
      onDoubleTap: function onDoubleTap() {
      },
      onHold: function onHold() {
      },
      onDragStart: function onDragStart() {
      },
      onDrag: function onDrag() {
      },
      onDragEnd: function onDragEnd() {
      },
      onMouseWheel: function onMouseWheel() {
      },
      onPinch: function onPinch() {
      },
      onMouseMove: function onMouseMove() {
      },
      onRelease: function onRelease2() {
      },
      onContext: function onContext() {
      }
    },
    data: {
      nodes: null,
      edges: null
    },
    functions: {
      createNode: function createNode() {
      },
      createEdge: function createEdge2() {
      },
      getPointer: function getPointer() {
      }
    },
    modules: {},
    view: {
      scale: 1,
      translation: {
        x: 0,
        y: 0
      }
    },
    selectionBox: {
      show: false,
      position: {
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 0,
          y: 0
        }
      }
    }
  };
  this.bindEventListeners();
  this.images = new Images(function() {
    return _this.body.emitter.emit("_requestRedraw");
  });
  this.groups = new Groups();
  this.canvas = new Canvas(this.body);
  this.selectionHandler = new SelectionHandler(this.body, this.canvas);
  this.interactionHandler = new InteractionHandler(this.body, this.canvas, this.selectionHandler);
  this.view = new View(this.body, this.canvas);
  this.renderer = new CanvasRenderer(this.body, this.canvas);
  this.physics = new PhysicsEngine(this.body);
  this.layoutEngine = new LayoutEngine(this.body);
  this.clustering = new ClusterEngine(this.body);
  this.manipulation = new ManipulationSystem(this.body, this.canvas, this.selectionHandler, this.interactionHandler);
  this.nodesHandler = new NodesHandler(this.body, this.images, this.groups, this.layoutEngine);
  this.edgesHandler = new EdgesHandler(this.body, this.images, this.groups);
  this.body.modules["kamadaKawai"] = new KamadaKawai(this.body, 150, 0.05);
  this.body.modules["clustering"] = this.clustering;
  this.canvas._create();
  this.setOptions(options2);
  this.setData(data3);
}
Emitter2(Network.prototype);
Network.prototype.setOptions = function(options2) {
  var _this2 = this;
  if (options2 === null) {
    options2 = void 0;
  }
  if (options2 !== void 0) {
    var errorFound2 = Validator.validate(options2, allOptions);
    if (errorFound2 === true) {
      console.error("%cErrors have been found in the supplied options object.", VALIDATOR_PRINT_STYLE);
    }
    var fields = ["locale", "locales", "clickToUse"];
    selectiveDeepExtend(fields, this.options, options2);
    if (options2.locale !== void 0) {
      options2.locale = normalizeLanguageCode(options2.locales || this.options.locales, options2.locale);
    }
    options2 = this.layoutEngine.setOptions(options2.layout, options2);
    this.canvas.setOptions(options2);
    this.groups.setOptions(options2.groups);
    this.nodesHandler.setOptions(options2.nodes);
    this.edgesHandler.setOptions(options2.edges);
    this.physics.setOptions(options2.physics);
    this.manipulation.setOptions(options2.manipulation, options2, this.options);
    this.interactionHandler.setOptions(options2.interaction);
    this.renderer.setOptions(options2.interaction);
    this.selectionHandler.setOptions(options2.interaction);
    if (options2.groups !== void 0) {
      this.body.emitter.emit("refreshNodes");
    }
    if ("configure" in options2) {
      if (!this.configurator) {
        this.configurator = new Configurator(this, this.body.container, configureOptions, this.canvas.pixelRatio, configuratorHideOption);
      }
      this.configurator.setOptions(options2.configure);
    }
    if (this.configurator && this.configurator.options.enabled === true) {
      var networkOptions = {
        nodes: {},
        edges: {},
        layout: {},
        interaction: {},
        manipulation: {},
        physics: {},
        global: {}
      };
      deepExtend(networkOptions.nodes, this.nodesHandler.options);
      deepExtend(networkOptions.edges, this.edgesHandler.options);
      deepExtend(networkOptions.layout, this.layoutEngine.options);
      deepExtend(networkOptions.interaction, this.selectionHandler.options);
      deepExtend(networkOptions.interaction, this.renderer.options);
      deepExtend(networkOptions.interaction, this.interactionHandler.options);
      deepExtend(networkOptions.manipulation, this.manipulation.options);
      deepExtend(networkOptions.physics, this.physics.options);
      deepExtend(networkOptions.global, this.canvas.options);
      deepExtend(networkOptions.global, this.options);
      this.configurator.setModuleOptions(networkOptions);
    }
    if (options2.clickToUse !== void 0) {
      if (options2.clickToUse === true) {
        if (this.activator === void 0) {
          this.activator = new Activator(this.canvas.frame);
          this.activator.on("change", function() {
            _this2.body.emitter.emit("activate");
          });
        }
      } else {
        if (this.activator !== void 0) {
          this.activator.destroy();
          delete this.activator;
        }
        this.body.emitter.emit("activate");
      }
    } else {
      this.body.emitter.emit("activate");
    }
    this.canvas.setSize();
    this.body.emitter.emit("startSimulation");
  }
};
Network.prototype._updateVisibleIndices = function() {
  var nodes = this.body.nodes;
  var edges = this.body.edges;
  this.body.nodeIndices = [];
  this.body.edgeIndices = [];
  for (var nodeId in nodes) {
    if (Object.prototype.hasOwnProperty.call(nodes, nodeId)) {
      if (!this.clustering._isClusteredNode(nodeId) && nodes[nodeId].options.hidden === false) {
        this.body.nodeIndices.push(nodes[nodeId].id);
      }
    }
  }
  for (var edgeId in edges) {
    if (Object.prototype.hasOwnProperty.call(edges, edgeId)) {
      var edge = edges[edgeId];
      var fromNode = nodes[edge.fromId];
      var toNode = nodes[edge.toId];
      var edgeNodesPresent = fromNode !== void 0 && toNode !== void 0;
      var isVisible = !this.clustering._isClusteredEdge(edgeId) && edge.options.hidden === false && edgeNodesPresent && fromNode.options.hidden === false && toNode.options.hidden === false;
      if (isVisible) {
        this.body.edgeIndices.push(edge.id);
      }
    }
  }
};
Network.prototype.bindEventListeners = function() {
  var _this3 = this;
  this.body.emitter.on("_dataChanged", function() {
    _this3.edgesHandler._updateState();
    _this3.body.emitter.emit("_dataUpdated");
  });
  this.body.emitter.on("_dataUpdated", function() {
    _this3.clustering._updateState();
    _this3._updateVisibleIndices();
    _this3._updateValueRange(_this3.body.nodes);
    _this3._updateValueRange(_this3.body.edges);
    _this3.body.emitter.emit("startSimulation");
    _this3.body.emitter.emit("_requestRedraw");
  });
};
Network.prototype.setData = function(data3) {
  this.body.emitter.emit("resetPhysics");
  this.body.emitter.emit("_resetData");
  this.selectionHandler.unselectAll();
  if (data3 && data3.dot && (data3.nodes || data3.edges)) {
    throw new SyntaxError('Data must contain either parameter "dot" or  parameter pair "nodes" and "edges", but not both.');
  }
  this.setOptions(data3 && data3.options);
  if (data3 && data3.dot) {
    console.warn("The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);");
    var dotData = DOTToGraph(data3.dot);
    this.setData(dotData);
    return;
  } else if (data3 && data3.gephi) {
    console.warn("The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);");
    var gephiData = parseGephi(data3.gephi);
    this.setData(gephiData);
    return;
  } else {
    this.nodesHandler.setData(data3 && data3.nodes, true);
    this.edgesHandler.setData(data3 && data3.edges, true);
  }
  this.body.emitter.emit("_dataChanged");
  this.body.emitter.emit("_dataLoaded");
  this.body.emitter.emit("initPhysics");
};
Network.prototype.destroy = function() {
  this.body.emitter.emit("destroy");
  this.body.emitter.off();
  this.off();
  delete this.groups;
  delete this.canvas;
  delete this.selectionHandler;
  delete this.interactionHandler;
  delete this.view;
  delete this.renderer;
  delete this.physics;
  delete this.layoutEngine;
  delete this.clustering;
  delete this.manipulation;
  delete this.nodesHandler;
  delete this.edgesHandler;
  delete this.configurator;
  delete this.images;
  for (var nodeId in this.body.nodes) {
    if (!Object.prototype.hasOwnProperty.call(this.body.nodes, nodeId))
      continue;
    delete this.body.nodes[nodeId];
  }
  for (var edgeId in this.body.edges) {
    if (!Object.prototype.hasOwnProperty.call(this.body.edges, edgeId))
      continue;
    delete this.body.edges[edgeId];
  }
  recursiveDOMDelete(this.body.container);
};
Network.prototype._updateValueRange = function(obj) {
  var id3;
  var valueMin = void 0;
  var valueMax = void 0;
  var valueTotal = 0;
  for (id3 in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, id3)) {
      var value = obj[id3].getValue();
      if (value !== void 0) {
        valueMin = valueMin === void 0 ? value : Math.min(value, valueMin);
        valueMax = valueMax === void 0 ? value : Math.max(value, valueMax);
        valueTotal += value;
      }
    }
  }
  if (valueMin !== void 0 && valueMax !== void 0) {
    for (id3 in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, id3)) {
        obj[id3].setValueRange(valueMin, valueMax, valueTotal);
      }
    }
  }
};
Network.prototype.isActive = function() {
  return !this.activator || this.activator.active;
};
Network.prototype.setSize = function() {
  return this.canvas.setSize.apply(this.canvas, arguments);
};
Network.prototype.canvasToDOM = function() {
  return this.canvas.canvasToDOM.apply(this.canvas, arguments);
};
Network.prototype.DOMtoCanvas = function() {
  return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
};
Network.prototype.findNode = function() {
  return this.clustering.findNode.apply(this.clustering, arguments);
};
Network.prototype.isCluster = function() {
  return this.clustering.isCluster.apply(this.clustering, arguments);
};
Network.prototype.openCluster = function() {
  return this.clustering.openCluster.apply(this.clustering, arguments);
};
Network.prototype.cluster = function() {
  return this.clustering.cluster.apply(this.clustering, arguments);
};
Network.prototype.getNodesInCluster = function() {
  return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
};
Network.prototype.clusterByConnection = function() {
  return this.clustering.clusterByConnection.apply(this.clustering, arguments);
};
Network.prototype.clusterByHubsize = function() {
  return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
};
Network.prototype.updateClusteredNode = function() {
  return this.clustering.updateClusteredNode.apply(this.clustering, arguments);
};
Network.prototype.getClusteredEdges = function() {
  return this.clustering.getClusteredEdges.apply(this.clustering, arguments);
};
Network.prototype.getBaseEdge = function() {
  return this.clustering.getBaseEdge.apply(this.clustering, arguments);
};
Network.prototype.getBaseEdges = function() {
  return this.clustering.getBaseEdges.apply(this.clustering, arguments);
};
Network.prototype.updateEdge = function() {
  return this.clustering.updateEdge.apply(this.clustering, arguments);
};
Network.prototype.clusterOutliers = function() {
  return this.clustering.clusterOutliers.apply(this.clustering, arguments);
};
Network.prototype.getSeed = function() {
  return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
};
Network.prototype.enableEditMode = function() {
  return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
};
Network.prototype.disableEditMode = function() {
  return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
};
Network.prototype.addNodeMode = function() {
  return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
};
Network.prototype.editNode = function() {
  return this.manipulation.editNode.apply(this.manipulation, arguments);
};
Network.prototype.editNodeMode = function() {
  console.warn("Deprecated: Please use editNode instead of editNodeMode.");
  return this.manipulation.editNode.apply(this.manipulation, arguments);
};
Network.prototype.addEdgeMode = function() {
  return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
};
Network.prototype.editEdgeMode = function() {
  return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
};
Network.prototype.deleteSelected = function() {
  return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
};
Network.prototype.getPositions = function() {
  return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
};
Network.prototype.getPosition = function() {
  return this.nodesHandler.getPosition.apply(this.nodesHandler, arguments);
};
Network.prototype.storePositions = function() {
  return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
};
Network.prototype.moveNode = function() {
  return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
};
Network.prototype.getBoundingBox = function() {
  return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
};
Network.prototype.getConnectedNodes = function(objectId) {
  if (this.body.nodes[objectId] !== void 0) {
    return this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments);
  } else {
    return this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
  }
};
Network.prototype.getConnectedEdges = function() {
  return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
};
Network.prototype.startSimulation = function() {
  return this.physics.startSimulation.apply(this.physics, arguments);
};
Network.prototype.stopSimulation = function() {
  return this.physics.stopSimulation.apply(this.physics, arguments);
};
Network.prototype.stabilize = function() {
  return this.physics.stabilize.apply(this.physics, arguments);
};
Network.prototype.getSelection = function() {
  return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
};
Network.prototype.setSelection = function() {
  return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
};
Network.prototype.getSelectedNodes = function() {
  return this.selectionHandler.getSelectedNodeIds.apply(this.selectionHandler, arguments);
};
Network.prototype.getSelectedEdges = function() {
  return this.selectionHandler.getSelectedEdgeIds.apply(this.selectionHandler, arguments);
};
Network.prototype.getNodeAt = function() {
  var node = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
  if (node !== void 0 && node.id !== void 0) {
    return node.id;
  }
  return node;
};
Network.prototype.getEdgeAt = function() {
  var edge = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
  if (edge !== void 0 && edge.id !== void 0) {
    return edge.id;
  }
  return edge;
};
Network.prototype.selectNodes = function() {
  return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
};
Network.prototype.selectEdges = function() {
  return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
};
Network.prototype.unselectAll = function() {
  this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments);
  this.selectionHandler.commitWithoutEmitting.apply(this.selectionHandler);
  this.redraw();
};
Network.prototype.redraw = function() {
  return this.renderer.redraw.apply(this.renderer, arguments);
};
Network.prototype.getScale = function() {
  return this.view.getScale.apply(this.view, arguments);
};
Network.prototype.getViewPosition = function() {
  return this.view.getViewPosition.apply(this.view, arguments);
};
Network.prototype.fit = function() {
  return this.view.fit.apply(this.view, arguments);
};
Network.prototype.moveTo = function() {
  return this.view.moveTo.apply(this.view, arguments);
};
Network.prototype.focus = function() {
  return this.view.focus.apply(this.view, arguments);
};
Network.prototype.releaseNode = function() {
  return this.view.releaseNode.apply(this.view, arguments);
};
Network.prototype.getOptionsFromConfigurator = function() {
  var options2 = {};
  if (this.configurator) {
    options2 = this.configurator.getOptions.apply(this.configurator);
  }
  return options2;
};
var parseDOTNetwork = DOTToGraph;
export {
  Network,
  Images as NetworkImages,
  dotparser as networkDOTParser,
  gephiParser as networkGephiParser,
  options as networkOptions,
  parseDOTNetwork,
  parseGephi as parseGephiNetwork
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! Hammer.JS - v2.0.17-rc - 2019-12-16
 * http://naver.github.io/egjs
 *
 * Forked By Naver egjs
 * Copyright (c) hammerjs
 * Licensed under the MIT license */
/**
 * vis-data
 * http://visjs.org/
 *
 * Manage unstructured data using DataSet. Add, update, and remove data, and listen for changes in the data.
 *
 * @version 7.1.4
 * @date    2022-03-15T15:23:59.245Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */
/**
 * vis-network
 * https://visjs.github.io/vis-network/
 *
 * A dynamic, browser-based visualization library.
 *
 * @version 9.1.2
 * @date    2022-03-28T20:13:51.046Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */
//# sourceMappingURL=vis-network.js.map
